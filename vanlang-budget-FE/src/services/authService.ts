import axios from 'axios'
import Cookies from 'js-cookie'
import api, { cookieOptions, formatTokenForHeader, TOKEN_COOKIE_NAME, REFRESH_TOKEN_COOKIE_NAME, saveTokenToCookie, getToken, removeTokens, API_URL } from './api'

interface LoginCredentials {
    email: string
    password: string
}

interface RegisterData {
    name: string
    email: string
    password: string
    firstName?: string
    lastName?: string
    locale?: string
}

interface User {
    _id: string
    email: string
    firstName: string
    lastName: string
    phoneNumber?: string
    fullName?: string
    role: string
    isEmailVerified: boolean
}

interface AuthResponse {
    user: {
        id: string
        email: string
        name?: string
        firstName?: string
        lastName?: string
    }
    token: string  // Backend tr·∫£ v·ªÅ token l√† string
    refreshToken: string  // refreshToken ri√™ng bi·ªát
    message?: string
}

interface VerifyOTPData {
    email: string
    otp: string
}

interface LoginResponse {
    user: any;
    token: {
        accessToken: string;
        refreshToken: string;
    };
}

/**
 * D·ªãch v·ª• x√°c th·ª±c ng∆∞·ªùi d√πng
 */
class AuthService {
    /**
     * ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
     * @param email Email ng∆∞·ªùi d√πng
     * @param password M·∫≠t kh·∫©u
     * @returns Th√¥ng tin ng∆∞·ªùi d√πng v√† token
     */
    async login(email: string, password: string): Promise<AuthResponse> {
        try {
            // S·ª≠ d·ª•ng API_URL t·ª´ api.ts
            console.log('Using API URL for login:', API_URL);

            // S·ª≠ d·ª•ng ƒë√∫ng ƒë∆∞·ªùng d·∫´n API v·ªõi ti·ªÅn t·ªë /api
            const response = await api.post('/api/auth/login', {
                email,
                password
            });

            console.log('Login response status:', response.status);

            // Clone response data v√† chu·∫©n h√≥a
            const responseData = { ...response.data };

            // Chu·∫©n h√≥a user object
            if (responseData.user && responseData.user.id && !responseData.user._id) {
                responseData.user._id = responseData.user.id;
            }

            // L∆∞u token v√†o cookie v√† localStorage
            // Backend tr·∫£ v·ªÅ { token: "...", refreshToken: "..." }
            if (responseData.token) {
                const accessToken = responseData.token;
                const refreshToken = responseData.refreshToken;

                console.log('üîë Login - Saving tokens:', {
                    hasAccessToken: !!accessToken,
                    hasRefreshToken: !!refreshToken,
                    accessTokenLength: accessToken?.length || 0,
                    refreshTokenLength: refreshToken?.length || 0
                });

                // S·ª≠ d·ª•ng h√†m t·ª´ api.ts ƒë·ªÉ l∆∞u token
                saveTokenToCookie(accessToken, refreshToken);
                console.log('‚úÖ Login token saved successfully');
            } else {
                console.error('‚ùå No token in login response:', responseData);
            }

            return responseData;
        } catch (error: any) {
            console.error('Login error details:', error.message);
            if (error.response) {
                console.error('Server response:', error.response.status, error.response.data);
            }
            throw error;
        }
    }

    /**
     * ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
     * @param userData Th√¥ng tin ng∆∞·ªùi d√πng
     * @returns Th√¥ng tin ng∆∞·ªùi d√πng sau khi ƒëƒÉng k√Ω
     */
    async register(userData: RegisterData): Promise<AuthResponse> {
        try {
            const response = await api.post('/api/auth/register', userData);
            return response.data;
        } catch (error: any) {
            console.error('Register error:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
     */
    async logout(): Promise<void> {
        try {
            // Th·ª≠ g·ªçi API logout
            console.log('ƒêang g·ªçi API logout...');
            try {
                await api.post('/api/auth/logout');
                console.log('API logout th√†nh c√¥ng');
            } catch (error: any) {
                // Ch·ªâ log l·ªói nh∆∞ng kh√¥ng throw
                console.warn('API logout kh√¥ng th√†nh c√¥ng:', error.message);
                if (error.response) {
                    console.warn('API logout response:', error.response.status, error.response.data);
                }
                // Kh√¥ng throw l·ªói ·ªü ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o removeTokens() v·∫´n ƒë∆∞·ª£c th·ª±c hi·ªán
            }

            // Lu√¥n x√≥a token d√π c√≥ l·ªói hay kh√¥ng
            console.log('X√≥a token kh·ªèi client...');
            removeTokens();
            console.log('ƒê√£ x√≥a token, logout ho√†n t·∫•t');
        } catch (error: any) {
            // N·∫øu c√≥ l·ªói kh√°c (kh√¥ng ph·∫£i t·ª´ API), v·∫´n log ra
            console.error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi logout:', error.message);
            // ƒê·∫£m b·∫£o token v·∫´n ƒë∆∞·ª£c x√≥a
            removeTokens();
            // Kh√¥ng throw l·ªói ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
        }
    }

    /**
     * L·∫•y th√¥ng tin h·ªì s∆° ng∆∞·ªùi d√πng
     * @returns Th√¥ng tin ng∆∞·ªùi d√πng
     */
    async getUserProfile(): Promise<any> {
        try {
            const response = await api.get('/api/auth/me');
            console.log('getUserProfile response:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('Get user profile error:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * ƒê·ªïi m·∫≠t kh·∫©u
     * @param currentPassword M·∫≠t kh·∫©u hi·ªán t·∫°i
     * @param newPassword M·∫≠t kh·∫©u m·ªõi
     * @returns Th√¥ng b√°o th√†nh c√¥ng
     */
    async changePassword(oldPassword: string, newPassword: string): Promise<void> {
        try {
            await api.post('/api/auth/change-password', { oldPassword, newPassword });
            console.log('Password change successful');
        } catch (error: any) {
            console.error('Change password error:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * L√†m m·ªõi token
     * @param refreshToken Token l√†m m·ªõi
     * @returns Token truy c·∫≠p m·ªõi
     */
    async refreshToken(refreshToken: string): Promise<any> {
        try {
            const response = await api.post('/api/auth/refresh-token', { refreshToken });
            return response.data;
        } catch (error: any) {
            console.error('Refresh token error:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
     * @returns Th√¥ng tin ng∆∞·ªùi d√πng
     */
    async getCurrentUser() {
        try {
            const response = await api.get('/api/auth/me');
            return response.data;
        } catch (error: any) {
            console.error('Get current user error:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
     * @param email Email ng∆∞·ªùi d√πng
     * @returns Th√¥ng b√°o th√†nh c√¥ng
     */
    async forgotPassword(email: string) {
        try {
            const response = await api.post('/api/auth/forgotpassword', { email });
            return response.data;
        } catch (error: any) {
            console.error('Forgot password error:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
     * @param token Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
     * @param password M·∫≠t kh·∫©u m·ªõi
     * @param passwordConfirm X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
     * @returns Th√¥ng b√°o th√†nh c√¥ng
     */
    async resetPassword(token: string, password: string, passwordConfirm: string) {
        try {
            const response = await api.post(`/api/auth/resetpassword/${token}`, {
                password,
                passwordConfirm
            });
            return response.data;
        } catch (error: any) {
            console.error('Reset password error:', error.response?.data || error.message);
            throw error;
        }
    }

    async verifyEmail(token: string): Promise<void> {
        try {
            await api.post('/api/auth/verify-email', { token });
            console.log('Email verification successful');
        } catch (error: any) {
            console.error('Email verification error:', error.response?.data || error.message);
            throw error;
        }
    }

    async resendVerificationEmail(email: string, locale?: string): Promise<void> {
        try {
            await api.post('/api/auth/resend-verification', { email, locale });
            console.log('Verification email resent successfully');
        } catch (error: any) {
            console.error('Resend verification email error:', error.response?.data || error.message);
            throw error;
        }
    }

    async verifyOTP(data: VerifyOTPData): Promise<AuthResponse> {
        try {
            // Ki·ªÉm tra v√† x√°c th·ª±c d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i ƒëi
            if (!data.email || !data.otp) {
                throw new Error('Email v√† m√£ OTP l√† b·∫Øt bu·ªôc');
            }

            // ƒê·∫£m b·∫£o otp l√† chu·ªói
            if (typeof data.otp !== 'string') {
                data.otp = String(data.otp);
            }

            const response = await api.post<AuthResponse>('/api/auth/verify-otp', data);
            console.log('VerifyOTP response status:', response.status);

            // X·ª≠ l√Ω response
            if (response.data) {
                const { token } = response.data;

                if (token) {
                    try {
                        // Backend tr·∫£ v·ªÅ { token: "...", refreshToken: "..." }
                        const accessToken = response.data.token;
                        const refreshToken = (response.data as any).refreshToken;

                        // L∆∞u token v√†o cookie
                        saveTokenToCookie(accessToken, refreshToken);
                        console.log('Token saved after OTP verification:', Cookies.get('token') ? 'Success' : 'Failed');
                    } catch (tokenError) {
                        console.error('Error processing token:', tokenError);
                    }
                }
            }

            return response.data;
        } catch (error: any) {
            console.error('OTP verification error:', error.response?.data || error.message);
            throw error;
        }
    }

    async resendOTP(email: string, locale?: string): Promise<void> {
        try {
            await api.post('/api/auth/resend-otp', { email, locale });
            console.log('OTP resent successfully');
        } catch (error: any) {
            console.error('Resend OTP error:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * L·∫•y token hi·ªán t·∫°i
     * @returns Token ng∆∞·ªùi d√πng ho·∫∑c null
     */
    getToken(): string | null {
        return getToken();
    }

    // L·∫•y token ƒë√£ ƒë∆∞·ª£c format ƒë·ªÉ d√πng trong header Authorization
    getAuthorizationToken(): string | undefined {
        const token = this.getToken();
        if (!token) return undefined;
        return `Bearer ${token}`;
    }

    isAuthenticated(): boolean {
        const isAuth = !!this.getToken();
        console.log('Is authenticated:', isAuth);
        return isAuth;
    }

    async resetUserData(confirmationText: string): Promise<{ success: boolean, message: string }> {
        try {
            if (confirmationText !== 'resetdata') {
                return {
                    success: false,
                    message: 'VƒÉn b·∫£n x√°c nh·∫≠n kh√¥ng ƒë√∫ng. Vui l√≤ng nh·∫≠p "resetdata" ƒë·ªÉ x√°c nh·∫≠n x√≥a d·ªØ li·ªáu.'
                };
            }

            console.log('B·∫Øt ƒë·∫ßu g·ªçi API x√≥a d·ªØ li·ªáu v·ªõi confirmation:', confirmationText);

            // S·ª≠ d·ª•ng api instance thay v√¨ g·ªçi axios tr·ª±c ti·∫øp
            const response = await api.post('/api/users/reset-data', { confirmationText });

            console.log('K·∫øt qu·∫£ x√≥a d·ªØ li·ªáu:', response.data);
            return response.data;
        } catch (error: any) {
            // X·ª≠ l√Ω l·ªói chi ti·∫øt
            console.error('L·ªói khi g·ªçi API reset-data:', error.name, error.message);

            if (error.response) {
                // L·ªói t·ª´ server tr·∫£ v·ªÅ (response status kh√°c 2xx)
                console.error('Response data:', error.response.data);
                console.error('Response status:', error.response.status);
                console.error('Response headers:', error.response.headers);
            } else if (error.request) {
                // Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response
                console.error('Request ƒë√£ g·ª≠i nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c response:', error.request);
            }

            const errorMessage = error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi x√≥a d·ªØ li·ªáu';
            return {
                success: false,
                message: errorMessage
            };
        }
    }
}

export const authService = new AuthService(); 