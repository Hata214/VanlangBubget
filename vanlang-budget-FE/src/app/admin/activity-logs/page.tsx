'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from '@/components/ui/Card';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/Select';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Badge } from '@/components/ui/Badge';
import {
    Search,
    ChevronLeft,
    ChevronRight,
    Activity,
    Calendar,
    User,
    Info,
    Download,
    RefreshCw,
    Filter,
    Clock,
    Globe,
    Monitor,
    Target,
    CheckCircle,
    XCircle,
    AlertCircle,
    Copy,
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import adminService from '@/services/adminService';
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from '@/components/ui/Dialog';
import {
    Tooltip,
    TooltipContent,
    TooltipProvider,
    TooltipTrigger,
} from '@/components/ui/Tooltip';

interface ActivityLog {
    _id: string;
    adminId: string;
    admin?: {
        _id: string;
        firstName: string;
        lastName: string;
        email: string;
        role: string;
    };
    actionType: string;
    targetId?: string;
    targetType?: string;
    inputData?: any;
    result: string;
    resultDetails?: string;
    timestamp: string;
    ipAddress?: string;
    userAgent?: string;
    metadata?: any;
}

interface AdminUser {
    _id: string;
    email: string;
    firstName: string;
    lastName: string;
    role: string;
}

export default function ActivityLogsPage() {
    const router = useRouter();
    const [activityLogs, setActivityLogs] = useState<ActivityLog[]>([]);
    const [loading, setLoading] = useState(true);
    const [currentUser, setCurrentUser] = useState<any>(null);
    const [admins, setAdmins] = useState<AdminUser[]>([]);
    const [selectedAdminId, setSelectedAdminId] = useState<string>('all');
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [filterAction, setFilterAction] = useState<string>('all');
    const [searchTerm, setSearchTerm] = useState('');
    const [dateRange, setDateRange] = useState<{ start?: string, end?: string }>({});
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [selectedLog, setSelectedLog] = useState<ActivityLog | null>(null);

    useEffect(() => {
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ localStorage
        const userRole = localStorage.getItem('user_role');
        setCurrentUser({
            _id: localStorage.getItem('user_id') || '',
            name: localStorage.getItem('user_name') || '',
            email: localStorage.getItem('user_email') || '',
            role: userRole
        });

        // N·∫øu kh√¥ng ph·∫£i superadmin, ch·ªâ hi·ªÉn th·ªã l·ªãch s·ª≠ c·ªßa ch√≠nh admin ƒë√≥
        if (userRole !== 'superadmin') {
            setSelectedAdminId(localStorage.getItem('user_id') || '');
        }

        // T·∫£i danh s√°ch admin n·∫øu l√† superadmin
        if (userRole === 'superadmin') {
            fetchAdmins();
        }

        // T·∫£i l·ªãch s·ª≠ ho·∫°t ƒë·ªông
        fetchActivityLogs();
    }, [selectedAdminId, currentPage]);

    const fetchAdmins = async () => {
        try {
            // S·ª≠ d·ª•ng adminService thay v√¨ fetch tr·ª±c ti·∫øp
            const response = await adminService.getAdminList();

            console.log('üîç Admin list response:', response);
            if (response.success) {
                setAdmins(response.data || []);
                console.log('‚úÖ Admin list loaded:', response.data?.length, 'admins');
                console.log('üîç First admin sample:', response.data?.[0]);
            } else {
                console.error('L·ªói khi l·∫•y danh s√°ch admin:', response.message);
            }
        } catch (error) {
            console.error('L·ªói khi t·∫£i danh s√°ch admin:', error);
        }
    };

    const fetchActivityLogs = async () => {
        try {
            setLoading(true);

            // X√¢y d·ª±ng options cho adminService
            const options: any = {
                page: currentPage,
                limit: 20
            };

            // Ch·ªâ th√™m adminId n·∫øu kh√¥ng ph·∫£i 'all'
            if (selectedAdminId && selectedAdminId !== 'all') {
                options.adminId = selectedAdminId;
            }

            if (filterAction && filterAction !== 'all') {
                options.actionType = filterAction;
            }

            if (dateRange.start) {
                options.startDate = dateRange.start;
            }

            if (dateRange.end) {
                options.endDate = dateRange.end;
            }

            // G·ªçi adminService ƒë·ªÉ l·∫•y l·ªãch s·ª≠ ho·∫°t ƒë·ªông
            const response = await adminService.getActivityLogs(options);

            if (response.status === 'success') {
                setActivityLogs(response.data || []);
                setTotalPages(response.pagination?.totalPages || 1);
            } else {
                toast.error('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ ho·∫°t ƒë·ªông');
            }
        } catch (error: any) {
            console.error('L·ªói khi t·∫£i l·ªãch s·ª≠ ho·∫°t ƒë·ªông:', error);
            const errorMessage = error?.response?.data?.message || 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu';
            toast.error(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    const handleSearch = (e: React.FormEvent) => {
        e.preventDefault();
        setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n khi t√¨m ki·∫øm
        fetchActivityLogs();
    };

    const handleRefresh = () => {
        fetchActivityLogs();
        toast.success('ƒê√£ l√†m m·ªõi d·ªØ li·ªáu');
    };

    const handleAdminChange = (value: string) => {
        setSelectedAdminId(value);
        setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n
    };

    const handleActionFilterChange = (value: string) => {
        setFilterAction(value);
        setCurrentPage(1);
        fetchActivityLogs();
    };

    const handleExport = async () => {
        try {
            // X√¢y d·ª±ng filters cho export
            const exportFilters: any = {};

            if (selectedAdminId && selectedAdminId !== 'all') {
                exportFilters.adminId = selectedAdminId;
            }

            if (filterAction && filterAction !== 'all') {
                exportFilters.actionType = filterAction;
            }

            if (dateRange.start) {
                exportFilters.startDate = dateRange.start;
            }

            if (dateRange.end) {
                exportFilters.endDate = dateRange.end;
            }

            // S·ª≠ d·ª•ng adminService ƒë·ªÉ xu·∫•t CSV
            await adminService.exportActivityLogsCSV(exportFilters);
            toast.success('ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng');
        } catch (error: any) {
            console.error('L·ªói khi xu·∫•t d·ªØ li·ªáu:', error);
            const errorMessage = error?.response?.data?.message || 'Kh√¥ng th·ªÉ xu·∫•t d·ªØ li·ªáu';
            toast.error(errorMessage);
        }
    };

    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        const now = new Date();
        const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

        // Hi·ªÉn th·ªã th·ªùi gian relative n·∫øu trong v√≤ng 24h
        if (diffInSeconds < 86400) { // 24 hours
            if (diffInSeconds < 60) return `${diffInSeconds} gi√¢y tr∆∞·ªõc`;
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} ph√∫t tr∆∞·ªõc`;
            return `${Math.floor(diffInSeconds / 3600)} gi·ªù tr∆∞·ªõc`;
        }

        return date.toLocaleString('vi-VN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    };

    const getActionLabel = (action: string) => {
        const actionLabels: Record<string, string> = {
            // User Management Actions
            'USER_CREATE': 'T·∫°o ng∆∞·ªùi d√πng',
            'USER_UPDATE': 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng',
            'USER_DELETE': 'X√≥a ng∆∞·ªùi d√πng',
            'USER_ACTIVATE': 'K√≠ch ho·∫°t ng∆∞·ªùi d√πng',
            'USER_DEACTIVATE': 'V√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng',
            'USER_PROMOTE': 'ThƒÉng c·∫•p ng∆∞·ªùi d√πng',
            'USER_DEMOTE': 'H·∫° c·∫•p ng∆∞·ªùi d√πng',
            'USER_RESET_PASSWORD': 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
            'USER_VIEW': 'Xem ng∆∞·ªùi d√πng',

            // Content Management Actions
            'CONTENT_CREATE': 'T·∫°o n·ªôi dung',
            'CONTENT_UPDATE': 'C·∫≠p nh·∫≠t n·ªôi dung',
            'CONTENT_DELETE': 'X√≥a n·ªôi dung',
            'CONTENT_APPROVE': 'Ph√™ duy·ªát n·ªôi dung',
            'CONTENT_REJECT': 'T·ª´ ch·ªëi n·ªôi dung',
            'CONTENT_PUBLISH': 'Xu·∫•t b·∫£n n·ªôi dung',
            'CONTENT_RESTORE': 'Kh√¥i ph·ª•c n·ªôi dung',

            // Transaction Management Actions
            'TRANSACTIONS_VIEW': 'Xem giao d·ªãch',
            'TRANSACTIONS_EXPORT': 'Xu·∫•t giao d·ªãch',
            'TRANSACTION_VIEW': 'Xem chi ti·∫øt giao d·ªãch',
            'TRANSACTION_UPDATE': 'C·∫≠p nh·∫≠t giao d·ªãch',
            'TRANSACTION_DELETE': 'X√≥a giao d·ªãch',

            // Admin Management Actions
            'ADMIN_CREATE': 'T·∫°o admin',
            'ADMIN_UPDATE': 'C·∫≠p nh·∫≠t admin',
            'ADMIN_DELETE': 'X√≥a admin',
            'ADMIN_TOGGLE_STATUS': 'Thay ƒë·ªïi tr·∫°ng th√°i admin',
            'ADMIN_LIST_VIEW': 'Xem danh s√°ch admin',

            // System Actions
            'LOGIN': 'ƒêƒÉng nh·∫≠p',
            'LOGOUT': 'ƒêƒÉng xu·∫•t',
            'DASHBOARD_VIEW': 'Xem dashboard',
            'EXPORT_DATA': 'Xu·∫•t d·ªØ li·ªáu',
            'IMPORT_DATA': 'Nh·∫≠p d·ªØ li·ªáu',

            // Dashboard Actions (legacy)
            'VIEW_DASHBOARD': 'Xem dashboard',

            // Admin Management (legacy)
            'VIEW_ADMIN_LIST': 'Xem danh s√°ch admin',
            'CREATE_ADMIN': 'T·∫°o admin m·ªõi',
            'UPDATE_ADMIN': 'C·∫≠p nh·∫≠t admin',
            'DELETE_ADMIN': 'X√≥a admin',
            'ACTIVATE_ADMIN': 'K√≠ch ho·∫°t admin',
            'DEACTIVATE_ADMIN': 'V√¥ hi·ªáu h√≥a admin',

            // Content Management (legacy)
            'VIEW_SITE_CONTENT': 'Xem n·ªôi dung site',
            'UPDATE_SITE_CONTENT': 'C·∫≠p nh·∫≠t n·ªôi dung site',
            'APPROVE_CONTENT': 'Ph√™ duy·ªát n·ªôi dung',
            'REJECT_CONTENT': 'T·ª´ ch·ªëi n·ªôi dung',
            'RESTORE_CONTENT_VERSION': 'Kh√¥i ph·ª•c phi√™n b·∫£n',

            // User Management (legacy)
            'VIEW_USER_LIST': 'Xem danh s√°ch ng∆∞·ªùi d√πng',
            'UPDATE_USER': 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng',
            'DELETE_USER': 'X√≥a ng∆∞·ªùi d√πng',
            'RESET_USER_PASSWORD': 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
            'ACTIVATE_USER': 'K√≠ch ho·∫°t ng∆∞·ªùi d√πng',
            'DEACTIVATE_USER': 'V√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng',

            // Authentication (legacy)
            'FAILED_LOGIN': 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',

            // System (legacy)
            'SYSTEM_CONFIG': 'C·∫•u h√¨nh h·ªá th·ªëng',
            'OTHER': 'Ho·∫°t ƒë·ªông kh√°c'
        };

        return actionLabels[action] || action;
    };

    const getAdminName = (adminId: string) => {
        // T√¨m log c√≥ admin data ƒë∆∞·ª£c populate
        const logWithAdmin = activityLogs.find(log => log.adminId === adminId && log.admin);
        if (logWithAdmin?.admin) {
            return `${logWithAdmin.admin.firstName} ${logWithAdmin.admin.lastName}`;
        }

        // Fallback: t√¨m trong danh s√°ch admins
        const admin = admins.find(a => a._id === adminId);
        if (admin) {
            return `${admin.firstName} ${admin.lastName}`;
        }
        return adminId; // Fallback to ID if not found
    };

    const getActionBadgeColor = (action: string | undefined) => {
        if (!action) return 'bg-gray-100 text-gray-800 border-gray-300';
        if (action.includes('CREATE') || action.includes('APPROVE')) return 'bg-green-100 text-green-800 border-green-300';
        if (action.includes('DELETE') || action.includes('REJECT') || action.includes('FAILED')) return 'bg-red-100 text-red-800 border-red-300';
        if (action.includes('UPDATE') || action.includes('RESTORE')) return 'bg-blue-100 text-blue-800 border-blue-300';
        if (action.includes('VIEW')) return 'bg-gray-100 text-gray-800 border-gray-300';
        if (action.includes('ACTIVATE')) return 'bg-green-100 text-green-800 border-green-300';
        if (action.includes('DEACTIVATE')) return 'bg-orange-100 text-orange-800 border-orange-300';
        return 'bg-gray-100 text-gray-800 border-gray-300';
    };

    const handleOpenDialog = (log: ActivityLog) => {
        setSelectedLog(log);
        setIsDialogOpen(true);
    };

    const handleCloseDialog = () => {
        setSelectedLog(null);
        setIsDialogOpen(false);
    };

    const handleCopyLogInfo = async () => {
        if (!selectedLog) return;

        const logInfo = {
            id: selectedLog._id,
            action: getActionLabel(selectedLog.actionType),
            timestamp: formatDate(selectedLog.timestamp),
            result: selectedLog.result,
            admin: selectedLog.admin ? `${selectedLog.admin.firstName} ${selectedLog.admin.lastName}` : 'N/A',
            targetType: selectedLog.targetType || 'N/A',
            targetId: selectedLog.targetId || 'N/A',
            ipAddress: selectedLog.ipAddress || 'N/A',
            userAgent: selectedLog.userAgent || 'N/A',
            inputData: selectedLog.inputData ? JSON.stringify(selectedLog.inputData, null, 2) : 'N/A',
            resultDetails: selectedLog.resultDetails || 'N/A',
            metadata: selectedLog.metadata ? JSON.stringify(selectedLog.metadata, null, 2) : 'N/A'
        };

        const textToCopy = `
=== CHI TI·∫æT HO·∫†T ƒê·ªòNG ===
ID: ${logInfo.id}
H√†nh ƒë·ªông: ${logInfo.action}
Th·ªùi gian: ${logInfo.timestamp}
K·∫øt qu·∫£: ${logInfo.result}
Qu·∫£n tr·ªã vi√™n: ${logInfo.admin}
Lo·∫°i ƒë·ªëi t∆∞·ª£ng: ${logInfo.targetType}
ID ƒë·ªëi t∆∞·ª£ng: ${logInfo.targetId}
ƒê·ªãa ch·ªâ IP: ${logInfo.ipAddress}
User Agent: ${logInfo.userAgent}

=== D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO ===
${logInfo.inputData}

=== CHI TI·∫æT K·∫æT QU·∫¢ ===
${logInfo.resultDetails}

=== METADATA ===
${logInfo.metadata}
        `.trim();

        try {
            await navigator.clipboard.writeText(textToCopy);
            toast.success('ƒê√£ copy th√¥ng tin v√†o clipboard');
        } catch (error) {
            toast.error('Kh√¥ng th·ªÉ copy th√¥ng tin');
        }
    };

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <div>
                    <h1 className="text-3xl font-bold tracking-tight">L·ªãch s·ª≠ ho·∫°t ƒë·ªông</h1>
                    <p className="text-muted-foreground mt-2">
                        Theo d√µi c√°c ho·∫°t ƒë·ªông c·ªßa qu·∫£n tr·ªã vi√™n trong h·ªá th·ªëng
                    </p>
                </div>
                <div className="flex gap-2">
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={handleRefresh}
                    >
                        <RefreshCw className="h-4 w-4 mr-2" />
                        L√†m m·ªõi
                    </Button>
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={handleExport}
                    >
                        <Download className="h-4 w-4 mr-2" />
                        Xu·∫•t CSV
                    </Button>
                </div>
            </div>

            <Card>
                <CardHeader>
                    <CardTitle>L·ªãch s·ª≠ ho·∫°t ƒë·ªông qu·∫£n tr·ªã vi√™n</CardTitle>
                    <CardDescription>
                        Xem l·ªãch s·ª≠ c√°c thao t√°c ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi qu·∫£n tr·ªã vi√™n
                    </CardDescription>

                    <form onSubmit={handleSearch} className="mt-4 flex flex-col md:flex-row gap-4">
                        <div className="w-full md:w-64">
                            <Input
                                type="text"
                                placeholder="T√¨m ki·∫øm h√†nh ƒë·ªông..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="w-full"
                            />
                        </div>

                        <div className="w-full md:w-48">
                            <Input
                                type="date"
                                placeholder="T·ª´ ng√†y"
                                value={dateRange.start || ''}
                                onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                                className="w-full"
                            />
                        </div>

                        <div className="w-full md:w-48">
                            <Input
                                type="date"
                                placeholder="ƒê·∫øn ng√†y"
                                value={dateRange.end || ''}
                                onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                                className="w-full"
                            />
                        </div>

                        {currentUser?.role === 'superadmin' && (
                            <div className="w-full md:w-64">
                                <Select
                                    value={selectedAdminId}
                                    onValueChange={handleAdminChange}
                                >
                                    <SelectTrigger>
                                        <SelectValue placeholder="Ch·ªçn Admin" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="all">T·∫•t c·∫£ Admin</SelectItem>
                                        {admins.map((admin) => (
                                            <SelectItem key={admin._id} value={admin._id}>
                                                {admin.firstName} {admin.lastName}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        )}

                        <div className="w-full md:w-64">
                            <Select
                                value={filterAction}
                                onValueChange={handleActionFilterChange}
                            >
                                <SelectTrigger>
                                    <SelectValue placeholder="L·ªçc theo h√†nh ƒë·ªông" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">T·∫•t c·∫£ h√†nh ƒë·ªông</SelectItem>
                                    <SelectItem value="USER_">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</SelectItem>
                                    <SelectItem value="ADMIN_">Qu·∫£n l√Ω admin</SelectItem>
                                    <SelectItem value="CONTENT_">Qu·∫£n l√Ω n·ªôi dung</SelectItem>
                                    <SelectItem value="TRANSACTION">Qu·∫£n l√Ω giao d·ªãch</SelectItem>
                                    <SelectItem value="LOGIN">ƒêƒÉng nh·∫≠p</SelectItem>
                                    <SelectItem value="DASHBOARD_VIEW">Xem dashboard</SelectItem>
                                    <SelectItem value="EXPORT_DATA">Xu·∫•t d·ªØ li·ªáu</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>

                        <Button type="submit" className="mt-0">
                            <Search className="h-4 w-4 mr-2" />
                            T√¨m ki·∫øm
                        </Button>
                    </form>
                </CardHeader>
                <CardContent>
                    <div className="rounded-md border">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Th·ªùi gian</TableHead>
                                    {currentUser?.role === 'superadmin' && <TableHead>Admin</TableHead>}
                                    <TableHead>H√†nh ƒë·ªông</TableHead>
                                    <TableHead>ƒê·ªëi t∆∞·ª£ng</TableHead>
                                    <TableHead>K·∫øt qu·∫£</TableHead>
                                    <TableHead>Chi ti·∫øt</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {loading ? (
                                    // Loading skeleton
                                    [...Array(5)].map((_, index) => (
                                        <TableRow key={index}>
                                            {[...Array(currentUser?.role === 'superadmin' ? 6 : 5)].map((_, cellIndex) => (
                                                <TableCell key={cellIndex}>
                                                    <div className="h-4 bg-muted animate-pulse rounded"></div>
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))
                                ) : activityLogs.length === 0 ? (
                                    <TableRow>
                                        <TableCell colSpan={currentUser?.role === 'superadmin' ? 6 : 5} className="text-center py-8">
                                            Kh√¥ng t√¨m th·∫•y b·∫£n ghi ho·∫°t ƒë·ªông n√†o
                                        </TableCell>
                                    </TableRow>
                                ) : (
                                    activityLogs.map((log) => (
                                        <TableRow key={log._id}>
                                            <TableCell className="font-medium whitespace-nowrap">
                                                <div className="flex items-center">
                                                    <Calendar className="mr-2 h-4 w-4 text-gray-500" />
                                                    <div>
                                                        <div>{formatDate(log.timestamp)}</div>
                                                        {log.ipAddress && (
                                                            <div className="text-xs text-gray-500">
                                                                IP: {log.ipAddress}
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            </TableCell>
                                            {currentUser?.role === 'superadmin' && (
                                                <TableCell>
                                                    <div className="flex items-center">
                                                        <User className="mr-2 h-4 w-4 text-gray-500" />
                                                        {log.admin ? (
                                                            <span>
                                                                {log.admin.firstName} {log.admin.lastName}
                                                            </span>
                                                        ) : (
                                                            <span>
                                                                {getAdminName(log.adminId)}
                                                            </span>
                                                        )}
                                                    </div>
                                                </TableCell>
                                            )}
                                            <TableCell>
                                                <Badge
                                                    variant="outline"
                                                    className={getActionBadgeColor(log.actionType)}
                                                >
                                                    <Activity className="mr-1 h-3 w-3" />
                                                    {getActionLabel(log.actionType)}
                                                </Badge>
                                            </TableCell>
                                            <TableCell>
                                                {log.targetType ? (
                                                    <div className="flex items-center">
                                                        <User className="mr-2 h-4 w-4 text-gray-500" />
                                                        <span className="capitalize">
                                                            {log.targetType === 'User' ? 'Ng∆∞·ªùi d√πng' :
                                                                log.targetType === 'Admin' ? 'Qu·∫£n tr·ªã vi√™n' :
                                                                    log.targetType === 'SiteContent' ? 'N·ªôi dung site' :
                                                                        log.targetType === 'System' ? 'H·ªá th·ªëng' :
                                                                            log.targetType}
                                                        </span>
                                                        {log.targetId && (
                                                            <span className="ml-1 text-xs text-gray-500">
                                                                ({log.targetId.slice(-6)})
                                                            </span>
                                                        )}
                                                    </div>
                                                ) : (
                                                    <span className="text-gray-500">-</span>
                                                )}
                                            </TableCell>
                                            <TableCell>
                                                <Badge
                                                    variant="outline"
                                                    className={
                                                        log.result === 'SUCCESS' ? 'bg-green-100 text-green-800 border-green-300' :
                                                            log.result === 'FAILED' ? 'bg-red-100 text-red-800 border-red-300' :
                                                                'bg-yellow-100 text-yellow-800 border-yellow-300'
                                                    }
                                                >
                                                    {log.result === 'SUCCESS' ? '‚úì Th√†nh c√¥ng' :
                                                        log.result === 'FAILED' ? '‚úó Th·∫•t b·∫°i' : '‚ö† M·ªôt ph·∫ßn'}
                                                </Badge>
                                            </TableCell>
                                            <TableCell>
                                                <TooltipProvider>
                                                    <Tooltip>
                                                        <TooltipTrigger asChild>
                                                            <Button
                                                                variant="ghost"
                                                                size="sm"
                                                                className="h-8 w-8 p-0 hover:bg-blue-100 hover:text-blue-600"
                                                                onClick={() => handleOpenDialog(log)}
                                                                aria-label={`Xem chi ti·∫øt ho·∫°t ƒë·ªông ${getActionLabel(log.actionType)}`}
                                                            >
                                                                <Info className="h-4 w-4" />
                                                            </Button>
                                                        </TooltipTrigger>
                                                        <TooltipContent>
                                                            <p>Xem chi ti·∫øt ho·∫°t ƒë·ªông</p>
                                                        </TooltipContent>
                                                    </Tooltip>
                                                </TooltipProvider>
                                            </TableCell>
                                        </TableRow>
                                    ))
                                )}
                            </TableBody>
                        </Table>
                    </div>

                    {/* Pagination */}
                    {activityLogs.length > 0 && (
                        <div className="flex items-center justify-end space-x-2 py-4">
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                                disabled={currentPage <= 1 || loading}
                            >
                                <ChevronLeft className="h-4 w-4" />
                                <span className="sr-only">Trang tr∆∞·ªõc</span>
                            </Button>
                            <div>
                                Trang {currentPage} / {totalPages}
                            </div>
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                                disabled={currentPage >= totalPages || loading}
                            >
                                <ChevronRight className="h-4 w-4" />
                                <span className="sr-only">Trang sau</span>
                            </Button>
                        </div>
                    )}
                </CardContent>
            </Card>

            {/* Dialog for displaying activity log details */}
            {isDialogOpen && selectedLog && (
                <Dialog open={isDialogOpen} onOpenChange={handleCloseDialog}>
                    <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
                        <DialogHeader>
                            <DialogTitle className="flex items-center gap-2">
                                <Activity className="h-5 w-5 text-blue-600" />
                                Chi ti·∫øt ho·∫°t ƒë·ªông
                            </DialogTitle>
                            <DialogDescription>
                                Th√¥ng tin chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi qu·∫£n tr·ªã vi√™n
                            </DialogDescription>
                        </DialogHeader>

                        <div className="space-y-6">
                            {/* Basic Information */}
                            <div className="space-y-4">
                                <h3 className="text-lg font-semibold border-b pb-2">Th√¥ng tin c∆° b·∫£n</h3>

                                <div className="grid grid-cols-1 gap-4">
                                    <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                                        <Activity className="h-5 w-5 text-blue-600" />
                                        <div>
                                            <p className="font-medium text-gray-900">H√†nh ƒë·ªông</p>
                                            <p className="text-sm text-gray-600">{getActionLabel(selectedLog.actionType)}</p>
                                        </div>
                                    </div>

                                    <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                                        <Clock className="h-5 w-5 text-purple-600" />
                                        <div>
                                            <p className="font-medium text-gray-900">Th·ªùi gian th·ª±c hi·ªán</p>
                                            <p className="text-sm text-gray-600">{formatDate(selectedLog.timestamp)}</p>
                                        </div>
                                    </div>

                                    <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                                        {selectedLog.result === 'SUCCESS' ? (
                                            <CheckCircle className="h-5 w-5 text-green-600" />
                                        ) : selectedLog.result === 'FAILED' ? (
                                            <XCircle className="h-5 w-5 text-red-600" />
                                        ) : (
                                            <AlertCircle className="h-5 w-5 text-yellow-600" />
                                        )}
                                        <div>
                                            <p className="font-medium text-gray-900">K·∫øt qu·∫£</p>
                                            <Badge
                                                variant="outline"
                                                className={
                                                    selectedLog.result === 'SUCCESS' ? 'bg-green-100 text-green-800 border-green-300' :
                                                        selectedLog.result === 'FAILED' ? 'bg-red-100 text-red-800 border-red-300' :
                                                            'bg-yellow-100 text-yellow-800 border-yellow-300'
                                                }
                                            >
                                                {selectedLog.result === 'SUCCESS' ? '‚úì Th√†nh c√¥ng' :
                                                    selectedLog.result === 'FAILED' ? '‚úó Th·∫•t b·∫°i' : '‚ö† M·ªôt ph·∫ßn'}
                                            </Badge>
                                        </div>
                                    </div>

                                    {selectedLog.admin && (
                                        <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                                            <User className="h-5 w-5 text-indigo-600" />
                                            <div>
                                                <p className="font-medium text-gray-900">Qu·∫£n tr·ªã vi√™n</p>
                                                <p className="text-sm text-gray-600">
                                                    {selectedLog.admin.firstName} {selectedLog.admin.lastName}
                                                </p>
                                                <p className="text-xs text-gray-500">{selectedLog.admin.email}</p>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Target Information */}
                            {selectedLog.targetType && (
                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold border-b pb-2">ƒê·ªëi t∆∞·ª£ng t√°c ƒë·ªông</h3>
                                    <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                                        <Target className="h-5 w-5 text-blue-600" />
                                        <div>
                                            <p className="font-medium text-gray-900">Lo·∫°i ƒë·ªëi t∆∞·ª£ng</p>
                                            <p className="text-sm text-gray-600">
                                                {selectedLog.targetType === 'User' ? 'Ng∆∞·ªùi d√πng' :
                                                    selectedLog.targetType === 'Admin' ? 'Qu·∫£n tr·ªã vi√™n' :
                                                        selectedLog.targetType === 'SiteContent' ? 'N·ªôi dung site' :
                                                            selectedLog.targetType === 'System' ? 'H·ªá th·ªëng' :
                                                                selectedLog.targetType}
                                            </p>
                                            {selectedLog.targetId && (
                                                <p className="text-xs text-gray-500 mt-1">
                                                    ID: {selectedLog.targetId}
                                                </p>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            )}

                            {/* Technical Information */}
                            <div className="space-y-4">
                                <h3 className="text-lg font-semibold border-b pb-2">Th√¥ng tin k·ªπ thu·∫≠t</h3>

                                {selectedLog.ipAddress && (
                                    <div className="flex items-center gap-3 p-3 bg-orange-50 rounded-lg">
                                        <Globe className="h-5 w-5 text-orange-600" />
                                        <div>
                                            <p className="font-medium text-gray-900">ƒê·ªãa ch·ªâ IP</p>
                                            <p className="text-sm text-gray-600 font-mono">{selectedLog.ipAddress}</p>
                                        </div>
                                    </div>
                                )}

                                {selectedLog.userAgent && (
                                    <div className="flex items-start gap-3 p-3 bg-gray-50 rounded-lg">
                                        <Monitor className="h-5 w-5 text-gray-600 mt-1" />
                                        <div>
                                            <p className="font-medium text-gray-900">User Agent</p>
                                            <p className="text-xs text-gray-600 break-all">{selectedLog.userAgent}</p>
                                        </div>
                                    </div>
                                )}
                            </div>

                            {/* Input Data */}
                            {selectedLog.inputData && Object.keys(selectedLog.inputData).length > 0 && (
                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold border-b pb-2">D·ªØ li·ªáu ƒë·∫ßu v√†o</h3>
                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <pre className="text-xs text-gray-700 overflow-x-auto whitespace-pre-wrap">
                                            {JSON.stringify(selectedLog.inputData, null, 2)}
                                        </pre>
                                    </div>
                                </div>
                            )}

                            {/* Result Details */}
                            {selectedLog.resultDetails && (
                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold border-b pb-2">Chi ti·∫øt k·∫øt qu·∫£</h3>
                                    <div className="bg-blue-50 rounded-lg p-4">
                                        <p className="text-sm text-gray-700">{selectedLog.resultDetails}</p>
                                    </div>
                                </div>
                            )}

                            {/* Metadata */}
                            {selectedLog.metadata && Object.keys(selectedLog.metadata).length > 0 && (
                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold border-b pb-2">Metadata</h3>
                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <pre className="text-xs text-gray-700 overflow-x-auto whitespace-pre-wrap">
                                            {JSON.stringify(selectedLog.metadata, null, 2)}
                                        </pre>
                                    </div>
                                </div>
                            )}
                        </div>

                        <DialogFooter className="mt-6">
                            <Button variant="outline" onClick={handleCloseDialog}>
                                ƒê√≥ng
                            </Button>
                            <Button variant="outline" onClick={handleCopyLogInfo}>
                                <Copy className="h-4 w-4 mr-2" />
                                Copy th√¥ng tin
                            </Button>
                        </DialogFooter>
                    </DialogContent>
                </Dialog>
            )}
        </div>
    );
}
