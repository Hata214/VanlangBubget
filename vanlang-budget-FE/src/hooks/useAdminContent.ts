'use client'

import { useState, useEffect } from 'react'
import siteContentService from '@/services/siteContentService'

/**
 * Hook ƒë·ªÉ load admin content v·ªõi fallback
 * @param contentType - Lo·∫°i content (about, features, roadmap, pricing, contact)
 * @param language - Ng√¥n ng·ªØ (vi, en)
 */
export function useAdminContent<T = any>(contentType: string, language: string = 'vi') {
    const [content, setContent] = useState<T | null>(null)
    const [isLoading, setIsLoading] = useState(true)
    const [error, setError] = useState<Error | null>(null)

    useEffect(() => {
        const loadContent = async () => {
            try {
                console.log(`üîç Loading ${contentType} content from admin...`)

                // C√°c sections thu·ªôc homepage - ch·ªâ admin interface s·ª≠ d·ª•ng
                const HOMEPAGE_SECTIONS = ['homepage', 'testimonials', 'statistics']

                let actualContentType = contentType
                let extractSection = null

                // N·∫øu l√† section c·ªßa homepage, load t·ª´ homepage v√† extract section
                if (HOMEPAGE_SECTIONS.includes(contentType) && contentType !== 'homepage') {
                    actualContentType = 'homepage'
                    extractSection = contentType
                    console.log(`üîç ${contentType} is homepage section, loading from homepage and extracting ${extractSection}`)
                }

                // Features, Roadmap, v√† Pricing ƒë∆∞·ª£c x·ª≠ l√Ω nh∆∞ content type ri√™ng bi·ªát cho trang c√¥ng khai
                if (contentType === 'features' || contentType === 'roadmap' || contentType === 'pricing') {
                    console.log(`üîç Loading ${contentType} as separate content type`)
                }

                // G·ªçi service kh√¥ng c·∫ßn language, backend tr·∫£ v·ªÅ to√†n b·ªô document
                const response = await siteContentService.getContentByType(actualContentType);
                console.log(`üîç ${actualContentType} (for ${contentType}) full content response:`, response);

                if (response && response.data && response.data.content) {
                    const fullMultiLangContent = response.data.content; // ƒê√¢y l√† object { vi: {...}, en: {...} }
                    let contentForCurrentLanguage = fullMultiLangContent[language];

                    if (extractSection && contentForCurrentLanguage) {
                        // N·∫øu l√† section c·ªßa homepage, l·∫•y ph·∫ßn section t·ª´ ng√¥n ng·ªØ hi·ªán t·∫°i
                        contentForCurrentLanguage = contentForCurrentLanguage[extractSection];
                        console.log(`üîç Extracted section '${extractSection}' for language '${language}':`, contentForCurrentLanguage);
                    } else if (extractSection && !contentForCurrentLanguage) {
                        // Tr∆∞·ªùng h·ª£p homepage c√≥ section nh∆∞ng ng√¥n ng·ªØ ƒë√≥ ch∆∞a c√≥ content
                        console.warn(`üîç No content for language '${language}' in homepage to extract section '${extractSection}'.`);
                        contentForCurrentLanguage = null;
                    } else if (!extractSection && !contentForCurrentLanguage && Object.keys(fullMultiLangContent).length > 0) {
                        // N·∫øu kh√¥ng ph·∫£i section homepage, v√† ng√¥n ng·ªØ hi·ªán t·∫°i kh√¥ng c√≥ content,
                        // nh∆∞ng c√≥ content ·ªü ng√¥n ng·ªØ kh√°c, c√≥ th·ªÉ fallback ho·∫∑c ƒë·ªÉ null.
                        // Hi·ªán t·∫°i ƒë·ªÉ null ƒë·ªÉ component t·ª± fallback qua i18n.
                        console.warn(`üîç No content for language '${language}' for type '${actualContentType}'.`);
                        contentForCurrentLanguage = null;
                    } else if (!contentForCurrentLanguage && Object.keys(fullMultiLangContent).length === 0) {
                        // Kh√¥ng c√≥ content cho b·∫•t k·ª≥ ng√¥n ng·ªØ n√†o
                        console.warn(`üîç No content found for any language for type '${actualContentType}'.`);
                        contentForCurrentLanguage = null;
                    }


                    console.log(`üîç Setting content for ${contentType} (lang: ${language}):`, contentForCurrentLanguage);
                    setContent(contentForCurrentLanguage || null);

                } else if (response && response.data && (contentType === 'header' || contentType === 'footer')) {
                    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c≈© c·ªßa header/footer n∆°i content c√≥ th·ªÉ n·∫±m tr·ª±c ti·∫øp trong response.data
                    const fullMultiLangContent = response.data;
                    let contentForCurrentLanguage = fullMultiLangContent[language];
                    console.warn(`üîç Using direct data for ${contentType} (lang: ${language}):`, contentForCurrentLanguage);
                    setContent(contentForCurrentLanguage || null);
                }
                else {
                    console.log(`üîç No data.content in response for ${contentType}, using fallback`);
                    setContent(null); // Fallback to translation
                }
            } catch (err) {
                console.error(`Error loading ${contentType} content:`, err)
                setError(err as Error)
                // Fallback to translation if admin content fails
            } finally {
                setIsLoading(false)
            }
        }

        loadContent()
    }, [contentType, language])

    return { content, isLoading, error }
}

export default useAdminContent
