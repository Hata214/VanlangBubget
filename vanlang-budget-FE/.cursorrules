# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. When you receive a new task, first review the Scratchpad content, clear old tasks if necessary, explain the new task, and plan your steps. Use todo markers like:
[X] Task 1
[ ] Task 2

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
For visual testing and verification, use:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

## LLM
For code assistance and reviews:
```bash
venv/bin/python ./tools/llm_api.py --prompt "Your question" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)

# Lessons

## Project Structure
- **VLB-010:** Dự án sử dụng kiến trúc Next.js App Router (Next.js 14)
- **VLB-011:** Folder `/app` chứa tất cả routes và layouts của ứng dụng
- **VLB-012:** Folder `/components` chứa các components tái sử dụng, được tổ chức theo tính năng
- **VLB-013:** Folder `/redux` quản lý state với Redux Toolkit, tổ chức theo slices
- **VLB-014:** Folder `/services` chứa các API calls và xử lý dữ liệu
- **VLB-015:** Folder `/hooks` chứa custom React hooks
- **VLB-016:** Folder `/utils` chứa các hàm tiện ích
- **VLB-017:** Folder `/types` chứa TypeScript interfaces và types
- **VLB-018:** Folder `/contexts` chứa React context providers

## Code Conventions
- **VLB-019:** Luôn sử dụng TypeScript với đầy đủ type definitions
- **VLB-020:** Ưu tiên functional components và React hooks thay vì class components
- **VLB-021:** Sử dụng Redux Toolkit cho global state management
- **VLB-022:** Sử dụng createAsyncThunk cho các thao tác bất đồng bộ trong Redux
- **VLB-023:** Sử dụng React Context cho theme, localization hoặc các state đơn giản
- **VLB-024:** Sử dụng useState và useReducer cho component state

## UI & Styling
- **VLB-002:** Tailwind CSS được sử dụng cho styling, ưu tiên utility-first approach
- **VLB-025:** Đảm bảo responsive design cho tất cả thiết bị (mobile, tablet, desktop)
- **VLB-026:** Sử dụng Radix UI và shadcn/ui components
- **VLB-027:** Hỗ trợ cả light và dark mode với next-themes

## API & Data Fetching
- **VLB-004:** Axios được sử dụng cho tất cả API calls
- **VLB-028:** Cấu hình interceptors cho authentication và error handling
- **VLB-009:** Implement proper loading states và error handling cho tất cả API calls
- **VLB-029:** Tận dụng caching của Next.js khi phù hợp

## Authentication
- **VLB-030:** Sử dụng NextAuth.js cho authentication flow
- **VLB-031:** Lưu trữ JWT tokens an toàn
- **VLB-032:** Đảm bảo các routes được bảo vệ đúng cách

## Performance
- **VLB-033:** Sử dụng code splitting với dynamic import của Next.js
- **VLB-034:** Sử dụng Next.js Image component cho image optimization
- **VLB-035:** Giám sát và tối ưu kích thước bundle
- **VLB-036:** Áp dụng lazy loading cho components và routes không cần thiết ngay lập tức

## I18n & Localization
- **VLB-037:** Sử dụng next-intl cho đa ngôn ngữ (Tiếng Việt và Tiếng Anh)
- **VLB-038:** Tổ chức message files theo ngôn ngữ và module

## Best Practices
- **VLB-043:** Tuân thủ ESLint và Prettier
- **VLB-044:** Sử dụng feature branches và PR reviews
- **VLB-045:** Tuân thủ conventional commits
- **VLB-046:** Comment code phức tạp và cập nhật README
- **VLB-047:** Đảm bảo accessibility tuân thủ WCAG

## Features
- **VLB-001:** Dự án VangLangBudget (VLB) là ứng dụng quản lý tài chính cá nhân
- **VLB-003:** Redux được sử dụng cho state management
- **VLB-005:** Đảm bảo trải nghiệm người dùng tốt với input validation và feedback rõ ràng
- **VLB-006:** Tính năng quản lý khoản vay bao gồm tính lãi, lịch thanh toán và theo dõi trạng thái
- **VLB-007:** Sử dụng Chart.js cho data visualization
- **VLB-008:** Đảm bảo proper TypeScript typing cho tất cả components và Redux state
- **VLB-048:** Thu nhập & Chi tiêu sử dụng form validation với react-hook-form và zod
- **VLB-049:** Tính năng đầu tư chứng khoán hiển thị dữ liệu thời gian thực và biểu đồ
- **VLB-050:** Tính năng đầu tư vàng theo dõi giá vàng và tính toán lợi nhuận
- **VLB-051:** Tính năng đầu tư tiền điện tử hiển thị tỷ giá và biến động thị trường
- **VLB-052:** Quản trị viên xem danh sách và chi tiết người dùng
- **VLB-053:** Quản trị viên xem và xử lý các giao dịch

## Mobile & Responsive
- **VLB-054:** Thiết kế UI ưu tiên mobile-first
- **VLB-055:** Sử dụng breakpoints chuẩn của Tailwind CSS
- **VLB-056:** Tối ưu cho tương tác trên màn hình cảm ứng

## Performance Metrics
- **VLB-057:** Duy trì Lighthouse Score tối thiểu 90+
- **VLB-058:** First Contentful Paint dưới 1.8s
- **VLB-059:** Time to Interactive dưới 3.5s
- **VLB-060:** Main bundle dưới 200KB (gzipped)

## Deployment
- **VLB-061:** Triển khai ứng dụng với Vercel
- **VLB-062:** Kiểm tra mọi PR với preview deployment
- **VLB-063:** Tích hợp Vercel Analytics để theo dõi hiệu suất

## Security
- **VLB-064:** Xác thực mọi input của người dùng
- **VLB-065:** Ngăn chặn Cross-Site Scripting (XSS)
- **VLB-066:** Bảo vệ khỏi Cross-Site Request Forgery (CSRF)
- **VLB-067:** Tuân thủ best practices về xác thực và bảo mật

## Contribution Guidelines
- **VLB-068:** Chạy `npm run lint` trước khi commit
- **VLB-070:** Tuân thủ PR template khi tạo PR
- **VLB-071:** Mỗi PR cần có ít nhất một approval

## Cursor learned
- **CUR-001:** Cursor IDE hỗ trợ Next.js, JavaScript, HTML, CSS, và Tailwind CSS syntax highlighting, autocompletion, và code formatting
- **CUR-002:** Sử dụng khả năng code generation và refactoring của Cursor để tăng tốc phát triển
- **CUR-003:** Sử dụng công cụ debugging của Cursor để phát hiện và sửa lỗi trong Next.js và Redux
- **CUR-005:** Sử dụng code search của Cursor để tìm kiếm nhanh chóng trong dự án
- **CUR-006:** Tích hợp ESLint với Cursor để kiểm tra lỗi code ngay trong quá trình viết code
- **CUR-007:** Sử dụng tính năng code completion của Cursor để viết mã nhanh hơn
- **CUR-008:** Tận dụng đề xuất code của Cursor cho việc refactoring và tối ưu hóa
- **CUR-009:** Sử dụng multiple cursors để chỉnh sửa nhiều dòng cùng lúc
