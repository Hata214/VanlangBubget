import cron from 'node-cron';
import mongoose from 'mongoose';
import Loan from './models/loanModel.js';
import Budget from './models/budgetModel.js';
import Notification from './models/Notification.js';
import Investment from './models/investmentModel.js';
import logger from './utils/logger.js';
import User from './models/userModel.js';
import Income from './models/incomeModel.js';
import Expense from './models/expenseModel.js';
import { emit } from './socket.js';

// Import service cho c·∫≠p nh·∫≠t gi√° crypto
// import cryptoService from './services/cryptoService.js'; // <<< Commented out
import { computeLoanStatuses } from './services/loanService.js';
import { createDailyLoginTracking } from './services/userActivityService.js';
import { notifyDueBudgets } from './services/budgetService.js';
// import { fetchCryptoPrices, saveCryptoPrices, updateCryptoInvestments } from './services/cryptoService.js'; // <<< Commented out
// import { saveCryptoPrice, updateLatestPrice, getLatestPriceAndCalculate } from './services/cryptoService.js'; // <<< Commented out
import { findByID } from './services/notificationService.js';
import { getUserDetailsByID } from './services/userService.js';

/**
 * Kh·ªüi t·∫°o t·∫•t c·∫£ c√°c cron jobs trong h·ªá th·ªëng
 */
export const initCronJobs = () => {
    if (process.env.RUN_CRON_JOBS !== 'true') {
        console.log('‚è∏Ô∏è Cron jobs b·ªã v√¥ hi·ªáu h√≥a trong c·∫•u h√¨nh');
        return;
    }

    try {
        console.log('üöÄ ƒêang kh·ªüi t·∫°o cron jobs...');

        // Ki·ªÉm tra kho·∫£n vay qu√° h·∫°n h√†ng ng√†y l√∫c 8:00 s√°ng
        cron.schedule('0 8 * * *', checkOverdueLoans, {
            scheduled: true,
            timezone: 'Asia/Ho_Chi_Minh'
        });
        logger.info('Scheduled job: Check overdue loans at 8:00 AM daily');

        // Ki·ªÉm tra ng√¢n s√°ch v∆∞·ª£t qu√° h·∫°n m·ª©c h√†ng ng√†y l√∫c 8:30 s√°ng
        cron.schedule('30 8 * * *', checkBudgetLimits, {
            scheduled: true,
            timezone: 'Asia/Ho_Chi_Minh'
        });
        logger.info('Scheduled job: Check budget limits at 8:30 AM daily');

        // X√≥a th√¥ng b√°o c≈© sau 30 ng√†y, ch·∫°y h√†ng tu·∫ßn v√†o Ch·ªß Nh·∫≠t l√∫c 1:00 s√°ng
        cron.schedule('0 1 * * 0', cleanupOldNotifications, {
            scheduled: true,
            timezone: 'Asia/Ho_Chi_Minh'
        });
        logger.info('Scheduled job: Clean up old notifications at 1:00 AM every Sunday');

        // Ki·ªÉm tra s·ªë d∆∞ √¢m h√†ng ng√†y l√∫c 12:00 tr∆∞a
        cron.schedule('0 12 * * *', checkNegativeBalance, {
            scheduled: true,
            timezone: 'Asia/Ho_Chi_Minh'
        });
        logger.info('Scheduled job: Check negative balance at 12:00 PM daily');

        // C·∫≠p nh·∫≠t gi√° crypto m·ªói 4 gi·ªù - T·∫°m th·ªùi comment l·∫°i
        // cron.schedule('0 */4 * * *', updateCryptoPrices, {
        //     scheduled: true,
        //     timezone: 'Asia/Ho_Chi_Minh'
        // });
        // logger.info('Scheduled job: Update crypto prices every 4 hours');

        // Ki·ªÉm tra ƒë√°o h·∫°n kho·∫£n ti·∫øt ki·ªám m·ªói ng√†y l√∫c 9:00 s√°ng
        cron.schedule('0 9 * * *', checkSavingsMaturity, {
            scheduled: true,
            timezone: 'Asia/Ho_Chi_Minh'
        });
        logger.info('Scheduled job: Check savings maturity at 9:00 AM daily');

        // C·∫≠p nh·∫≠t gi√° ti·ªÅn ƒëi·ªán t·ª≠ m·ªói 15 ph√∫t - T·∫°m th·ªùi comment l·∫°i
        // cron.schedule('*/15 * * * *', updateCryptoPricesCron);
        // console.log('‚è∞ Cron job c·∫≠p nh·∫≠t gi√° ti·ªÅn ƒëi·ªán t·ª≠ ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o (m·ªói 15 ph√∫t)');

        // Theo d√µi ƒëƒÉng nh·∫≠p h√†ng ng√†y c·ªßa ng∆∞·ªùi d√πng l√∫c 11:59 PM
        cron.schedule('59 23 * * *', trackDailyUserLogin, {
            scheduled: true,
            timezone: 'Asia/Ho_Chi_Minh'
        });
        logger.info('Scheduled job: Track daily user login at 11:59 PM');

        console.log('‚úÖ T·∫•t c·∫£ cron jobs ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå L·ªói khi kh·ªüi t·∫°o cron jobs:', error);
    }
};

/**
 * Ki·ªÉm tra c√°c kho·∫£n vay qu√° h·∫°n v√† g·ª≠i th√¥ng b√°o
 */
const checkOverdueLoans = async () => {
    try {
        logger.info('Running cron job: Checking overdue loans');
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        // T√¨m c√°c kho·∫£n vay c√≥ dueDate tr∆∞·ªõc ng√†y h√¥m nay v√† ch∆∞a ƒë∆∞·ª£c tr·∫£ h·∫øt
        // Truy v·∫•n ban ƒë·∫ßu m√† kh√¥ng c·∫ßn populate
        const query = {
            dueDate: { $lt: today },
            status: { $ne: 'paid' },
            notifiedOverdue: { $ne: true } // Ch·ªâ th√¥ng b√°o nh·ªØng kho·∫£n ch∆∞a ƒë∆∞·ª£c th√¥ng b√°o
        };

        // T√¨m kho·∫£n vay s·ª≠ d·ª•ng userId
        const overdueLoansWithUserId = await Loan.find({
            ...query,
            userId: { $exists: true }
        }).populate('userId', 'name email settings');

        // T√¨m kho·∫£n vay s·ª≠ d·ª•ng user (cho nh·ªØng model c≈©)
        const overdueLoansWithUser = await Loan.find({
            ...query,
            user: { $exists: true },
            userId: { $exists: false }
        }).populate('user', 'name email settings');

        // K·∫øt h·ª£p c·∫£ hai k·∫øt qu·∫£
        const overdueLoans = [...overdueLoansWithUserId, ...overdueLoansWithUser];

        logger.info(`Found ${overdueLoans.length} overdue loans`);

        for (const loan of overdueLoans) {
            // T·∫°o th√¥ng b√°o s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c createLoanDueAlert
            await Notification.createLoanDueAlert(loan);

            // ƒê√°nh d·∫•u ƒë√£ th√¥ng b√°o ƒë·ªÉ tr√°nh g·ª≠i tr√πng l·∫∑p
            loan.notifiedOverdue = true;
            await loan.save();

            logger.info(`Sent overdue notification for loan: ${loan._id}`);
        }
    } catch (error) {
        logger.error('Error in overdue loans cron job:', error);
    }
};

/**
 * Ki·ªÉm tra c√°c ng√¢n s√°ch v∆∞·ª£t qu√° h·∫°n m·ª©c
 */
const checkBudgetLimits = async () => {
    try {
        logger.info('Running cron job: Checking budget limits');
        const now = new Date();
        const currentMonth = now.getMonth() + 1;
        const currentYear = now.getFullYear();

        // T√¨m c√°c ng√¢n s√°ch c·ªßa th√°ng hi·ªán t·∫°i
        const query = {
            month: currentMonth,
            year: currentYear,
            notifiedThreshold: { $lt: 100 } // Ch·ªâ l·∫•y nh·ªØng ng√¢n s√°ch ch∆∞a th√¥ng b√°o 100%
        };

        // T√¨m ng√¢n s√°ch s·ª≠ d·ª•ng userId
        const budgetsWithUserId = await Budget.find({
            ...query,
            userId: { $exists: true }
        }).populate('userId', 'name email settings');

        // T√¨m ng√¢n s√°ch s·ª≠ d·ª•ng user (cho nh·ªØng model c≈©)
        const budgetsWithUser = await Budget.find({
            ...query,
            user: { $exists: true },
            userId: { $exists: false }
        }).populate('user', 'name email settings');

        // K·∫øt h·ª£p c·∫£ hai k·∫øt qu·∫£
        const budgets = [...budgetsWithUserId, ...budgetsWithUser];

        logger.info(`Found ${budgets.length} active budgets`);

        for (const budget of budgets) {
            // G·ªçi ph∆∞∆°ng th·ª©c createBudgetAlert t·ª´ model Notification
            await Notification.createBudgetAlert(budget);

            logger.info(`Checked budget alert for budget: ${budget._id}`);
        }
    } catch (error) {
        logger.error('Error in budget limits cron job:', error);
    }
};

/**
 * X√≥a c√°c th√¥ng b√°o c≈© (tr√™n 30 ng√†y)
 */
const cleanupOldNotifications = async () => {
    try {
        logger.info('Running cron job: Cleaning up old notifications');

        // T√≠nh th·ªùi ƒëi·ªÉm 30 ng√†y tr∆∞·ªõc
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

        // X√≥a t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc v√† c≈© h∆°n 30 ng√†y
        const result = await Notification.deleteMany({
            createdAt: { $lt: thirtyDaysAgo },
            read: true
        });

        logger.info(`Deleted ${result.deletedCount} old notifications`);
    } catch (error) {
        logger.error('Error in cleanup notifications cron job:', error);
    }
};

/**
 * Ki·ªÉm tra s·ªë d∆∞ √¢m v√† g·ª≠i th√¥ng b√°o
 */
const checkNegativeBalance = async () => {
    try {
        logger.info('Running cron job: Checking negative balance');

        // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
        const users = await User.find({ active: true });

        for (const user of users) {
            try {
                // T√≠nh t·ªïng thu nh·∫≠p
                const incomeResult = await Income.aggregate([
                    {
                        $match: {
                            $or: [
                                { userId: user._id },
                                { user: user._id }
                            ]
                        }
                    },
                    { $group: { _id: null, total: { $sum: "$amount" } } }
                ]);
                const totalIncome = incomeResult.length > 0 ? incomeResult[0].total : 0;

                // T√≠nh t·ªïng chi ti√™u
                const expenseResult = await Expense.aggregate([
                    {
                        $match: {
                            $or: [
                                { userId: user._id },
                                { user: user._id }
                            ]
                        }
                    },
                    { $group: { _id: null, total: { $sum: "$amount" } } }
                ]);
                const totalExpense = expenseResult.length > 0 ? expenseResult[0].total : 0;

                // T√≠nh s·ªë d∆∞
                const balance = totalIncome - totalExpense;

                // N·∫øu s·ªë d∆∞ √¢m, t·∫°o th√¥ng b√°o
                if (balance < 0) {
                    logger.info(`User ${user._id} has negative balance: ${balance}`);
                    const notification = await Notification.createNegativeBalanceAlert(user._id, balance);

                    if (notification) {
                        logger.info(`Created negative balance notification for user ${user._id}`);

                        // G·ª≠i th√¥ng b√°o qua socket n·∫øu c√≥ socketManager
                        if (global.socketManager) {
                            global.socketManager.sendToUser(user._id.toString(), 'notification', {
                                message: 'C·∫£nh b√°o s·ªë d∆∞ √¢m',
                                notification
                            });
                        }
                    }
                }
            } catch (err) {
                logger.error(`Error processing user ${user._id}:`, err);
            }
        }

        logger.info('Completed checking negative balance');
    } catch (error) {
        logger.error('Error in negative balance cron job:', error);
    }
};

/**
 * C·∫≠p nh·∫≠t gi√° ti·ªÅn ƒëi·ªán t·ª≠ - T·∫°m th·ªùi comment l·∫°i
 */
// const updateCryptoPrices = async () => {
//     try {
//         logger.info('Running cron job: Updating crypto prices');

//         // T√¨m t·∫•t c·∫£ c√°c ƒë·∫ßu t∆∞ lo·∫°i crypto
//         const cryptoInvestments = await Investment.find({ type: 'crypto' });
//         logger.info(`Found ${cryptoInvestments.length} crypto investments to update`);

//         if (cryptoInvestments.length === 0) {
//             return;
//         }

//         // L·∫•y danh s√°ch coin IDs
//         const coinSymbols = [...new Set(cryptoInvestments.map(inv => inv.symbol.toLowerCase()))];

//         // Nh√≥m ƒë·∫ßu t∆∞ theo symbol
//         const investmentsBySymbol = {};
//         cryptoInvestments.forEach(inv => {
//             const symbol = inv.symbol.toLowerCase();
//             if (!investmentsBySymbol[symbol]) {
//                 investmentsBySymbol[symbol] = [];
//             }
//             investmentsBySymbol[symbol].push(inv);
//         });

//         // L·∫•y danh s√°ch top coins ƒë·ªÉ t√¨m ID t∆∞∆°ng ·ª©ng v·ªõi symbol
//         const topCoins = await cryptoService.getTopCryptos(100);
//         const coinSymbolToId = {};
//         topCoins.forEach(coin => {
//             coinSymbolToId[coin.symbol.toLowerCase()] = coin.id;
//         });

//         // L·∫•y ID c·ªßa c√°c coin c·∫ßn c·∫≠p nh·∫≠t
//         const coinIds = [];
//         for (const symbol of coinSymbols) {
//             if (coinSymbolToId[symbol]) {
//                 coinIds.push(coinSymbolToId[symbol]);
//             }
//         }

//         if (coinIds.length === 0) {
//             logger.info('No matching coins found in CoinGecko');
//             return;
//         }

//         // L·∫•y gi√° c·ªßa c√°c coin
//         const priceData = await cryptoService.getPrices(coinIds);

//         // C·∫≠p nh·∫≠t gi√° cho t·ª´ng ƒë·∫ßu t∆∞
//         for (const symbol of coinSymbols) {
//             const coinId = coinSymbolToId[symbol];
//             if (coinId && priceData[coinId] && investmentsBySymbol[symbol]) {
//                 const currentPrice = priceData[coinId].vnd || priceData[coinId].usd;

//                 // C·∫≠p nh·∫≠t t·∫•t c·∫£ ƒë·∫ßu t∆∞ c√≥ symbol n√†y
//                 for (const investment of investmentsBySymbol[symbol]) {
//                     investment.updateCurrentPrice(currentPrice);
//                     await investment.save();

//                     // Th√¥ng b√°o qua socket v·ªÅ s·ª± thay ƒë·ªïi
//                     emit(investment.userId.toString(), 'investment:updated', investment);

//                     // T·∫°o th√¥ng b√°o n·∫øu c√≥ bi·∫øn ƒë·ªông l·ªõn
//                     const priceChange = priceData[coinId].vnd_24h_change;
//                     if (Math.abs(priceChange) > 10) { // Bi·∫øn ƒë·ªông h∆°n 10%
//                         await Notification.create({
//                             userId: investment.userId,
//                             title: `Bi·∫øn ƒë·ªông gi√° ${investment.assetName}`,
//                             message: `Gi√° c·ªßa ${investment.assetName} ƒë√£ ${priceChange > 0 ? 'tƒÉng' : 'gi·∫£m'} ${Math.abs(priceChange).toFixed(2)}% trong 24 gi·ªù qua.`,
//                             type: 'investment',
//                             data: {
//                                 investmentId: investment._id,
//                                 priceChange: priceChange,
//                                 previousPrice: investment.currentPrice / (1 + priceChange / 100),
//                                 currentPrice: investment.currentPrice
//                             }
//                         });
//                     }
//                 }

//                 logger.info(`Updated price for ${symbol}: ${currentPrice} VND`);
//             }
//         }

//         logger.info('Crypto price update completed');
//     } catch (error) {
//         logger.error('Error in crypto price update cron job:', error);
//     }
// };

/**
 * Ki·ªÉm tra ƒë√°o h·∫°n c√°c kho·∫£n ti·∫øt ki·ªám
 */
const checkSavingsMaturity = async () => {
    try {
        logger.info('Running cron job: Checking savings maturity');
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        // T√¨m c√°c kho·∫£n ti·∫øt ki·ªám ƒë·∫øn h·∫°n
        const maturingSavings = await Investment.find({
            type: 'savings',
            status: 'active',
            endDate: { $lte: today },
            notifiedMaturity: { $ne: true }
        }).populate('userId', 'name email settings');

        logger.info(`Found ${maturingSavings.length} maturing savings`);

        for (const saving of maturingSavings) {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
            saving.status = 'matured';
            saving.notifiedMaturity = true;

            // T√≠nh to√°n l√£i su·∫•t khi ƒë√°o h·∫°n
            const principal = saving.initialInvestment;
            const interestRate = saving.interestRate / 100;
            const termInYears = saving.term / 12; // Gi·∫£ s·ª≠ term l√† s·ªë th√°ng

            let interest = 0;
            // T√≠nh l√£i k√©p n·∫øu k·ª≥ h·∫°n > 1 nƒÉm
            if (termInYears > 1) {
                interest = principal * Math.pow(1 + interestRate, termInYears) - principal;
            } else {
                // L√£i ƒë∆°n n·∫øu ‚â§ 1 nƒÉm
                interest = principal * interestRate * termInYears;
            }

            saving.currentValue = principal + interest;
            saving.profitLoss = interest;
            saving.roi = (interest / principal) * 100;

            await saving.save();

            // T·∫°o th√¥ng b√°o
            await Notification.create({
                userId: saving.userId._id,
                title: 'Ti·∫øt ki·ªám ƒë√°o h·∫°n',
                message: `Kho·∫£n ti·∫øt ki·ªám "${saving.assetName}" c·ªßa b·∫°n ƒë√£ ƒë√°o h·∫°n. L√£i su·∫•t: ${interest.toLocaleString('vi-VN')} VND`,
                type: 'investment',
                data: {
                    investmentId: saving._id,
                    interestEarned: interest,
                    totalAmount: saving.currentValue
                }
            });

            // Th√¥ng b√°o qua socket
            emit(saving.userId._id.toString(), 'investment:matured', saving);

            logger.info(`Processed matured saving: ${saving._id}`);
        }
    } catch (error) {
        logger.error('Error in savings maturity cron job:', error);
    }
};

// Cron ƒë·ªÉ c·∫≠p nh·∫≠t gi√° ti·ªÅn ƒëi·ªán t·ª≠ m·ªói 15 ph√∫t - T·∫°m th·ªùi comment l·∫°i
// const updateCryptoPricesCron = async () => {
//     try {
//         logger.info('ü™ô Running cron job: Updating crypto prices');

//         // T√¨m t·∫•t c·∫£ c√°c ƒë·∫ßu t∆∞ lo·∫°i crypto
//         const cryptoInvestments = await Investment.find({ type: 'crypto' });
//         logger.info(`Found ${cryptoInvestments.length} crypto investments to update`);

//         if (cryptoInvestments.length === 0) {
//             logger.info('No crypto investments to update.');
//             return;
//         }

//         // L·∫•y danh s√°ch coin IDs
//         const coinSymbols = [...new Set(cryptoInvestments.map(inv => inv.symbol.toLowerCase()))];

//         // Nh√≥m ƒë·∫ßu t∆∞ theo symbol
//         const investmentsBySymbol = {};
//         cryptoInvestments.forEach(inv => {
//             const symbol = inv.symbol.toLowerCase();
//             if (!investmentsBySymbol[symbol]) {
//                 investmentsBySymbol[symbol] = [];
//             }
//             investmentsBySymbol[symbol].push(inv);
//         });

//         // L·∫•y danh s√°ch top coins ƒë·ªÉ t√¨m ID t∆∞∆°ng ·ª©ng v·ªõi symbol
//         const topCoins = await cryptoService.getTopCryptos(100); // L·∫•y top 100 coins
//         const coinSymbolToId = {};
//         topCoins.forEach(coin => {
//             coinSymbolToId[coin.symbol.toLowerCase()] = coin.id;
//         });

//         // L·∫•y ID c·ªßa c√°c coin c·∫ßn c·∫≠p nh·∫≠t
//         const coinIds = coinSymbols.map(symbol => coinSymbolToId[symbol]).filter(id => !!id);

//         if (coinIds.length === 0) {
//             logger.info('No matching coins found in CoinGecko for existing investments');
//             return;
//         }

//         // L·∫•y gi√° c·ªßa c√°c coin
//         const priceData = await cryptoService.getPrices(coinIds);

//         let updatedCount = 0;
//         // C·∫≠p nh·∫≠t gi√° cho t·ª´ng ƒë·∫ßu t∆∞
//         for (const symbol of coinSymbols) {
//             const coinId = coinSymbolToId[symbol];
//             if (coinId && priceData[coinId] && investmentsBySymbol[symbol]) {
//                 const currentPrice = priceData[coinId].vnd || priceData[coinId].usd;

//                 // C·∫≠p nh·∫≠t t·∫•t c·∫£ ƒë·∫ßu t∆∞ c√≥ symbol n√†y
//                 for (const investment of investmentsBySymbol[symbol]) {
//                     const oldPrice = investment.currentPrice;
//                     investment.updateCurrentPrice(currentPrice);
//                     await investment.save();
//                     updatedCount++;

//                     // Th√¥ng b√°o qua socket v·ªÅ s·ª± thay ƒë·ªïi
//                     emit(investment.userId.toString(), 'investment:updated', investment);

//                     // T·∫°o th√¥ng b√°o n·∫øu c√≥ bi·∫øn ƒë·ªông l·ªõn (v√≠ d·ª•: > 10% trong 24h)
//                     const priceChangePercent = priceData[coinId].vnd_24h_change || priceData[coinId].usd_24h_change;
//                     if (priceChangePercent && Math.abs(priceChangePercent) > 10) {
//                          const previousPrice = oldPrice; // S·ª≠ d·ª•ng gi√° c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
//                         await Notification.create({
//                             userId: investment.userId,
//                             title: `Bi·∫øn ƒë·ªông gi√° ${investment.assetName}`,
//                             message: `Gi√° c·ªßa ${investment.assetName} ƒë√£ ${priceChangePercent > 0 ? 'tƒÉng' : 'gi·∫£m'} ${Math.abs(priceChangePercent).toFixed(2)}% trong 24 gi·ªù qua. Gi√° hi·ªán t·∫°i: ${currentPrice.toLocaleString('vi-VN')} VND`,
//                             type: 'investment',
//                             data: {
//                                 investmentId: investment._id,
//                                 priceChangePercent: priceChangePercent,
//                                 previousPrice: previousPrice,
//                                 currentPrice: currentPrice
//                             }
//                         });
//                         // G·ª≠i th√¥ng b√°o socket ri√™ng cho bi·∫øn ƒë·ªông gi√°
//                         emit(investment.userId.toString(), 'investment:price_alert', {
//                             investmentId: investment._id,
//                             assetName: investment.assetName,
//                             priceChangePercent: priceChangePercent,
//                             currentPrice: currentPrice
//                         });
//                     }
//                 }
//                 logger.info(`Updated price for ${symbol}: ${currentPrice} VND`);
//             }
//         }

//         logger.info(`‚úÖ Crypto price update completed. Updated ${updatedCount} investments.`);
//     } catch (error) {
//         logger.error('‚ùå Error in crypto price update cron job:', error);
//     }
// };

/**
 * Theo d√µi ƒëƒÉng nh·∫≠p h√†ng ng√†y c·ªßa ng∆∞·ªùi d√πng
 */
const trackDailyUserLogin = async () => {
    try {
        logger.info('Running cron job: Tracking daily user logins');

        // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ƒëƒÉng nh·∫≠p h√†ng ng√†y
        const result = await createDailyLoginTracking();

        logger.info(`Daily login tracking completed: ${result.processed} users processed, ${result.updated} users updated`);
    } catch (error) {
        logger.error('Error in daily login tracking cron job:', error);
    }
}; 