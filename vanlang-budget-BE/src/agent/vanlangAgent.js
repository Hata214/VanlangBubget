import axios from 'axios';
import Transaction from '../models/transactionModel.js';
import Expense from '../models/expenseModel.js';
import Income from '../models/incomeModel.js';
import Budget from '../models/budgetModel.js';
import Loan from '../models/loanModel.js';
import Investment from '../models/investmentModel.js';
import logger from '../utils/logger.js';
import NLPService from '../services/nlpService.js'; // Import NLPService m·ªõi
import Notification from '../models/Notification.js';
import socketManager from '../utils/socketManager.js';
import CalculationCoordinator from './calculationCoordinator.js';
import EnhancedStatisticsEngine from './enhancedStatisticsEngine.js';
import EnhancedConversationHandler from './enhancedConversationHandler.js';
import EnhancedGeminiService from '../services/enhancedGeminiService.js';
import StockService from '../services/stockService.js';

class VanLangAgent {
    constructor(geminiApiKey) {
        this.geminiApiKey = geminiApiKey;
        this.modelName = process.env.GEMINI_MODEL_NAME || 'gemini-2.0-flash';
        this.baseUrl = `https://generativelanguage.googleapis.com/v1beta/models/${this.modelName}:generateContent`;
        // L∆∞u tr·ªØ context cu·ªôc h·ªôi tho·∫°i ƒë·ªÉ x·ª≠ l√Ω c√°c y√™u c·∫ßu chi ti·∫øt
        this.conversationContext = new Map();
        this.nlpService = new NLPService(); // Kh·ªüi t·∫°o NLPService
        this.calculationCoordinator = new CalculationCoordinator(); // Kh·ªüi t·∫°o Calculation Coordinator
        this.statisticsEngine = new EnhancedStatisticsEngine(); // Kh·ªüi t·∫°o Enhanced Statistics Engine
        this.conversationHandler = new EnhancedConversationHandler(this); // Kh·ªüi t·∫°o Enhanced Conversation Handler
        this.enhancedGemini = new EnhancedGeminiService(geminiApiKey); // Kh·ªüi t·∫°o Enhanced Gemini Service
        this.stockService = new StockService(); // Kh·ªüi t·∫°o Stock Service
    }

    /**
     * ‚ö° Enhanced Gemini AI API with optimizations
     */
    async callGeminiAI(prompt, options = {}) {
        try {
            // Use Enhanced Gemini Service for optimized requests
            return await this.enhancedGemini.generateContent(prompt, options);
        } catch (error) {
            logger.error('Enhanced Gemini AI error:', error.message);
            throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    }

    /**
     * üéØ Specialized Gemini methods for different use cases
     */
    async callGeminiForIntent(prompt) {
        return await this.enhancedGemini.analyzeIntent(prompt);
    }

    async callGeminiForDataExtraction(prompt) {
        return await this.enhancedGemini.extractData(prompt);
    }

    async callGeminiForFinancialAnalysis(prompt) {
        return await this.enhancedGemini.analyzeFinances(prompt);
    }

    async callGeminiForConversation(prompt) {
        return await this.enhancedGemini.generateConversation(prompt);
    }

    async callGeminiForCalculation(prompt) {
        return await this.enhancedGemini.calculateFinancial(prompt);
    }

    async callGeminiForAdvice(prompt) {
        return await this.enhancedGemini.generateAdvice(prompt);
    }

    /**
     * üìä Get Gemini performance metrics
     */
    getGeminiMetrics() {
        return this.enhancedGemini.getMetrics();
    }

    /**
     * üßÆ Enhanced Calculation Type Detection
     */
    async detectCalculationType(message) {
        try {
            const result = await this.calculationCoordinator.detectCalculationType(message);

            // Log for demo purposes
            logger.info('üéØ Calculation Detection Result', {
                message,
                isCalculation: result.isCalculation,
                type: result.type,
                confidence: result.confidence,
                intent: result.intent
            });

            return result;
        } catch (error) {
            logger.error('Error in calculation type detection:', error);
            return {
                isCalculation: false,
                type: 'none',
                confidence: 0,
                intent: 'other'
            };
        }
    }

    /**
     * Ph√¢n t√≠ch √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng v·ªõi h·ªá th·ªëng nh·∫≠n di·ªán n√¢ng cao
     */
    async analyzeIntent(message) {
        // AGENT INTERACTION: B·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√¢n t√≠ch √Ω ƒë·ªãnh ng∆∞·ªùi d√πng t·ª´ tin nh·∫Øn.
        // S·ª≠ d·ª•ng NLPService ƒë·ªÉ ph√¢n t√≠ch intent c∆° b·∫£n
        const nlpAnalysis = this.nlpService.analyzeIntent(message);
        logger.info('NLPService analysis result', { nlpAnalysis, message });

        if (nlpAnalysis.intent && nlpAnalysis.intent !== 'unknown' && nlpAnalysis.confidence > 0.6) { // Ng∆∞·ª°ng tin c·∫≠y
            // ∆Øu ti√™n k·∫øt qu·∫£ t·ª´ NLPService n·∫øu ƒë·ªß tin c·∫≠y
            if (nlpAnalysis.intent === 'financial_high_confidence' || nlpAnalysis.intent === 'financial_medium_confidence') {
                // C·∫ßn ph√¢n lo·∫°i chi ti·∫øt h∆°n cho c√°c intent t√†i ch√≠nh
                // Hi·ªán t·∫°i, ch√∫ng ta s·∫Ω ƒë·ªÉ logic c≈© x·ª≠ l√Ω vi·ªác n√†y sau khi NLPService ƒë∆∞a ra g·ª£i √Ω chung
                // Ho·∫∑c c√≥ th·ªÉ g·ªçi Gemini ƒë·ªÉ ph√¢n lo·∫°i c·ª• th·ªÉ h∆°n d·ª±a tr√™n nlpAnalysis.matchedCategories
            } else if (nlpAnalysis.intent === 'blocked_topic') {
                return 'blocked_topic'; // Tr·∫£ v·ªÅ intent b·ªã ch·∫∑n tr·ª±c ti·∫øp
            } else if (nlpAnalysis.intent === 'greeting') {
                return 'greeting.hello'; // √Ånh x·∫° intent ch√†o h·ªèi
            } else if (nlpAnalysis.intent === 'about_bot') {
                return 'bot.introduction'; // √Ånh x·∫° intent gi·ªõi thi·ªáu bot
            }
            // C√°c intent kh√°c t·ª´ NLPService c√≥ th·ªÉ ƒë∆∞·ª£c √°nh x·∫° t∆∞∆°ng t·ª± ·ªü ƒë√¢y
        }

        // Ki·ªÉm tra c√°c intent c∆° b·∫£n tr∆∞·ªõc (d·ª±a tr√™n training data)
        const normalizedMessage = message.toLowerCase().trim();

        // üîç T√çNH NƒÇNG 4: T√åM KI·∫æM N√ÇNG CAO (ADVANCED FILTERING) - ∆ØU TI√äN CAO NH·∫§T
        console.log('üîç CHECKING ADVANCED FILTER FIRST:', normalizedMessage);
        if (this.detectAdvancedFilter(normalizedMessage)) {
            console.log('‚úÖ ADVANCED FILTER DETECTED - RETURNING filter_query');
            return 'filter_query';
        }

        // ‚è∞ T√çNH NƒÇNG 6: TRUY V·∫§N THEO TH·ªúI GIAN (TIME-BASED QUERIES)
        console.log('üîç CHECKING TIME QUERY FIRST:', normalizedMessage);
        if (this.detectTimeBasedQuery(normalizedMessage)) {
            console.log('‚úÖ TIME QUERY DETECTED - RETURNING time_query');
            return 'time_query';
        }

        // Enhanced Calculation Detection - Ph√¢n bi·ªát 2 lo·∫°i t√≠nh to√°n
        const calculationResult = await this.detectCalculationType(normalizedMessage);
        if (calculationResult.isCalculation) {
            logger.info('Calculation detected', {
                message: normalizedMessage,
                calculationType: calculationResult.type,
                confidence: calculationResult.confidence
            });
            return calculationResult.intent;
        }

        // Ki·ªÉm tra c√°c c√¢u l·ªánh POST sau (∆∞u ti√™n th·∫•p h∆°n)
        const hasAmount = /\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)/i.test(message);

        // ƒê·ªãnh nghƒ©a c√°c bi·∫øn calculation keywords
        const hasCalculationKeywords = normalizedMessage.includes('c√≥ th·ªÉ chi') ||
            normalizedMessage.includes('c√≤n bao nhi√™u') || normalizedMessage.includes('ƒë·ªß ti·ªÅn') ||
            normalizedMessage.includes('thi·∫øu bao nhi√™u') || normalizedMessage.includes('n·∫øu chi') ||
            normalizedMessage.includes('sau khi chi') || normalizedMessage.includes('t√≠nh to√°n');

        const hasConditionalStructure = normalizedMessage.includes('n·∫øu') ||
            normalizedMessage.includes('sau khi') || normalizedMessage.includes('c√≥ th·ªÉ');

        // AGENT INTERACTION: Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a th√¥ng tin v·ªÅ s·ªë ti·ªÅn hay kh√¥ng.
        if (hasAmount) {
            logger.info('POST intent analysis - has amount detected', {
                message: normalizedMessage,
                hasAmount: true,
                hasCalculationKeywords,
                hasConditionalStructure
            });

            // N·∫øu c√≥ calculation keywords, skip POST logic v√† ƒë·ªÉ Gemini AI x·ª≠ l√Ω
            if (hasCalculationKeywords || hasConditionalStructure) {
                logger.info('POST intent analysis - skipping due to calculation keywords', {
                    message: normalizedMessage,
                    hasCalculationKeywords,
                    hasConditionalStructure
                });
                // Kh√¥ng return g√¨, ƒë·ªÉ logic ti·∫øp t·ª•c xu·ªëng Gemini AI intent analysis
            } else {
                // Ki·ªÉm tra ti·∫øt ki·ªám (∆∞u ti√™n cao nh·∫•t trong POST)
                if ((normalizedMessage.includes('ti·∫øt ki·ªám') || normalizedMessage.includes('tiet kiem')) &&
                    !normalizedMessage.includes('ng√¢n h√†ng') && !normalizedMessage.includes('ngan hang')) {

                    logger.info('POST intent analysis - savings keywords detected', {
                        message: normalizedMessage,
                        hasTietKiem: normalizedMessage.includes('ti·∫øt ki·ªám'),
                        hasTietKiemNoDiacritics: normalizedMessage.includes('tiet kiem'),
                        hasNganHang: normalizedMessage.includes('ng√¢n h√†ng'),
                        hasNganHangNoDiacritics: normalizedMessage.includes('ngan hang'),
                        hasCalculationKeywords,
                        hasConditionalStructure
                    });

                    if (normalizedMessage.includes('t√¥i ti·∫øt ki·ªám') || normalizedMessage.includes('t√¥i tiet kiem') ||
                        normalizedMessage.includes('ti·∫øt ki·ªám ƒë∆∞·ª£c') || normalizedMessage.includes('tiet kiem duoc') ||
                        normalizedMessage.includes('m·ªõi ti·∫øt ki·ªám') || normalizedMessage.includes('moi tiet kiem') ||
                        normalizedMessage.includes('v·ª´a ti·∫øt ki·ªám') || normalizedMessage.includes('vua tiet kiem') ||
                        normalizedMessage.includes('ƒë·ªÉ d√†nh') || normalizedMessage.includes('de danh') ||
                        normalizedMessage.includes('gom g√≥p') || normalizedMessage.includes('gom gop') ||
                        normalizedMessage.includes('d√†nh d·ª•m') || normalizedMessage.includes('danh dum') ||
                        normalizedMessage.includes('save') || normalizedMessage.includes('saving')) {

                        logger.info('POST intent analysis - insert_savings detected!', {
                            message: normalizedMessage,
                            matchedKeywords: {
                                toiTietKiem: normalizedMessage.includes('t√¥i ti·∫øt ki·ªám'),
                                toiTietKiemNoDiacritics: normalizedMessage.includes('t√¥i tiet kiem'),
                                tietKiemDuoc: normalizedMessage.includes('ti·∫øt ki·ªám ƒë∆∞·ª£c'),
                                tietKiemDuocNoDiacritics: normalizedMessage.includes('tiet kiem duoc'),
                                moiTietKiem: normalizedMessage.includes('m·ªõi ti·∫øt ki·ªám'),
                                moiTietKiemNoDiacritics: normalizedMessage.includes('moi tiet kiem'),
                                vuaTietKiem: normalizedMessage.includes('v·ª´a ti·∫øt ki·ªám'),
                                vuaTietKiemNoDiacritics: normalizedMessage.includes('vua tiet kiem')
                            }
                        });

                        return 'insert_savings';
                    }
                }

                // Ki·ªÉm tra thu nh·∫≠p
                if (normalizedMessage.includes('t√¥i nh·∫≠n') || normalizedMessage.includes('t√¥i ƒë∆∞·ª£c') ||
                    normalizedMessage.includes('t√¥i ki·∫øm') || normalizedMessage.includes('t√¥i thu') ||
                    normalizedMessage.includes('nh·∫≠n l∆∞∆°ng') || normalizedMessage.includes('ƒë∆∞·ª£c tr·∫£') ||
                    normalizedMessage.includes('thu v·ªÅ') || normalizedMessage.includes('ki·∫øm ƒë∆∞·ª£c') ||
                    normalizedMessage.includes('l∆∞∆°ng t√¥i') || normalizedMessage.includes('ti·ªÅn l∆∞∆°ng') ||
                    normalizedMessage.includes('th∆∞·ªüng') || normalizedMessage.includes('bonus') ||
                    normalizedMessage.includes('ƒë∆∞·ª£c th∆∞·ªüng') || normalizedMessage.includes('nh·∫≠n th∆∞·ªüng')) {
                    // AGENT INTERACTION: Ph√°t hi·ªán √Ω ƒë·ªãnh "th√™m thu nh·∫≠p" d·ª±a tr√™n t·ª´ kh√≥a v√† s·ªë ti·ªÅn.
                    return 'insert_income';
                }

                // Ki·ªÉm tra chi ti√™u - NH∆ØNG KH√îNG KHI C√ì CALCULATION KEYWORDS
                if (!hasCalculationKeywords && !hasConditionalStructure &&
                    (normalizedMessage.includes('t√¥i mua') || normalizedMessage.includes('t√¥i chi') ||
                        normalizedMessage.includes('t√¥i tr·∫£') || normalizedMessage.includes('t√¥i ti√™u') ||
                        normalizedMessage.includes('mua') || normalizedMessage.includes('chi') ||
                        normalizedMessage.includes('tr·∫£') || normalizedMessage.includes('ti√™u') ||
                        normalizedMessage.includes('thanh to√°n') || normalizedMessage.includes('t·ªën') ||
                        normalizedMessage.includes('h·∫øt') || normalizedMessage.includes('chi ti√™u') ||
                        normalizedMessage.includes('chi ph√≠'))) {

                    logger.info('POST intent analysis - expense keywords detected (no calculation)', {
                        message: normalizedMessage,
                        hasCalculationKeywords,
                        hasConditionalStructure
                    });

                    return 'insert_expense';
                }

                // Ki·ªÉm tra kho·∫£n vay
                if (normalizedMessage.includes('t√¥i vay') || normalizedMessage.includes('t√¥i m∆∞·ª£n') ||
                    normalizedMessage.includes('vay') || normalizedMessage.includes('m∆∞·ª£n') ||
                    normalizedMessage.includes('n·ª£') || normalizedMessage.includes('cho vay')) {
                    return 'insert_loan';
                }
            }
        }

        if (normalizedMessage.includes('ch√†o') || normalizedMessage.includes('hello') ||
            normalizedMessage.includes('hi') || normalizedMessage.includes('xin ch√†o') ||
            normalizedMessage.includes('alo') || normalizedMessage.includes('a l√¥') ||
            normalizedMessage.includes('√™ bot')) {
            return 'greeting.hello';
        }

        if (normalizedMessage.includes('t·∫°m bi·ªát') || normalizedMessage.includes('bye') ||
            normalizedMessage.includes('goodbye') || normalizedMessage.includes('c·∫£m ∆°n') ||
            normalizedMessage.includes('thank you') || normalizedMessage.includes('thanks')) {
            return 'greeting.farewell';
        }

        if (normalizedMessage.includes('b·∫°n l√† ai') || normalizedMessage.includes('gi·ªõi thi·ªáu') ||
            normalizedMessage.includes('b·∫°n t√™n g√¨') || normalizedMessage.includes('vanlangbot l√† ai')) {
            return 'bot.introduction';
        }

        if (normalizedMessage.includes('b·∫°n l√†m ƒë∆∞·ª£c g√¨') || normalizedMessage.includes('ch·ª©c nƒÉng') ||
            normalizedMessage.includes('kh·∫£ nƒÉng') || normalizedMessage.includes('gi√∫p g√¨ ƒë∆∞·ª£c')) {
            return 'bot.capabilities';
        }

        if (normalizedMessage.includes('m·∫•y gi·ªù') || normalizedMessage.includes('ng√†y m·∫•y') ||
            normalizedMessage.includes('th·ªùi gian') || normalizedMessage.includes('b√¢y gi·ªù')) {
            return 'common.time_date';
        }

        if (normalizedMessage.includes('ƒëƒÉng nh·∫≠p') || normalizedMessage.includes('t√†i kho·∫£n') ||
            normalizedMessage.includes('login') || normalizedMessage.includes('y√™u c·∫ßu')) {
            return 'auth.require';
        }

        if (normalizedMessage.includes('b·∫£o m·∫≠t') || normalizedMessage.includes('an to√†n') ||
            normalizedMessage.includes('ri√™ng t∆∞') || normalizedMessage.includes('security')) {
            return 'security.privacy';
        }

        if (normalizedMessage.includes('y√™u') || normalizedMessage.includes('bu·ªìn') ||
            normalizedMessage.includes('ph√° s·∫£n') || normalizedMessage.includes('chuy·ªán c∆∞·ªùi')) {
            return 'funny.chat';
        }

        // Ki·ªÉm tra statistics query tr∆∞·ªõc khi g·ªçi Gemini AI (∆∞u ti√™n cao nh·∫•t)
        if (normalizedMessage.includes('trung b√¨nh') || normalizedMessage.includes('trung binh') ||
            normalizedMessage.includes('average') || normalizedMessage.includes('so s√°nh') ||
            normalizedMessage.includes('so sanh') || normalizedMessage.includes('compare') ||
            normalizedMessage.includes('ph√¢n t√≠ch') || normalizedMessage.includes('phan tich') ||
            normalizedMessage.includes('analyze') || normalizedMessage.includes('th·ªëng k√™') ||
            normalizedMessage.includes('thong ke') || normalizedMessage.includes('statistics') ||
            normalizedMessage.includes('breakdown') || normalizedMessage.includes('t·ª∑ l·ªá') ||
            normalizedMessage.includes('ty le') || normalizedMessage.includes('ratio')) {
            return 'statistics_query';
        }

        // Ki·ªÉm tra stock query tr∆∞·ªõc khi g·ªçi Gemini AI (∆∞u ti√™n cao)
        if (this.detectStockQuery(normalizedMessage)) {
            return 'stock_query';
        }

        // Ki·ªÉm tra calculation query tr∆∞·ªõc khi g·ªçi Gemini AI
        if (normalizedMessage.includes('c√≥ th·ªÉ chi') || normalizedMessage.includes('co the chi') ||
            normalizedMessage.includes('c√≤n bao nhi√™u') || normalizedMessage.includes('con bao nhieu') ||
            normalizedMessage.includes('ƒë·ªß ti·ªÅn') || normalizedMessage.includes('du tien') ||
            normalizedMessage.includes('thi·∫øu bao nhi√™u') || normalizedMessage.includes('thieu bao nhieu') ||
            normalizedMessage.includes('n·∫øu chi') || normalizedMessage.includes('neu chi') ||
            normalizedMessage.includes('sau khi chi') || normalizedMessage.includes('sau khi chi') ||
            normalizedMessage.includes('t√≠nh to√°n') || normalizedMessage.includes('tinh toan') ||
            normalizedMessage.includes('calculate') || normalizedMessage.includes('calculation')) {
            return 'calculation_query';
        }



        console.log('ü§ñ FALLBACK TO GEMINI AI INTENT ANALYSIS:', normalizedMessage);
        const intentPrompt = `
Ph√¢n t√≠ch m·ª•c ƒë√≠ch c·ªßa c√¢u sau v√† tr·∫£ l·ªùi b·∫±ng m·ªôt t·ª´ duy nh·∫•t: "${message}"

C√°c m·ª•c ƒë√≠ch c√≥ th·ªÉ (theo th·ª© t·ª± ∆∞u ti√™n):
- statistics_query: Th·ªëng k√™ n√¢ng cao (t·ª´ kh√≥a: "trung b√¨nh", "average", "t·ªïng c·ªông", "sum", "so s√°nh", "compare", "ph√¢n t√≠ch", "analyze", "th·ªëng k√™", "statistics", "breakdown", "t·ª∑ l·ªá", "ratio")
- calculation_query: C√¢u h·ªèi suy lu·∫≠n, t√≠nh to√°n (t·ª´ kh√≥a: t√≠nh, l√£i su·∫•t, k·∫ø ho·∫°ch, d·ª± ƒëo√°n, "c√≥ th·ªÉ chi", "c√≤n bao nhi√™u", "ƒë·ªß ti·ªÅn", "thi·∫øu bao nhi√™u", "n·∫øu chi")
- income_query: H·ªèi v·ªÅ thu nh·∫≠p (t·ª´ kh√≥a: thu nh·∫≠p, l∆∞∆°ng, ti·ªÅn l∆∞∆°ng, income, salary, ki·∫øm ƒë∆∞·ª£c, nh·∫≠n ƒë∆∞·ª£c)
- savings_income_query: H·ªèi v·ªÅ ti·ªÅn ti·∫øt ki·ªám trong thu nh·∫≠p (t·ª´ kh√≥a: ti·ªÅn ti·∫øt ki·ªám, ti·∫øt ki·ªám - KH√îNG c√≥ "ng√¢n h√†ng")
- expense_query: H·ªèi v·ªÅ chi ti√™u (t·ª´ kh√≥a: chi ti√™u, chi ph√≠, ti√™u d√πng, expense, spending, mua, tr·∫£, thanh to√°n - NH∆ØNG KH√îNG c√≥ "trung b√¨nh", "average", "so s√°nh", "ph√¢n t√≠ch")
- loan_query: H·ªèi v·ªÅ kho·∫£n vay (t·ª´ kh√≥a: kho·∫£n vay, vay, n·ª£, loan, debt, m∆∞·ª£n, cho vay)
- stock_query: H·ªèi v·ªÅ c·ªï phi·∫øu c·ª• th·ªÉ (t·ª´ kh√≥a: gi√° VNM, c·ªï phi·∫øu FPT, VCB h√¥m nay, ph√¢n t√≠ch HPG, m√£ c·ªï phi·∫øu, stock price)
- investment_query: H·ªèi v·ªÅ ƒë·∫ßu t∆∞ (t·ª´ kh√≥a: ƒë·∫ßu t∆∞, investment, v√†ng, gold, b·∫•t ƒë·ªông s·∫£n, real estate - KH√îNG bao g·ªìm c·ªï phi·∫øu c·ª• th·ªÉ)
- savings_query: H·ªèi v·ªÅ ti·∫øt ki·ªám ng√¢n h√†ng (t·ª´ kh√≥a: ti·∫øt ki·ªám ng√¢n h√†ng, ti·ªÅn g·ª≠i ng√¢n h√†ng, g·ª≠i ti·∫øt ki·ªám, ti·∫øt ki·ªám t·ª´ ng√¢n h√†ng, ti·ªÅn ti·∫øt ki·ªám ng√¢n h√†ng, bank savings)
- balance_query: H·ªèi v·ªÅ s·ªë d∆∞, t·ªïng quan t√†i ch√≠nh (t·ª´ kh√≥a: s·ªë d∆∞, balance, t·ªïng quan, overview, t√¨nh h√¨nh t√†i ch√≠nh)
- detail_query: Xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i (t·ª´ kh√≥a: "c√≤n l·∫°i", "kh√°c", "chi ti·∫øt", "xem th√™m", "t·∫•t c·∫£", "danh s√°ch ƒë·∫ßy ƒë·ªß")
- filter_query: T√¨m ki·∫øm c√≥ ƒëi·ªÅu ki·ªán (t·ª´ kh√≥a: "tr√™n", "d∆∞·ªõi", "l·ªõn h∆°n", "nh·ªè h∆°n", "cao nh·∫•t", "th·∫•p nh·∫•t", "l·ªõn nh·∫•t", "nh·ªè nh·∫•t", "above", "below", "highest", "lowest")
- time_query: Truy v·∫•n theo th·ªùi gian c·ª• th·ªÉ (t·ª´ kh√≥a: "tu·∫ßn n√†y", "th√°ng tr∆∞·ªõc", "nƒÉm nay", "h√¥m qua", "this week", "last month", "yesterday")

**TH√äM D·ªÆ LI·ªÜU - ∆Øu ti√™n cao:**
- insert_savings: Th√™m ti·ªÅn ti·∫øt ki·ªám (c·∫•u tr√∫c: "t√¥i ti·∫øt ki·ªám", "ti·∫øt ki·ªám ƒë∆∞·ª£c", "m·ªõi ti·∫øt ki·ªám", "v·ª´a ti·∫øt ki·ªám", "ƒë·ªÉ d√†nh", "gom g√≥p", "d√†nh d·ª•m", "save" + s·ªë ti·ªÅn - KH√îNG c√≥ "ng√¢n h√†ng")
- insert_income: Th√™m thu nh·∫≠p (c·∫•u tr√∫c: "t√¥i nh·∫≠n", "t√¥i ƒë∆∞·ª£c", "t√¥i ki·∫øm", "t√¥i thu", "nh·∫≠n l∆∞∆°ng", "ƒë∆∞·ª£c tr·∫£", "thu v·ªÅ", "ki·∫øm ƒë∆∞·ª£c", "l∆∞∆°ng t√¥i", "ti·ªÅn l∆∞∆°ng", "th∆∞·ªüng", "bonus" + s·ªë ti·ªÅn)
- insert_expense: Th√™m chi ti√™u (c·∫•u tr√∫c: "t√¥i mua", "t√¥i chi", "t√¥i tr·∫£", "t√¥i ti√™u", "mua", "chi", "tr·∫£", "ti√™u", "thanh to√°n", "t·ªën", "h·∫øt" + s·ªë ti·ªÅn)
- insert_loan: Th√™m kho·∫£n vay (c·∫•u tr√∫c: "t√¥i vay", "t√¥i m∆∞·ª£n", "vay", "m∆∞·ª£n", "n·ª£", "cho vay" + s·ªë ti·ªÅn)

- analyze: Ph√¢n t√≠ch t√†i ch√≠nh t·ªïng quan, b√°o c√°o, th·ªëng k√™
- advice: Xin l·ªùi khuy√™n t√†i ch√≠nh
- greeting: Ch√†o h·ªèi, gi·ªõi thi·ªáu
- chatbot.scope: H·ªèi v·ªÅ ph·∫°m vi ho·∫°t ƒë·ªông c·ªßa bot
- other: C√°c m·ª•c ƒë√≠ch kh√°c

**L∆∞u √Ω quan tr·ªçng:**
- N·∫øu c√≥ s·ªë ti·ªÅn + ƒë·ªông t·ª´ h√†nh ƒë·ªông (mua, chi, nh·∫≠n, ki·∫øm...) ‚Üí ∆∞u ti√™n insert_*
- N·∫øu ch·ªâ h·ªèi th√¥ng tin ‚Üí query_*

Ch·ªâ tr·∫£ l·ªùi m·ªôt t·ª´ duy nh·∫•t.`;

        // AGENT INTERACTION: N·∫øu ph√¢n t√≠ch d·ª±a tr√™n t·ª´ kh√≥a kh√¥ng x√°c ƒë·ªãnh r√µ, s·ª≠ d·ª•ng Enhanced Gemini AI ƒë·ªÉ ph√¢n t√≠ch intent.
        try {
            const intent = await this.callGeminiForIntent(intentPrompt);
            return intent.trim().toLowerCase();
        } catch (error) {
            logger.error('Intent analysis error:', error);
            return 'other';
        }
    }

    /**
     * üîç T√çNH NƒÇNG 4: Ph√°t hi·ªán truy v·∫•n l·ªçc n√¢ng cao
     */
    detectAdvancedFilter(message) {
        const normalizedMessage = message.toLowerCase().trim();

        // DIRECT CONSOLE LOG - Kh√¥ng d√πng logger
        console.log('üîç DIRECT LOG - Advanced Filter Detection START:', {
            originalMessage: message,
            normalizedMessage: normalizedMessage,
            timestamp: new Date().toISOString()
        });

        // Debug log ƒë·ªÉ ki·ªÉm tra
        logger.info('üîç Checking Advanced Filter Detection', {
            message: normalizedMessage,
            originalMessage: message
        });

        const filterPatterns = [
            // To√°n t·ª≠ so s√°nh v·ªõi s·ªë ti·ªÅn - C·∫¢I THI·ªÜN
            /\b(tr√™n|l·ªõn h∆°n|l·ªõn hon|above|greater than|greater|higher than|higher)\s+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /\b(d∆∞·ªõi|duoi|nh·ªè h∆°n|nho hon|below|less than|less|lower than|lower)\s+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,

            // T√¨m ki·∫øm c·ª±c tr·ªã - GENERAL PATTERNS
            /\b(cao nh·∫•t|cao nhat|l·ªõn nh·∫•t|lon nhat|highest|maximum|max|biggest|largest)/i,
            /\b(th·∫•p nh·∫•t|thap nhat|nh·ªè nh·∫•t|nho nhat|lowest|minimum|min|smallest)/i,

            // CHI TI√äU PATTERNS - C·ª§ TH·ªÇ
            /(chi ti√™u|chi tieu|expense|spending).*(cao nh·∫•t|cao nhat|l·ªõn nh·∫•t|lon nhat|highest|maximum|max)/i,
            /(chi ti√™u|chi tieu|expense|spending).*(th·∫•p nh·∫•t|thap nhat|nh·ªè nh·∫•t|nho nhat|lowest|minimum|min)/i,
            /(chi ti√™u|chi tieu|expense|spending).*(tr√™n|above|l·ªõn h∆°n|lon hon).+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /(chi ti√™u|chi tieu|expense|spending).*(d∆∞·ªõi|duoi|nh·ªè h∆°n|nho hon).+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,

            // THU NH·∫¨P PATTERNS - C·ª§ TH·ªÇ
            /(thu nh·∫≠p|thu nhap|income|salary).*(cao nh·∫•t|cao nhat|l·ªõn nh·∫•t|lon nhat|highest|maximum|max)/i,
            /(thu nh·∫≠p|thu nhap|income|salary).*(th·∫•p nh·∫•t|thap nhat|nh·ªè nh·∫•t|nho nhat|lowest|minimum|min)/i,
            /(thu nh·∫≠p|thu nhap|income|salary).*(tr√™n|above|l·ªõn h∆°n|lon hon).+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /(thu nh·∫≠p|thu nhap|income|salary).*(d∆∞·ªõi|duoi|nh·ªè h∆°n|nho hon).+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,

            // KHO·∫¢N VAY PATTERNS - C·ª§ TH·ªÇ
            /(kho·∫£n vay|khoan vay|loan|debt).*(cao nh·∫•t|cao nhat|l·ªõn nh·∫•t|lon nhat|highest|maximum|max)/i,
            /(kho·∫£n vay|khoan vay|loan|debt).*(th·∫•p nh·∫•t|thap nhat|nh·ªè nh·∫•t|nho nhat|lowest|minimum|min)/i,
            /(kho·∫£n vay|khoan vay|loan|debt).*(tr√™n|above|l·ªõn h∆°n|lon hon).+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /(kho·∫£n vay|khoan vay|loan|debt).*(d∆∞·ªõi|duoi|nh·ªè h∆°n|nho hon).+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,

            // PATTERNS ƒê∆†N GI·∫¢N CHO TEST CASES - C·∫¢I THI·ªÜN
            /chi ti√™u.*cao nh·∫•t/i,
            /chi ti√™u.*l·ªõn nh·∫•t/i,
            /chi ti√™u.*th·∫•p nh·∫•t/i,
            /chi ti√™u.*nh·ªè nh·∫•t/i,
            /chi ti√™u.*tr√™n.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /chi ti√™u.*d∆∞·ªõi.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,

            /thu nh·∫≠p.*cao nh·∫•t/i,
            /thu nh·∫≠p.*l·ªõn nh·∫•t/i,
            /thu nh·∫≠p.*th·∫•p nh·∫•t/i,
            /thu nh·∫≠p.*nh·ªè nh·∫•t/i,
            /thu nh·∫≠p.*tr√™n.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /thu nh·∫≠p.*d∆∞·ªõi.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,

            /kho·∫£n vay.*cao nh·∫•t/i,
            /kho·∫£n vay.*l·ªõn nh·∫•t/i,
            /kho·∫£n vay.*th·∫•p nh·∫•t/i,
            /kho·∫£n vay.*nh·ªè nh·∫•t/i,
            /kho·∫£n vay.*tr√™n.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /kho·∫£n vay.*d∆∞·ªõi.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,

            // PATTERNS ƒê·∫∂C BI·ªÜT CHO "500k"
            /kho·∫£n vay.*d∆∞·ªõi.*500k/i,
            /kho·∫£n vay.*nh·ªè h∆°n.*500k/i,
            /kho·∫£n vay.*below.*500k/i,
            /kho·∫£n vay.*less.*500k/i,

            // PATTERNS CHO C·∫§U TR√öC "N√ÄO"
            /kho·∫£n vay.*n√†o.*d∆∞·ªõi.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /kho·∫£n vay.*n√†o.*nh·ªè h∆°n.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /kho·∫£n vay.*n√†o.*below.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /kho·∫£n vay.*n√†o.*less.*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
            /kho·∫£n vay.*n√†o.*d∆∞·ªõi.*500k/i,

            // PATTERNS CHO C·∫§U TR√öC KH√ÅC
            /(chi ti√™u|thu nh·∫≠p|kho·∫£n vay).*n√†o.*(cao nh·∫•t|th·∫•p nh·∫•t|l·ªõn nh·∫•t|nh·ªè nh·∫•t)/i,
            /(chi ti√™u|thu nh·∫≠p|kho·∫£n vay).*n√†o.*(tr√™n|d∆∞·ªõi|l·ªõn h∆°n|nh·ªè h∆°n).*(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,

            // PATTERNS ƒê·∫∂C BI·ªÜT CHO "THU NH·∫¨P TH·∫§P NH·∫§T"
            /thu nh·∫≠p.*th·∫•p nh·∫•t/i,
            /thu nhap.*thap nhat/i,
            /income.*lowest/i,
            /income.*minimum/i,
            /thu nh·∫≠p.*nh·ªè nh·∫•t/i,
            /thu nhap.*nho nhat/i
        ];

        // SPECIAL DEBUG CHO "THU NH·∫¨P TH·∫§P NH·∫§T"
        if (normalizedMessage.includes('thu nh·∫≠p th·∫•p nh·∫•t')) {
            console.log('üö® SPECIAL DEBUG - THU NH·∫¨P TH·∫§P NH·∫§T DETECTED!');
            console.log('üö® Message:', normalizedMessage);
            console.log('üö® Total patterns:', filterPatterns.length);

            // Test t·ª´ng pattern cu·ªëi c√πng
            const lastPatterns = filterPatterns.slice(-6);
            lastPatterns.forEach((pattern, index) => {
                const actualIndex = filterPatterns.length - 6 + index;
                const testResult = pattern.test(normalizedMessage);
                console.log(`üö® PATTERN ${actualIndex} (${pattern.toString()}): ${testResult}`);
            });

            // Test specific patterns manually
            console.log('üö® MANUAL PATTERN TESTS:');
            console.log('- /thu nh·∫≠p.*th·∫•p nh·∫•t/i.test():', /thu nh·∫≠p.*th·∫•p nh·∫•t/i.test(normalizedMessage));
            console.log('- /th·∫•p nh·∫•t/i.test():', /th·∫•p nh·∫•t/i.test(normalizedMessage));
            console.log('- includes("thu nh·∫≠p"):', normalizedMessage.includes('thu nh·∫≠p'));
            console.log('- includes("th·∫•p nh·∫•t"):', normalizedMessage.includes('th·∫•p nh·∫•t'));
        }

        // Ki·ªÉm tra t·ª´ng pattern v√† log k·∫øt qu·∫£
        for (let i = 0; i < filterPatterns.length; i++) {
            const pattern = filterPatterns[i];
            const isMatch = pattern.test(normalizedMessage);

            // Log chi ti·∫øt cho patterns cu·ªëi (thu nh·∫≠p th·∫•p nh·∫•t)
            if (normalizedMessage.includes('thu nh·∫≠p th·∫•p nh·∫•t') && i >= filterPatterns.length - 6) {
                console.log(`üö® TESTING PATTERN ${i}:`, {
                    pattern: pattern.toString(),
                    message: normalizedMessage,
                    isMatch: isMatch,
                    testResult: pattern.test(normalizedMessage)
                });
            }

            if (isMatch) {
                console.log('üéØ DIRECT LOG - Advanced Filter Pattern MATCHED!', {
                    patternIndex: i,
                    pattern: pattern.toString(),
                    message: normalizedMessage
                });

                logger.info('üéØ Advanced Filter Pattern Matched!', {
                    patternIndex: i,
                    pattern: pattern.toString(),
                    message: normalizedMessage
                });
                return true;
            }
        }

        console.log('‚ùå DIRECT LOG - No Advanced Filter Pattern Matched', {
            message: normalizedMessage,
            totalPatterns: filterPatterns.length
        });

        logger.info('‚ùå No Advanced Filter Pattern Matched', {
            message: normalizedMessage,
            totalPatterns: filterPatterns.length
        });

        return false;
    }

    /**
     * ‚è∞ T√çNH NƒÇNG 6: Ph√°t hi·ªán truy v·∫•n theo th·ªùi gian
     */
    detectTimeBasedQuery(message) {
        const timePatterns = [
            // Th·ªùi gian c·ª• th·ªÉ
            /\b(tu·∫ßn n√†y|tuan nay|this week|tu·∫ßn hi·ªán t·∫°i|tuan hien tai)/i,
            /\b(th√°ng tr∆∞·ªõc|thang truoc|last month|th√°ng v·ª´a r·ªìi|thang vua roi)/i,
            /\b(h√¥m nay|hom nay|today|ng√†y h√¥m nay|ngay hom nay)/i,
            /\b(h√¥m qua|hom qua|yesterday|ng√†y h√¥m qua|ngay hom qua)/i,
            /\b(th√°ng n√†y|thang nay|this month|th√°ng hi·ªán t·∫°i|thang hien tai)/i,
            /\b(nƒÉm nay|nam nay|this year|nƒÉm hi·ªán t·∫°i|nam hien tai)/i,

            // C·∫•u tr√∫c v·ªõi d·ªØ li·ªáu t√†i ch√≠nh
            /(thu nh·∫≠p|thu nhap|income).*(tu·∫ßn n√†y|tuan nay|this week)/i,
            /(chi ti√™u|chi tieu|expense).*(th√°ng tr∆∞·ªõc|thang truoc|last month)/i,
            /(kho·∫£n vay|khoan vay|loan).*(h√¥m nay|hom nay|today)/i,
            /(t·ªïng quan|tong quan|overview).*(th√°ng n√†y|thang nay|this month)/i
        ];

        return timePatterns.some(pattern => pattern.test(message));
    }

    /**
     * üìä Ph√°t hi·ªán truy v·∫•n v·ªÅ c·ªï phi·∫øu
     */
    detectStockQuery(message) {
        const normalizedMessage = message.toLowerCase().trim();

        // Patterns ƒë·ªÉ nh·∫≠n di·ªán c√¢u h·ªèi v·ªÅ c·ªï phi·∫øu
        const stockPatterns = [
            // H·ªèi gi√° c·ªï phi·∫øu c·ª• th·ªÉ
            /\b(gi√°|gia)\s+(c·ªï phi·∫øu|co phieu|stock)\s+([A-Z]{3,4})\b/i,
            /\b(m√£|ma)\s+([A-Z]{3,4})\s+(h√¥m nay|hom nay|b√¢y gi·ªù|bay gio|hi·ªán t·∫°i|hien tai)/i,
            /\b([A-Z]{3,4})\s+(h√¥m nay|hom nay|b√¢y gi·ªù|bay gio|th·∫ø n√†o|the nao|nh∆∞ th·∫ø n√†o|nhu the nao)/i,

            // H·ªèi v·ªÅ c·ªï phi·∫øu n√≥i chung
            /\b(c·ªï phi·∫øu|co phieu|stock|ch·ª©ng kho√°n|chung khoan)\s+(n√†o|nao|g√¨|gi|th·∫ø n√†o|the nao)/i,
            /\b(th·ªã tr∆∞·ªùng|thi truong|market)\s+(c·ªï phi·∫øu|co phieu|stock|ch·ª©ng kho√°n|chung khoan)/i,

            // H·ªèi gi√° tr·ª±c ti·∫øp v·ªõi m√£ c·ªï phi·∫øu
            /\b(VNM|VCB|FPT|VIC|HPG|MSN|CTG|BID|TCB|VHM|MWG|SAB|GAS|PLX|VRE|POW|SSI|HDB|TPB|SHB)\b/i,

            // C√¢u h·ªèi ph√¢n t√≠ch
            /(ph√¢n t√≠ch|phan tich|analyze)\s+(c·ªï phi·∫øu|co phieu|stock)/i,
            /(xu h∆∞·ªõng|xu huong|trend)\s+(c·ªï phi·∫øu|co phieu|stock)/i,
            /(n√™n mua|nen mua|should buy)\s+(c·ªï phi·∫øu|co phieu|stock)/i,

            // H·ªèi v·ªÅ ng√†nh
            /(c·ªï phi·∫øu|co phieu|stock)\s+(ng√¢n h√†ng|ngan hang|banking|c√¥ng ngh·ªá|cong nghe|technology)/i,

            // Patterns ƒë∆°n gi·∫£n
            /gi√°\s+[A-Z]{3,4}/i,
            /[A-Z]{3,4}\s+gi√°/i,
            /stock\s+price/i,
            /price\s+of\s+[A-Z]{3,4}/i
        ];

        const isStockQuery = stockPatterns.some(pattern => pattern.test(normalizedMessage));

        if (isStockQuery) {
            logger.info('üìä Stock query detected', {
                message: normalizedMessage,
                patterns: stockPatterns.map(p => p.test(normalizedMessage))
            });
        }

        return isStockQuery;
    }

    /**
     * Tr√≠ch xu·∫•t m√£ c·ªï phi·∫øu t·ª´ tin nh·∫Øn
     */
    extractStockSymbol(message) {
        const normalizedMessage = message.toUpperCase().trim();

        // Danh s√°ch m√£ c·ªï phi·∫øu ph·ªï bi·∫øn
        const popularStocks = [
            'VNM', 'VCB', 'FPT', 'VIC', 'HPG', 'MSN', 'CTG', 'BID', 'TCB', 'VHM',
            'MWG', 'SAB', 'GAS', 'PLX', 'VRE', 'POW', 'SSI', 'HDB', 'TPB', 'SHB',
            'ACB', 'STB', 'VPB', 'EIB', 'LPB', 'MBB', 'NVB', 'OCB', 'PVB', 'SCB',
            'VIB', 'VND', 'VCG', 'VJC', 'GMD', 'DGC', 'REE', 'PNJ', 'DXG', 'KDH'
        ];

        // T√¨m m√£ c·ªï phi·∫øu trong tin nh·∫Øn
        for (const stock of popularStocks) {
            if (normalizedMessage.includes(stock)) {
                return stock;
            }
        }

        // T√¨m pattern m√£ c·ªï phi·∫øu (3-4 k√Ω t·ª± vi·∫øt hoa)
        const stockMatch = normalizedMessage.match(/\b([A-Z]{3,4})\b/);
        if (stockMatch) {
            return stockMatch[1];
        }

        return null;
    }

    /**
     * Ph√¢n t√≠ch t·ª´ kh√≥a v√† th·ªùi gian t·ª´ tin nh·∫Øn
     */
    analyzeKeywordsAndTime(message) {
        const normalizedMessage = message.toLowerCase().trim();

        // H√†m helper ƒë·ªÉ lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
        const removeDiacritics = (str) => {
            return str.normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/ƒë/g, 'd')
                .replace(/ƒê/g, 'D');
        };

        const normalizedNoDiacritics = removeDiacritics(normalizedMessage);

        // Ph√¢n t√≠ch t·ª´ kh√≥a ch√≠nh
        let category = null;

        // ∆Øu ti√™n ki·ªÉm tra c√°c t·ª´ kh√≥a c·ª• th·ªÉ tr∆∞·ªõc - PH·∫¢I THEO TH·ª® T·ª∞ CH√çNH X√ÅC
        if (normalizedMessage.includes('ti·∫øt ki·ªám ng√¢n h√†ng') || normalizedNoDiacritics.includes('tiet kiem ngan hang') ||
            normalizedMessage.includes('ti·ªÅn g·ª≠i ng√¢n h√†ng') || normalizedNoDiacritics.includes('tien gui ngan hang') ||
            normalizedMessage.includes('g·ª≠i ti·∫øt ki·ªám') || normalizedNoDiacritics.includes('gui tiet kiem') ||
            normalizedMessage.includes('bank savings') ||
            normalizedMessage.includes('ti·ªÅn ti·∫øt ki·ªám ng√¢n h√†ng') || normalizedNoDiacritics.includes('tien tiet kiem ngan hang')) {
            category = 'savings';
            logger.info('Keyword analysis: detected savings (bank)', { message: normalizedMessage });
        } else if (normalizedMessage.includes('ti·∫øt ki·ªám trong thu nh·∫≠p') || normalizedNoDiacritics.includes('tiet kiem trong thu nhap')) {
            category = 'income';
            logger.info('Keyword analysis: detected income (savings in income)', { message: normalizedMessage });
        } else if (
            // Ki·ªÉm tra ti·∫øt ki·ªám ng√¢n h√†ng TR∆Ø·ªöC (∆∞u ti√™n cao h∆°n)
            (normalizedMessage.includes('ti·∫øt ki·ªám') && normalizedMessage.includes('ng√¢n h√†ng')) ||
            (normalizedNoDiacritics.includes('tiet kiem') && normalizedNoDiacritics.includes('ngan hang')) ||
            normalizedMessage.includes('ti·∫øt ki·ªám g·ª≠i ng√¢n h√†ng') ||
            normalizedMessage.includes('ti·ªÅn g·ª≠i ng√¢n h√†ng') ||
            normalizedMessage.includes('g·ª≠i ti·∫øt ki·ªám') ||
            normalizedMessage.includes('ti·∫øt ki·ªám t·ª´ ng√¢n h√†ng') ||
            normalizedMessage.includes('ti·ªÅn ti·∫øt ki·ªám ng√¢n h√†ng') ||
            normalizedMessage.includes('bank savings') ||
            normalizedMessage.includes('savings bank') ||
            normalizedNoDiacritics.includes('tiet kiem ngan hang') ||
            normalizedNoDiacritics.includes('tien gui ngan hang')
        ) {
            category = 'savings'; // Ti·∫øt ki·ªám ng√¢n h√†ng ‚Üí investment
            logger.info('Keyword analysis: detected bank savings in investment category', { message: normalizedMessage });
        } else if (
            // Ti·∫øt ki·ªám th√¥ng th∆∞·ªùng (kh√¥ng c√≥ t·ª´ "ng√¢n h√†ng")
            normalizedMessage === 'ti·ªÅn ti·∫øt ki·ªám' || normalizedNoDiacritics === 'tien tiet kiem' ||
            normalizedMessage.includes('ti·∫øt ki·ªám') || normalizedNoDiacritics.includes('tiet kiem') ||
            normalizedMessage.includes('saving') || normalizedMessage.includes('savings') ||
            normalizedMessage.includes('ti·ªÅn ti·∫øt ki·ªám') || normalizedNoDiacritics.includes('tien tiet kiem') ||
            normalizedMessage.includes('t·ªïng ti·∫øt ki·ªám') || normalizedNoDiacritics.includes('tong tiet kiem')
        ) {
            category = 'savings_income'; // Ti·∫øt ki·ªám th√¥ng th∆∞·ªùng ‚Üí income
            logger.info('Keyword analysis: detected general savings in income category', { message: normalizedMessage });
        } else if (normalizedMessage.includes('thu nh·∫≠p') || normalizedNoDiacritics.includes('thu nhap') ||
            normalizedMessage.includes('l∆∞∆°ng') || normalizedNoDiacritics.includes('luong') ||
            normalizedMessage.includes('ti·ªÅn l∆∞∆°ng') || normalizedNoDiacritics.includes('tien luong') ||
            normalizedMessage.includes('income') || normalizedMessage.includes('salary')) {
            category = 'income';
            logger.info('Keyword analysis: detected income (general)', { message: normalizedMessage });
        } else if (normalizedMessage.includes('chi ti√™u') || normalizedNoDiacritics.includes('chi tieu') ||
            normalizedMessage.includes('chi ph√≠') || normalizedNoDiacritics.includes('chi phi') ||
            normalizedMessage.includes('ti√™u d√πng') || normalizedNoDiacritics.includes('tieu dung') ||
            normalizedMessage.includes('expense') || normalizedMessage.includes('spending')) {
            category = 'expense';
        } else if (
            // Kho·∫£n vay qu√° h·∫°n - C·∫£i thi·ªán kh·∫£ nƒÉng nh·∫≠n di·ªán
            normalizedMessage.includes('n·ª£ qu√° h·∫°n') || normalizedNoDiacritics.includes('no qua han') ||
            normalizedMessage.includes('qu√° h·∫°n') || normalizedNoDiacritics.includes('qua han') ||
            normalizedMessage.includes('vay qu√° h·∫°n') || normalizedNoDiacritics.includes('vay qua han') ||
            normalizedMessage.includes('kho·∫£n vay qu√° h·∫°n') || normalizedNoDiacritics.includes('khoan vay qua han') ||
            normalizedMessage.includes('n·ª£ tr·ªÖ h·∫°n') || normalizedNoDiacritics.includes('no tre han') ||
            normalizedMessage.includes('tr·ªÖ h·∫°n') || normalizedNoDiacritics.includes('tre han') ||
            normalizedMessage.includes('n·ª£ ƒë·∫øn h·∫°n') || normalizedNoDiacritics.includes('no den han') ||
            normalizedMessage.includes('ƒë·∫øn h·∫°n') || normalizedNoDiacritics.includes('den han') ||
            normalizedMessage.includes('h·∫øt h·∫°n') || normalizedNoDiacritics.includes('het han') ||
            normalizedMessage.includes('n·ª£ x·∫•u') || normalizedNoDiacritics.includes('no xau') ||
            normalizedMessage.includes('vay x·∫•u') || normalizedNoDiacritics.includes('vay xau') ||
            normalizedMessage.includes('n·ª£ kh√≥ ƒë√≤i') || normalizedNoDiacritics.includes('no kho doi') ||
            normalizedMessage.includes('vay kh√≥ ƒë√≤i') || normalizedNoDiacritics.includes('vay kho doi') ||
            normalizedMessage.includes('n·ª£ ch·∫≠m tr·∫£') || normalizedNoDiacritics.includes('no cham tra') ||
            normalizedMessage.includes('vay ch·∫≠m tr·∫£') || normalizedNoDiacritics.includes('vay cham tra') ||
            normalizedMessage.includes('n·ª£ t·ªìn ƒë·ªçng') || normalizedNoDiacritics.includes('no ton dong') ||
            normalizedMessage.includes('vay t·ªìn ƒë·ªçng') || normalizedNoDiacritics.includes('vay ton dong') ||
            normalizedMessage.includes('n·ª£ kh√≥ thu') || normalizedNoDiacritics.includes('no kho thu') ||
            normalizedMessage.includes('vay kh√≥ thu') || normalizedNoDiacritics.includes('vay kho thu') ||
            normalizedMessage.includes('overdue loan') || normalizedMessage.includes('overdue debt') ||
            normalizedMessage.includes('late payment') || normalizedMessage.includes('past due') ||
            normalizedMessage.includes('delinquent') || normalizedMessage.includes('defaulted') ||
            normalizedMessage.includes('bad debt') || normalizedMessage.includes('non-performing')
        ) {
            category = 'loan_overdue';
            logger.info('Keyword analysis: detected loan_overdue', {
                message: normalizedMessage,
                normalizedNoDiacritics,
                matchedKeywords: {
                    noQuaHan: normalizedMessage.includes('n·ª£ qu√° h·∫°n') || normalizedNoDiacritics.includes('no qua han'),
                    quaHan: normalizedMessage.includes('qu√° h·∫°n') || normalizedNoDiacritics.includes('qua han'),
                    vayQuaHan: normalizedMessage.includes('vay qu√° h·∫°n') || normalizedNoDiacritics.includes('vay qua han'),
                    khoanVayQuaHan: normalizedMessage.includes('kho·∫£n vay qu√° h·∫°n') || normalizedNoDiacritics.includes('khoan vay qua han'),
                    noTreHan: normalizedMessage.includes('n·ª£ tr·ªÖ h·∫°n') || normalizedNoDiacritics.includes('no tre han'),
                    treHan: normalizedMessage.includes('tr·ªÖ h·∫°n') || normalizedNoDiacritics.includes('tre han'),
                    noDenHan: normalizedMessage.includes('n·ª£ ƒë·∫øn h·∫°n') || normalizedNoDiacritics.includes('no den han'),
                    denHan: normalizedMessage.includes('ƒë·∫øn h·∫°n') || normalizedNoDiacritics.includes('den han'),
                    hetHan: normalizedMessage.includes('h·∫øt h·∫°n') || normalizedNoDiacritics.includes('het han'),
                    noXau: normalizedMessage.includes('n·ª£ x·∫•u') || normalizedNoDiacritics.includes('no xau'),
                    vayXau: normalizedMessage.includes('vay x·∫•u') || normalizedNoDiacritics.includes('vay xau'),
                    noKhoDoi: normalizedMessage.includes('n·ª£ kh√≥ ƒë√≤i') || normalizedNoDiacritics.includes('no kho doi'),
                    vayKhoDoi: normalizedMessage.includes('vay kh√≥ ƒë√≤i') || normalizedNoDiacritics.includes('vay kho doi'),
                    noChamTra: normalizedMessage.includes('n·ª£ ch·∫≠m tr·∫£') || normalizedNoDiacritics.includes('no cham tra'),
                    vayChamTra: normalizedMessage.includes('vay ch·∫≠m tr·∫£') || normalizedNoDiacritics.includes('vay cham tra'),
                    noTonDong: normalizedMessage.includes('n·ª£ t·ªìn ƒë·ªçng') || normalizedNoDiacritics.includes('no ton dong'),
                    vayTonDong: normalizedMessage.includes('vay t·ªìn ƒë·ªçng') || normalizedNoDiacritics.includes('vay ton dong'),
                    noKhoThu: normalizedMessage.includes('n·ª£ kh√≥ thu') || normalizedNoDiacritics.includes('no kho thu'),
                    vayKhoThu: normalizedMessage.includes('vay kh√≥ thu') || normalizedNoDiacritics.includes('vay kho thu'),
                    overdueEn: normalizedMessage.includes('overdue loan') || normalizedMessage.includes('overdue debt'),
                    latePayment: normalizedMessage.includes('late payment') || normalizedMessage.includes('past due'),
                    delinquent: normalizedMessage.includes('delinquent') || normalizedMessage.includes('defaulted'),
                    badDebt: normalizedMessage.includes('bad debt') || normalizedMessage.includes('non-performing')
                }
            });
        } else if (
            // Kho·∫£n vay c√≤n l·∫°i - ∆∞u ti√™n cao h∆°n
            normalizedMessage.includes('n·ª£ c√≤n l·∫°i') || normalizedNoDiacritics.includes('no con lai') ||
            normalizedMessage.includes('c√≤n n·ª£') || normalizedNoDiacritics.includes('con no') ||
            normalizedMessage.includes('vay c√≤n l·∫°i') || normalizedNoDiacritics.includes('vay con lai') ||
            normalizedMessage.includes('kho·∫£n vay c√≤n l·∫°i') || normalizedNoDiacritics.includes('khoan vay con lai') ||
            // Th√™m x·ª≠ l√Ω l·ªói ƒë√°nh m√°y "alji" thay v√¨ "l·∫°i"
            normalizedMessage.includes('vay c√≤n alji') || normalizedMessage.includes('kho·∫£n vay c√≤n alji') ||
            normalizedMessage.includes('ch∆∞a tr·∫£') || normalizedNoDiacritics.includes('chua tra') ||
            normalizedMessage.includes('ch∆∞a t·∫•t to√°n') || normalizedNoDiacritics.includes('chua tat toan') ||
            normalizedMessage.includes('ch∆∞a thanh to√°n') || normalizedNoDiacritics.includes('chua thanh toan') ||
            normalizedMessage.includes('ch∆∞a tr·∫£ h·∫øt') || normalizedNoDiacritics.includes('chua tra het') ||
            normalizedMessage.includes('remaining debt') || normalizedMessage.includes('outstanding debt') ||
            normalizedMessage.includes('unpaid loan') || normalizedMessage.includes('active loan')
        ) {
            category = 'loan_remaining';
            logger.info('Keyword analysis: detected loan_remaining', {
                message: normalizedMessage,
                normalizedNoDiacritics,
                matchedKeywords: {
                    noConLai: normalizedMessage.includes('n·ª£ c√≤n l·∫°i') || normalizedNoDiacritics.includes('no con lai'),
                    conNo: normalizedMessage.includes('c√≤n n·ª£') || normalizedNoDiacritics.includes('con no'),
                    vayConLai: normalizedMessage.includes('vay c√≤n l·∫°i') || normalizedNoDiacritics.includes('vay con lai'),
                    khoanVayConLai: normalizedMessage.includes('kho·∫£n vay c√≤n l·∫°i') || normalizedNoDiacritics.includes('khoan vay con lai'),
                    vayConAlji: normalizedMessage.includes('vay c√≤n alji') || normalizedMessage.includes('kho·∫£n vay c√≤n alji'),
                    chuaTra: normalizedMessage.includes('ch∆∞a tr·∫£') || normalizedNoDiacritics.includes('chua tra'),
                    chuaTatToan: normalizedMessage.includes('ch∆∞a t·∫•t to√°n') || normalizedNoDiacritics.includes('chua tat toan'),
                    chuaThanhToan: normalizedMessage.includes('ch∆∞a thanh to√°n') || normalizedNoDiacritics.includes('chua thanh toan'),
                    chuaTraHet: normalizedMessage.includes('ch∆∞a tr·∫£ h·∫øt') || normalizedNoDiacritics.includes('chua tra het')
                }
            });
        } else if (
            // Kho·∫£n vay ƒë√£ tr·∫£ h·∫øt
            normalizedMessage.includes('n·ª£ ƒë√£ tr·∫£') || normalizedNoDiacritics.includes('no da tra') ||
            normalizedMessage.includes('ƒë√£ tr·∫£ n·ª£') || normalizedNoDiacritics.includes('da tra no') ||
            normalizedMessage.includes('kho·∫£n vay ƒë√£ tr·∫£') || normalizedNoDiacritics.includes('khoan vay da tra') ||
            normalizedMessage.includes('vay ƒë√£ tr·∫£') || normalizedNoDiacritics.includes('vay da tra') ||
            normalizedMessage.includes('ƒë√£ t·∫•t to√°n') || normalizedNoDiacritics.includes('da tat toan') ||
            normalizedMessage.includes('ƒë√£ thanh to√°n') || normalizedNoDiacritics.includes('da thanh toan') ||
            normalizedMessage.includes('ƒë√£ tr·∫£ h·∫øt') || normalizedNoDiacritics.includes('da tra het') ||
            normalizedMessage.includes('paid debt') || normalizedMessage.includes('paid loan') ||
            normalizedMessage.includes('completed loan') || normalizedMessage.includes('settled debt')
        ) {
            category = 'loan_paid';
            logger.info('Keyword analysis: detected loan_paid', {
                message: normalizedMessage,
                normalizedNoDiacritics,
                matchedKeywords: {
                    noDaTra: normalizedMessage.includes('n·ª£ ƒë√£ tr·∫£') || normalizedNoDiacritics.includes('no da tra'),
                    daTraNo: normalizedMessage.includes('ƒë√£ tr·∫£ n·ª£') || normalizedNoDiacritics.includes('da tra no'),
                    khoanVayDaTra: normalizedMessage.includes('kho·∫£n vay ƒë√£ tr·∫£') || normalizedNoDiacritics.includes('khoan vay da tra'),
                    vayDaTra: normalizedMessage.includes('vay ƒë√£ tr·∫£') || normalizedNoDiacritics.includes('vay da tra'),
                    daTatToan: normalizedMessage.includes('ƒë√£ t·∫•t to√°n') || normalizedNoDiacritics.includes('da tat toan'),
                    daThanhToan: normalizedMessage.includes('ƒë√£ thanh to√°n') || normalizedNoDiacritics.includes('da thanh toan'),
                    daTraHet: normalizedMessage.includes('ƒë√£ tr·∫£ h·∫øt') || normalizedNoDiacritics.includes('da tra het')
                }
            });
        } else if (normalizedMessage.includes('loan') || normalizedMessage.includes('debt') ||
            normalizedMessage.includes('s·ªë n·ª£') || normalizedNoDiacritics.includes('so no') ||
            (normalizedMessage.includes('kho·∫£n vay') && !normalizedMessage.includes('kho·∫£n vay c√≤n l·∫°i') && !normalizedMessage.includes('kho·∫£n vay ƒë√£ tr·∫£')) ||
            (normalizedNoDiacritics.includes('khoan vay') && !normalizedNoDiacritics.includes('khoan vay con lai') && !normalizedNoDiacritics.includes('khoan vay da tra')) ||
            (normalizedMessage.includes('vay') && !normalizedMessage.includes('vay c√≤n l·∫°i') && !normalizedMessage.includes('vay ƒë√£ tr·∫£')) ||
            (normalizedMessage.includes('n·ª£') && !normalizedMessage.includes('n·ª£ c√≤n l·∫°i') && !normalizedMessage.includes('n·ª£ ƒë√£ tr·∫£')) ||
            (normalizedNoDiacritics.includes('no') && !normalizedNoDiacritics.includes('no con lai') && !normalizedNoDiacritics.includes('no da tra'))) {
            category = 'loan';
            logger.info('Keyword analysis: detected general loan', {
                message: normalizedMessage,
                normalizedNoDiacritics,
                excludedSpecificLoanTypes: true
            });
        } else if (normalizedMessage.includes('c·ªï phi·∫øu') || normalizedNoDiacritics.includes('co phieu') ||
            normalizedMessage.includes('stock') || normalizedMessage.includes('ch·ª©ng kho√°n') ||
            normalizedNoDiacritics.includes('chung khoan')) {
            category = 'stock';
            logger.info('Keyword analysis: detected stock investment', { message: normalizedMessage });
        } else if (normalizedMessage.includes('v√†ng') || normalizedNoDiacritics.includes('vang') ||
            normalizedMessage.includes('gold') || normalizedMessage.includes('kim lo·∫°i qu√Ω') ||
            normalizedNoDiacritics.includes('kim loai quy')) {
            category = 'gold';
            logger.info('Keyword analysis: detected gold investment', { message: normalizedMessage });
        } else if (normalizedMessage.includes('b·∫•t ƒë·ªông s·∫£n') || normalizedNoDiacritics.includes('bat dong san') ||
            normalizedMessage.includes('ƒë·∫•t ƒëai') || normalizedNoDiacritics.includes('dat dai') ||
            normalizedMessage.includes('real estate') || normalizedMessage.includes('realestate') ||
            normalizedMessage.includes('nh√† ƒë·∫•t') || normalizedNoDiacritics.includes('nha dat') ||
            normalizedMessage.includes('ƒë·∫•t c·ªßa t√¥i') || normalizedNoDiacritics.includes('dat cua toi') ||
            normalizedMessage.includes('ƒë·∫•t t√¥i') || normalizedNoDiacritics.includes('dat toi') ||
            normalizedMessage.includes('m·∫£nh ƒë·∫•t') || normalizedNoDiacritics.includes('manh dat') ||
            normalizedMessage.includes('l√¥ ƒë·∫•t') || normalizedNoDiacritics.includes('lo dat') ||
            normalizedMessage.includes('th·ª≠a ƒë·∫•t') || normalizedNoDiacritics.includes('thua dat') ||
            normalizedMessage.includes('khu ƒë·∫•t') || normalizedNoDiacritics.includes('khu dat') ||
            normalizedMessage.includes('cƒÉn nh√†') || normalizedNoDiacritics.includes('can nha') ||
            normalizedMessage.includes('ng√¥i nh√†') || normalizedNoDiacritics.includes('ngoi nha') ||
            normalizedMessage.includes('nh√† c·ªßa t√¥i') || normalizedNoDiacritics.includes('nha cua toi') ||
            normalizedMessage.includes('nh√† t√¥i') || normalizedNoDiacritics.includes('nha toi') ||
            normalizedMessage.includes('property') || normalizedMessage.includes('land')) {
            category = 'realestate';
            logger.info('Keyword analysis: detected real estate investment', {
                message: normalizedMessage,
                normalizedNoDiacritics,
                matchedKeywords: {
                    batDongSan: normalizedMessage.includes('b·∫•t ƒë·ªông s·∫£n'),
                    batDongSanNoDiacritics: normalizedNoDiacritics.includes('bat dong san'),
                    datDai: normalizedMessage.includes('ƒë·∫•t ƒëai'),
                    datDaiNoDiacritics: normalizedNoDiacritics.includes('dat dai'),
                    realEstate: normalizedMessage.includes('real estate') || normalizedMessage.includes('realestate'),
                    nhaDat: normalizedMessage.includes('nh√† ƒë·∫•t'),
                    nhaDatNoDiacritics: normalizedNoDiacritics.includes('nha dat'),
                    datCuaToi: normalizedMessage.includes('ƒë·∫•t c·ªßa t√¥i') || normalizedNoDiacritics.includes('dat cua toi'),
                    datToi: normalizedMessage.includes('ƒë·∫•t t√¥i') || normalizedNoDiacritics.includes('dat toi'),
                    manhDat: normalizedMessage.includes('m·∫£nh ƒë·∫•t') || normalizedNoDiacritics.includes('manh dat'),
                    loDat: normalizedMessage.includes('l√¥ ƒë·∫•t') || normalizedNoDiacritics.includes('lo dat'),
                    thuaDat: normalizedMessage.includes('th·ª≠a ƒë·∫•t') || normalizedNoDiacritics.includes('thua dat'),
                    khuDat: normalizedMessage.includes('khu ƒë·∫•t') || normalizedNoDiacritics.includes('khu dat'),
                    canNha: normalizedMessage.includes('cƒÉn nh√†') || normalizedNoDiacritics.includes('can nha'),
                    ngoiNha: normalizedMessage.includes('ng√¥i nh√†') || normalizedNoDiacritics.includes('ngoi nha'),
                    nhaCuaToi: normalizedMessage.includes('nh√† c·ªßa t√¥i') || normalizedNoDiacritics.includes('nha cua toi'),
                    nhaToi: normalizedMessage.includes('nh√† t√¥i') || normalizedNoDiacritics.includes('nha toi'),
                    property: normalizedMessage.includes('property'),
                    land: normalizedMessage.includes('land')
                }
            });
        } else if (normalizedMessage.includes('ƒë·∫ßu t∆∞') || normalizedNoDiacritics.includes('dau tu') ||
            normalizedMessage.includes('investment')) {
            category = 'investment';
            logger.info('Keyword analysis: detected general investment', { message: normalizedMessage });
        } else if (normalizedMessage.includes('s·ªë d∆∞') || normalizedNoDiacritics.includes('so du') ||
            normalizedMessage.includes('balance') || normalizedMessage.includes('t·ªïng quan') ||
            normalizedNoDiacritics.includes('tong quan') || normalizedMessage.includes('overview')) {
            category = 'balance';
        }

        // Ph√¢n t√≠ch th·ªùi gian
        let timeFilter = null;
        const monthNames = {
            'th√°ng 1': 1, 'th√°ng 2': 2, 'th√°ng 3': 3, 'th√°ng 4': 4, 'th√°ng 5': 5, 'th√°ng 6': 6,
            'th√°ng 7': 7, 'th√°ng 8': 8, 'th√°ng 9': 9, 'th√°ng 10': 10, 'th√°ng 11': 11, 'th√°ng 12': 12,
            'january': 1, 'february': 2, 'march': 3, 'april': 4, 'may': 5, 'june': 6,
            'july': 7, 'august': 8, 'september': 9, 'october': 10, 'november': 11, 'december': 12
        };

        for (const [monthName, monthNumber] of Object.entries(monthNames)) {
            if (normalizedMessage.includes(monthName) || normalizedNoDiacritics.includes(monthName)) {
                timeFilter = { type: 'month', value: monthNumber };
                break;
            }
        }

        // Ki·ªÉm tra nƒÉm
        const yearMatch = normalizedMessage.match(/nƒÉm (\d{4})|year (\d{4})/) || normalizedNoDiacritics.match(/nam (\d{4})/);
        if (yearMatch) {
            const year = parseInt(yearMatch[1] || yearMatch[2]);
            if (timeFilter) {
                timeFilter.year = year;
            } else {
                timeFilter = { type: 'year', value: year };
            }
        }

        // Ki·ªÉm tra "h√¥m nay", "tu·∫ßn n√†y", "th√°ng n√†y"
        if (normalizedMessage.includes('h√¥m nay') || normalizedNoDiacritics.includes('hom nay') || normalizedMessage.includes('today')) {
            timeFilter = { type: 'today' };
        } else if (normalizedMessage.includes('tu·∫ßn n√†y') || normalizedNoDiacritics.includes('tuan nay') || normalizedMessage.includes('this week')) {
            timeFilter = { type: 'week' };
        } else if (normalizedMessage.includes('th√°ng n√†y') || normalizedNoDiacritics.includes('thang nay') || normalizedMessage.includes('this month')) {
            timeFilter = { type: 'current_month' };
        }

        return { category, timeFilter };
    }

    /**
     * Tr√≠ch xu·∫•t d·ªØ li·ªáu giao d·ªãch t·ª´ tin nh·∫Øn v·ªõi type c·ª• th·ªÉ
     */
    async extractTransactionData(message, forceType = null) {
        const typeInstruction = forceType ?
            `Lo·∫°i giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† "${forceType}". Ch·ªâ c·∫ßn tr√≠ch xu·∫•t s·ªë ti·ªÅn, danh m·ª•c v√† ghi ch√∫.` :
            `X√°c ƒë·ªãnh lo·∫°i giao d·ªãch: "savings", "income", "expense", ho·∫∑c "loan".`;

        const dataPrompt = `
Ph√¢n t√≠ch c√¢u sau v√† tr√≠ch xu·∫•t d·ªØ li·ªáu giao d·ªãch d·∫°ng JSON: "${message}"

${typeInstruction}

Format JSON c·∫ßn tr·∫£ v·ªÅ:
{
    "type": "${forceType || 'savings/income/expense/loan'}",
    "amount": s·ªë ti·ªÅn (ch·ªâ s·ªë, kh√¥ng c√≥ ƒë∆°n v·ªã),
    "category": "danh m·ª•c ph√π h·ª£p",
    "note": "ghi ch√∫ ho·∫∑c m√¥ t·∫£",
    "date": "YYYY-MM-DD" (n·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ ng√†y h√¥m nay - ${new Date().toISOString().split('T')[0]}),
    "needsCategoryConfirmation": true/false,
    "suggestedCategories": ["danh_m·ª•c_1", "danh_m·ª•c_2", "danh_m·ª•c_3"]
}

**H∆∞·ªõng d·∫´n x·ª≠ l√Ω s·ªë ti·ªÅn:**
- "50k", "50 ngh√¨n" = 50000
- "1 tri·ªáu", "1tr", "1m" = 1000000
- "2.5 tri·ªáu" = 2500000
- "15 tri·ªáu" = 15000000

**Danh m·ª•c ph·ªï bi·∫øn:**
Ti·ªÅn ti·∫øt ki·ªám: "Ti·ªÅn ti·∫øt ki·ªám", "ƒê·ªÉ d√†nh", "Gom g√≥p", "D√†nh d·ª•m"
Thu nh·∫≠p: "L∆∞∆°ng", "Th∆∞·ªüng", "Thu nh·∫≠p kh√°c", "Freelance", "B√°n h√†ng", "Kinh doanh"
Chi ti√™u: "ƒÇn u·ªëng", "Di chuy·ªÉn", "Gi·∫£i tr√≠", "Mua s·∫Øm", "H·ªçc t·∫≠p", "Y t·∫ø", "H√≥a ƒë∆°n", "Kh√°c"
Kho·∫£n vay: "Ng√¢n h√†ng", "B·∫°n b√®", "Gia ƒë√¨nh", "C√¥ng ty", "Kh√°c"

V√≠ d·ª• (s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i ${new Date().toISOString().split('T')[0]}):
- "T√¥i ti·∫øt ki·ªám ƒë∆∞·ª£c 2 tri·ªáu" -> {"type": "savings", "amount": 2000000, "category": "Ti·ªÅn ti·∫øt ki·ªám", "note": "Ti·∫øt ki·ªám ƒë∆∞·ª£c", "date": "${new Date().toISOString().split('T')[0]}"}
- "T√¥i m·ªõi ti·∫øt ki·ªám ƒë∆∞·ª£c 500k" -> {"type": "savings", "amount": 500000, "category": "Ti·ªÅn ti·∫øt ki·ªám", "note": "M·ªõi ti·∫øt ki·ªám ƒë∆∞·ª£c", "date": "${new Date().toISOString().split('T')[0]}"}
- "V·ª´a ti·∫øt ki·ªám 1 tri·ªáu" -> {"type": "savings", "amount": 1000000, "category": "Ti·ªÅn ti·∫øt ki·ªám", "note": "V·ª´a ti·∫øt ki·ªám", "date": "${new Date().toISOString().split('T')[0]}"}
- "ƒê·ªÉ d√†nh 500k h√¥m nay" -> {"type": "savings", "amount": 500000, "category": "Ti·ªÅn ti·∫øt ki·ªám", "note": "ƒê·ªÉ d√†nh", "date": "${new Date().toISOString().split('T')[0]}"}
- "T√¥i v·ª´a mua c√† ph√™ 50k" -> {"type": "expense", "amount": 50000, "category": "ƒÇn u·ªëng", "note": "Mua c√† ph√™", "date": "${new Date().toISOString().split('T')[0]}"}
- "Nh·∫≠n l∆∞∆°ng 15 tri·ªáu h√¥m nay" -> {"type": "income", "amount": 15000000, "category": "L∆∞∆°ng", "note": "Nh·∫≠n l∆∞∆°ng", "date": "${new Date().toISOString().split('T')[0]}"}
- "T√¥i ti√™u 200k mua qu·∫ßn √°o" -> {"type": "expense", "amount": 200000, "category": "Mua s·∫Øm", "note": "Mua qu·∫ßn √°o", "date": "${new Date().toISOString().split('T')[0]}"}
- "Mua xe ƒë·∫°p 4 tri·ªáu" -> {"type": "expense", "amount": 4000000, "category": "Mua s·∫Øm", "note": "Mua xe ƒë·∫°p", "date": "${new Date().toISOString().split('T')[0]}"}
- "Mua √¥ t√¥ 200tr" -> {"type": "expense", "amount": 200000000, "category": "Mua s·∫Øm", "note": "Mua √¥ t√¥", "date": "${new Date().toISOString().split('T')[0]}"}
- "ƒê·ªï xƒÉng 200k" -> {"type": "expense", "amount": 200000, "category": "Di chuy·ªÉn", "note": "ƒê·ªï xƒÉng", "date": "${new Date().toISOString().split('T')[0]}"}
- "ƒê∆∞·ª£c th∆∞·ªüng 2 tri·ªáu" -> {"type": "income", "amount": 2000000, "category": "Th∆∞·ªüng", "note": "ƒê∆∞·ª£c th∆∞·ªüng", "date": "${new Date().toISOString().split('T')[0]}"}
- "Vay b·∫°n 500k" -> {"type": "loan", "amount": 500000, "category": "B·∫°n b√®", "note": "Vay b·∫°n", "date": "${new Date().toISOString().split('T')[0]}"}

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng c√≥ text kh√°c.`;

        try {
            const jsonText = await this.callGeminiAI(dataPrompt, { temperature: 0.1 });
            // L√†m s·∫°ch response ƒë·ªÉ ch·ªâ l·∫•y JSON
            const cleanJson = jsonText.replace(/```json|```/g, '').trim();
            const result = JSON.parse(cleanJson);

            // ∆Øu ti√™n forceType n·∫øu c√≥
            if (forceType) {
                result.type = forceType;
            }

            // ƒê·∫£m b·∫£o date lu√¥n l√† ng√†y hi·ªán t·∫°i n·∫øu kh√¥ng c√≥ ho·∫∑c sai
            const today = new Date().toISOString().split('T')[0];
            if (!result.date || result.date === "2024-01-15" || new Date(result.date) < new Date('2024-10-01')) {
                result.date = today;
                logger.info('Date corrected to today', { originalDate: result.date, correctedDate: today });
            }

            return result;
        } catch (error) {
            logger.error('Transaction data extraction error:', error);
            throw new Error('Kh√¥ng th·ªÉ hi·ªÉu d·ªØ li·ªáu giao d·ªãch. Vui l√≤ng n√≥i r√µ h∆°n.');
        }
    }

    /**
     * L·∫•y d·ªØ li·ªáu t√†i ch√≠nh c·ªßa ng∆∞·ªùi d√πng
     */
    async getUserFinancialData(userId, timeFilter = null) {
        try {
            let dateQuery = {};

            if (timeFilter) {
                const now = new Date();
                switch (timeFilter.type) {
                    case 'today':
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        const tomorrow = new Date(today);
                        tomorrow.setDate(tomorrow.getDate() + 1);
                        dateQuery = { date: { $gte: today, $lt: tomorrow } };
                        break;

                    case 'week':
                        const startOfWeek = new Date(now);
                        startOfWeek.setDate(now.getDate() - now.getDay());
                        startOfWeek.setHours(0, 0, 0, 0);
                        dateQuery = { date: { $gte: startOfWeek } };
                        break;

                    case 'current_month':
                        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
                        dateQuery = { date: { $gte: startOfMonth } };
                        break;

                    case 'month':
                        const year = timeFilter.year || now.getFullYear();
                        const monthStart = new Date(year, timeFilter.value - 1, 1);
                        const monthEnd = new Date(year, timeFilter.value, 1);
                        dateQuery = { date: { $gte: monthStart, $lt: monthEnd } };
                        break;

                    case 'year':
                        const yearStart = new Date(timeFilter.value, 0, 1);
                        const yearEnd = new Date(timeFilter.value + 1, 0, 1);
                        dateQuery = { date: { $gte: yearStart, $lt: yearEnd } };
                        break;
                }
            }

            const baseQuery = { userId, ...dateQuery };
            const createdAtQuery = { userId, ...dateQuery.date ? { createdAt: dateQuery.date } : {} };

            const [transactions, expenses, incomes, budgets, loans, investments] = await Promise.all([
                Transaction.find(baseQuery).sort({ date: -1 }).limit(100),
                Expense.find(baseQuery).sort({ date: -1 }),
                Income.find(baseQuery).sort({ date: -1 }),
                Budget.find(createdAtQuery).sort({ createdAt: -1 }),
                Loan.find(createdAtQuery).sort({ createdAt: -1 }).populate('payments'),
                Investment.find(createdAtQuery).sort({ createdAt: -1 })
            ]);

            // Debug logging ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu
            const totalIncomes = incomes.reduce((sum, inc) => sum + inc.amount, 0);
            const totalExpenses = expenses.reduce((sum, exp) => sum + exp.amount, 0);

            // T√≠nh t·ªïng kho·∫£n vay theo logic c·ªßa frontend (bao g·ªìm l√£i su·∫•t)
            const totalActiveLoans = loans.reduce((total, loan) => {
                // Ch·ªâ t√≠nh nh·ªØng kho·∫£n vay c√≥ tr·∫°ng th√°i ACTIVE
                const loanStatus = loan.status?.toUpperCase() || '';
                if (loanStatus !== 'ACTIVE') {
                    return total;
                }

                // T√≠nh s·ªë ti·ªÅn ƒë√£ tr·∫£
                const totalPaid = loan.payments ? loan.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                // S·ªë ti·ªÅn c√≤n l·∫°i sau khi tr·ª´ ti·ªÅn ƒë√£ tr·∫£
                const remainingAmount = Math.max(0, loan.amount - totalPaid);

                // T√≠nh l√£i su·∫•t gi·ªëng nh∆∞ frontend
                if (loan.startDate && loan.dueDate && loan.interestRate) {
                    const startDate = new Date(loan.startDate);
                    const dueDate = new Date(loan.dueDate);
                    const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                    let interestMultiplier = 0;
                    switch (loan.interestRateType) {
                        case 'DAY':
                            interestMultiplier = diffDays;
                            break;
                        case 'WEEK':
                            interestMultiplier = diffDays / 7;
                            break;
                        case 'MONTH':
                            interestMultiplier = diffDays / 30;
                            break;
                        case 'QUARTER':
                            interestMultiplier = diffDays / 90;
                            break;
                        case 'YEAR':
                            interestMultiplier = diffDays / 365;
                            break;
                        default:
                            interestMultiplier = 0;
                    }

                    // T√≠nh l√£i tr√™n s·ªë ti·ªÅn c√≤n l·∫°i
                    const interestAmount = Math.round(remainingAmount * (loan.interestRate / 100) * interestMultiplier);

                    // T·ªïng ti·ªÅn ph·∫£i tr·∫£ = S·ªë ti·ªÅn c√≤n l·∫°i + Ti·ªÅn l√£i
                    return total + remainingAmount + interestAmount;
                } else {
                    // N·∫øu kh√¥ng c√≥ th√¥ng tin l√£i su·∫•t, ch·ªâ t√≠nh s·ªë ti·ªÅn g·ªëc
                    return total + remainingAmount;
                }
            }, 0);

            logger.info('Financial data summary', {
                userId,
                timeFilter,
                incomesCount: incomes.length,
                expensesCount: expenses.length,
                loansCount: loans.length,
                investmentsCount: investments.length,
                activeLoansCount: loans.filter(l => l.status?.toUpperCase() === 'ACTIVE').length,
                totalIncomes,
                totalExpenses,
                totalActiveLoans,
                totalInvestments: investments.reduce((sum, inv) => sum + (inv.initialInvestment || 0), 0),
                loanDetails: loans.map(loan => {
                    const totalPaid = loan.payments ? loan.payments.reduce((sum, p) => sum + p.amount, 0) : 0;
                    const remainingAmount = Math.max(0, loan.amount - totalPaid);

                    let interestAmount = 0;
                    if (loan.startDate && loan.dueDate && loan.interestRate) {
                        const startDate = new Date(loan.startDate);
                        const dueDate = new Date(loan.dueDate);
                        const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                        let interestMultiplier = 0;
                        switch (loan.interestRateType) {
                            case 'DAY': interestMultiplier = diffDays; break;
                            case 'WEEK': interestMultiplier = diffDays / 7; break;
                            case 'MONTH': interestMultiplier = diffDays / 30; break;
                            case 'QUARTER': interestMultiplier = diffDays / 90; break;
                            case 'YEAR': interestMultiplier = diffDays / 365; break;
                            default: interestMultiplier = 0;
                        }
                        interestAmount = Math.round(remainingAmount * (loan.interestRate / 100) * interestMultiplier);
                    }

                    return {
                        amount: loan.amount,
                        status: loan.status,
                        totalPaid,
                        remainingAmount,
                        interestAmount,
                        totalWithInterest: remainingAmount + interestAmount
                    };
                })
            });

            return {
                transactions,
                expenses,
                incomes,
                budgets,
                loans,
                investments,
                summary: {
                    totalTransactions: transactions.length,
                    totalExpenses,
                    totalIncomes,
                    activeBudgets: budgets.filter(b => b.isActive).length,
                    activeLoans: loans.filter(l => l.status?.toUpperCase() === 'ACTIVE').length,
                    totalInvestments: investments.reduce((sum, inv) => sum + (inv.initialInvestment || 0), 0),
                    totalLoans: totalActiveLoans // S·ª≠ d·ª•ng t·ªïng kho·∫£n vay ƒë√£ t√≠nh ƒë√∫ng
                },
                timeFilter
            };
        } catch (error) {
            logger.error('Error fetching user financial data:', error);
            throw new Error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t√†i ch√≠nh.');
        }
    }

    /**
     * L√†m s·∫°ch message ƒë·ªÉ x·ª≠ l√Ω nh·∫•t qu√°n
     */
    cleanMessage(message) {
        if (!message) return '';

        return message
            .trim() // X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu cu·ªëi
            .normalize('NFC') // Chu·∫©n h√≥a Unicode v·ªÅ d·∫°ng precomposed
            .replace(/\u00A0/g, ' ') // Thay non-breaking space b·∫±ng space th∆∞·ªùng
            .replace(/\u200B/g, '') // X√≥a zero-width space
            .replace(/\u200C/g, '') // X√≥a zero-width non-joiner
            .replace(/\u200D/g, '') // X√≥a zero-width joiner
            .replace(/\uFEFF/g, '') // X√≥a byte order mark
            .replace(/[\u2000-\u200A]/g, ' ') // Thay c√°c lo·∫°i space kh√°c b·∫±ng space th∆∞·ªùng
            .replace(/\s+/g, ' ') // Thay nhi·ªÅu space li√™n ti·∫øp b·∫±ng 1 space
            .trim(); // Trim l·∫°i l·∫ßn n·ªØa
    }

    /**
     * X·ª≠ l√Ω tin nh·∫Øn ch√≠nh t·ª´ ng∆∞·ªùi d√πng
     */
    async handleUserMessage(userId, message, sessionId = null, options = {}) {
        try {
            // Extract AI mode flag from options
            const isAIMode = options.aiMode === true;

            // Debug chi ti·∫øt message
            logger.info('Processing user message', {
                userId,
                message,
                sessionId,
                isAIMode,
                messageLength: message.length,
                trimmedMessage: message.trim(),
                normalizedMessage: message.toLowerCase().trim()
            });

            // L√†m s·∫°ch message ƒë·ªÉ x·ª≠ l√Ω nh·∫•t qu√°n
            const cleanedMessage = this.cleanMessage(message);
            logger.info('Cleaned message', {
                original: message,
                cleaned: cleanedMessage,
                changed: message !== cleanedMessage,
                aiModeEnabled: isAIMode
            });

            // ü§ñ AI Mode: N·∫øu AI mode ƒë∆∞·ª£c b·∫≠t t·ª´ toggle switch
            if (isAIMode) {
                logger.info('ü§ñ AI MODE ACTIVATED - Bypassing normal VanLang Agent logic', {
                    userId,
                    message: cleanedMessage,
                    sessionId,
                    aiMode: true,
                    source: 'Toggle Switch',
                    originalMessage: message,
                    optionsReceived: options
                });

                // Directly call AI without any VanLang Agent processing
                const aiResponse = await this.handleAIDirectMode(userId, cleanedMessage, sessionId);

                logger.info('ü§ñ AI MODE RESPONSE GENERATED', {
                    userId,
                    responseLength: aiResponse.length,
                    responsePreview: aiResponse.substring(0, 100) + '...'
                });

                return aiResponse;
            }

            // üîß Normal Mode: VanLang Agent logic
            logger.info('üîß NORMAL MODE - Using VanLang Agent logic', {
                userId,
                message: cleanedMessage,
                sessionId,
                aiMode: false
            });

            // AGENT INTERACTION: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng.
            // S·ª≠ d·ª•ng NLPService ƒë·ªÉ c√≥ ƒë∆∞·ª£c ph√¢n t√≠ch ban ƒë·∫ßu v·ªõi cleaned message
            const nlpAnalysis = this.nlpService.analyzeIntent(cleanedMessage);
            logger.info('NLPService analysis for handleUserMessage', { nlpAnalysis, message: cleanedMessage });

            let intent = nlpAnalysis.intent; // L·∫•y intent t·ª´ NLPService
            let confidence = nlpAnalysis.confidence;

            // √Ånh x·∫° c√°c intent t·ª´ NLPService sang c√°c intent c·ª• th·ªÉ c·ªßa VanLangAgent
            // V√≠ d·ª•, n·∫øu NLPService tr·∫£ v·ªÅ 'financial_high_confidence', ch√∫ng ta c·∫ßn logic ti·∫øp theo ƒë·ªÉ x√°c ƒë·ªãnh ƒë√≥ l√† 'insert_income', 'expense_query', v.v.
            // Ph·∫ßn n√†y c·∫ßn ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n c√°c 'matchedCategories' t·ª´ nlpAnalysis ho·∫∑c logic b·ªï sung.

            if (intent === 'blocked_topic') {
                return this.getFunnyResponse(); // Ho·∫∑c m·ªôt ph·∫£n h·ªìi ph√π h·ª£p cho n·ªôi dung b·ªã ch·∫∑n
            }
            if (intent === 'greeting') {
                intent = 'greeting.hello';
            }
            if (intent === 'about_bot') {
                intent = 'bot.introduction';
            }

            // N·∫øu NLPService kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c intent ƒë·ªß r√µ r√†ng (v√≠ d·ª•: financial_low_confidence ho·∫∑c unknown)
            // ho·∫∑c l√† m·ªôt intent t√†i ch√≠nh chung chung, th√¨ s·ª≠ d·ª•ng logic ph√¢n t√≠ch intent hi·ªán t·∫°i c·ªßa VanLangAgent
            if (intent === 'unknown' || intent === 'financial_low_confidence' || intent === 'financial_medium_confidence' || intent === 'financial_high_confidence' || !intent) {
                logger.info('NLPService intent is general or low confidence, falling back to VanLangAgent internal intent analysis', { currentIntentFromNLP: intent, confidence });
                intent = await this.analyzeIntent(cleanedMessage); // AGENT INTERACTION: G·ªçi l·∫°i h√†m analyzeIntent n·ªôi b·ªô n·∫øu NLPService kh√¥ng ƒë·ªß ch·∫Øc ch·∫Øn ho·∫∑c l√† intent t√†i ch√≠nh chung.
                logger.info('VanLangAgent internal analyzeIntent result', {
                    intentFromInternal: intent,
                    message: cleanedMessage
                });
            }

            logger.info('Intent after NLP analysis', {
                originalIntent: nlpAnalysis.intent,
                finalIntent: intent,
                message,
                confidence
            });

            logger.info('analyzeIntent result', {
                intent,
                message,
                isInsertIntent: intent && intent.startsWith('insert_'),
                isCalculationIntent: intent && intent.includes('calculation'),
                isDetailIntent: intent && intent.includes('detail')
            });

            // Ki·ªÉm tra context tr∆∞·ªõc ƒë·ªÉ x·ª≠ l√Ω category confirmation
            const context = this.conversationContext.get(userId);
            if (context && context.type === 'category_confirmation' && (Date.now() - context.timestamp < 300000)) { // 5 ph√∫t
                return await this.handleCategoryConfirmation(userId, message, context);
            }

            // Ch·ªâ s·ª≠ d·ª•ng keyword analysis cho GET operations n·∫øu analyzeIntent kh√¥ng tr·∫£ v·ªÅ POST intent ho·∫∑c special intent
            // KH√îNG OVERRIDE c√°c intent ƒë·∫∑c bi·ªát nh∆∞ filter_query, time_query, calculation_query, statistics_query
            if (!intent || (!intent.startsWith('insert_') && !intent.includes('calculation') && !intent.includes('detail') && !intent.includes('statistics') && intent !== 'filter_query' && intent !== 'time_query')) {
                const { category } = this.analyzeKeywordsAndTime(cleanedMessage);

                logger.info('Keyword analysis result', {
                    message: cleanedMessage,
                    category,
                    intent: intent || 'none'
                });

                if (category === 'savings') {
                    intent = 'savings_query';
                } else if (category === 'savings_income') {
                    intent = 'savings_income_query'; // Intent m·ªõi cho ti·ªÅn ti·∫øt ki·ªám trong thu nh·∫≠p
                } else if (category === 'income') {
                    intent = 'income_query';
                } else if (category === 'expense') {
                    intent = 'expense_query';
                } else if (category === 'loan') {
                    intent = 'loan_query';
                } else if (category === 'loan_paid') {
                    intent = 'loan_paid_query';
                } else if (category === 'loan_overdue') {
                    intent = 'loan_overdue_query';
                } else if (category === 'loan_remaining') {
                    intent = 'loan_remaining_query';
                } else if (category === 'stock') {
                    intent = 'stock_query';
                } else if (category === 'gold') {
                    intent = 'gold_query';
                } else if (category === 'realestate') {
                    intent = 'realestate_query';
                } else if (category === 'investment') {
                    intent = 'investment_query';
                } else if (category === 'balance') {
                    intent = 'balance_query';
                }
            }

            logger.info('Intent analyzed', {
                intent,
                message,
                normalizedMessage: message.toLowerCase().trim(),
                keywordAnalysis: {
                    containsBankSavings: message.toLowerCase().includes('ti·∫øt ki·ªám ng√¢n h√†ng'),
                    containsSavingsInIncome: message.toLowerCase().includes('ti·∫øt ki·ªám trong thu nh·∫≠p'),
                    containsGeneralSavings: message.toLowerCase().includes('ti·∫øt ki·ªám'),
                    exactMatch: message.toLowerCase().trim() === 'ti·ªÅn ti·∫øt ki·ªám',
                    // Debug cho realestate
                    containsBatDongSan: message.toLowerCase().includes('b·∫•t ƒë·ªông s·∫£n') || message.toLowerCase().includes('bat dong san'),
                    containsDatDai: message.toLowerCase().includes('ƒë·∫•t ƒëai') || message.toLowerCase().includes('dat dai'),
                    containsRealEstate: message.toLowerCase().includes('real estate') || message.toLowerCase().includes('realestate'),
                    containsNhaDat: message.toLowerCase().includes('nh√† ƒë·∫•t') || message.toLowerCase().includes('nha dat'),
                    containsDauTu: message.toLowerCase().includes('ƒë·∫ßu t∆∞') || message.toLowerCase().includes('dau tu')
                }
            });

            switch (intent) {
                // Nh√≥m POST - Th√™m d·ªØ li·ªáu
                case 'insert_savings':
                    return await this.handleInsertTransaction(userId, message, sessionId, 'savings');

                // AGENT INTERACTION: N·∫øu intent l√† 'insert_income', ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn h√†m x·ª≠ l√Ω th√™m giao d·ªãch thu nh·∫≠p.
                case 'insert_income':
                    return await this.handleInsertTransaction(userId, message, sessionId, 'income');

                case 'insert_expense':
                    return await this.handleInsertTransaction(userId, message, sessionId, 'expense');

                case 'insert_loan':
                    return await this.handleInsertTransaction(userId, message, sessionId, 'loan');

                // Nh√≥m Query - Truy v·∫•n th√¥ng tin
                case 'income_query':
                    return await this.handleSpecificQuery(userId, cleanedMessage, 'income');

                case 'expense_query':
                    return await this.handleSpecificQuery(userId, cleanedMessage, 'expense');

                case 'loan_query':
                    return await this.handleSpecificQuery(userId, cleanedMessage, 'loan');

                case 'loan_paid_query':
                    return await this.handleSpecificQuery(userId, cleanedMessage, 'loan_paid');

                case 'loan_overdue_query':
                    return await this.handleSpecificQuery(userId, cleanedMessage, 'loan_overdue');

                case 'loan_remaining_query':
                    return await this.handleSpecificQuery(userId, cleanedMessage, 'loan_remaining');

                case 'investment_query':
                    return await this.handleSpecificQuery(userId, message, 'investment');

                case 'stock_query':
                    return await this.handleSpecificQuery(userId, message, 'stock');

                case 'gold_query':
                    return await this.handleSpecificQuery(userId, message, 'gold');

                case 'realestate_query':
                    return await this.handleSpecificQuery(userId, message, 'realestate');

                case 'savings_query':
                    return await this.handleSpecificQuery(userId, message, 'savings');

                case 'savings_income_query':
                    return await this.handleSpecificQuery(userId, message, 'savings_income');

                case 'balance_query':
                    return await this.handleBalanceQuery(userId, message);

                // Nh√≥m Detail - Xem chi ti·∫øt
                case 'detail_query':
                    return await this.handleDetailQuery(userId, message);

                // Nh√≥m Filter - T√¨m ki·∫øm c√≥ ƒëi·ªÅu ki·ªán
                case 'filter_query':
                    return await this.handleFilterQuery(userId, message);

                // Nh√≥m Stock - Truy v·∫•n c·ªï phi·∫øu
                case 'stock_query':
                    return await this.handleStockQuery(userId, message);

                // Nh√≥m Statistics - Th·ªëng k√™ n√¢ng cao
                case 'statistics_query':
                    return await this.handleStatisticsQuery(userId, message);

                // Nh√≥m Time - Truy v·∫•n theo th·ªùi gian
                case 'time_query':
                    return await this.handleTimeQuery(userId, message);

                // Nh√≥m Calculation - Enhanced v·ªõi 2 lo·∫°i t√≠nh to√°n
                case 'general_calculation':
                    return await this.handleGeneralCalculation(userId, message);

                case 'financial_calculation':
                    return await this.handleFinancialCalculation(userId, message);

                case 'calculation_query': // Legacy support
                    return await this.handleCalculationQuery(userId, message);

                // Nh√≥m Analysis - Ph√¢n t√≠ch
                case 'analyze':
                    return await this.handleAnalyzeFinances(userId, message);

                // Nh√≥m Advice - L·ªùi khuy√™n
                case 'advice':
                    return await this.handleFinancialAdvice(userId, message);

                // Nh√≥m Basic - C∆° b·∫£n (d·ª±a tr√™n training data)
                case 'greeting':
                case 'greeting.hello':
                    return this.getGreetingResponse();

                case 'greeting.farewell':
                    return this.getFarewellResponse();

                case 'bot.introduction':
                    return this.getBotIntroduction();

                case 'bot.capabilities':
                    return this.getBotCapabilities();

                case 'common.time_date':
                    return this.getCurrentDateTime();

                case 'auth.require':
                    return this.getAuthRequiredResponse();

                case 'chatbot.scope':
                    return this.getChatbotScope();

                case 'security.privacy':
                    return this.getSecurityInfo();

                case 'funny.chat':
                    return this.getFunnyResponse();

                default:
                    // Ki·ªÉm tra n·∫øu user ch·ªâ n√≥i t√™n category m√† kh√¥ng c√≥ context
                    const normalizedMessage = message.toLowerCase().trim();
                    const categoryKeywords = ['mua s·∫Øm', 'ƒÉn u·ªëng', 'di chuy·ªÉn', 'gi·∫£i tr√≠', 'h·ªçc t·∫≠p', 'y t·∫ø', 'h√≥a ƒë∆°n'];

                    if (categoryKeywords.includes(normalizedMessage)) {
                        return `Kh√¥ng th·ªÉ l∆∞u chi ti√™u. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n nh∆∞: "T√¥i mua c√† ph√™ 50k" ho·∫∑c "Chi ti√™u ƒÉn u·ªëng 200 ngh√¨n"?`;
                    }

                    return await this.handleGeneralQuestion(userId, message);
            }
        } catch (error) {
            logger.error('Error handling user message:', error);
            return 'Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * X·ª≠ l√Ω th√™m giao d·ªãch
     */
    async handleInsertTransaction(userId, message, sessionId, forceType = null) {
        // AGENT INTERACTION: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω logic th√™m giao d·ªãch (bao g·ªìm c·∫£ thu nh·∫≠p).
        try {
            const transactionData = await this.extractTransactionData(message, forceType);

            // ∆Øu ti√™n forceType n·∫øu c√≥
            if (forceType) {
                transactionData.type = forceType;
            }

            // Ki·ªÉm tra n·∫øu c·∫ßn x√°c nh·∫≠n category
            if (transactionData.needsCategoryConfirmation && transactionData.suggestedCategories && transactionData.suggestedCategories.length > 0) {
                // L∆∞u context ƒë·ªÉ x·ª≠ l√Ω response sau
                this.conversationContext.set(userId, {
                    type: 'category_confirmation',
                    transactionData,
                    forceType,
                    sessionId,
                    timestamp: Date.now()
                });

                const typeNames = {
                    'savings': 'ti·ªÅn ti·∫øt ki·ªám',
                    'income': 'thu nh·∫≠p',
                    'expense': 'chi ti√™u',
                    'loan': 'kho·∫£n vay'
                };

                let confirmationMessage = `ü§î **T√¥i c·∫ßn x√°c nh·∫≠n danh m·ª•c cho ${typeNames[transactionData.type]} n√†y:**\n\n`;
                confirmationMessage += `üí∞ **S·ªë ti·ªÅn:** ${transactionData.amount.toLocaleString('vi-VN')} VND\n`;
                confirmationMessage += `üìù **M√¥ t·∫£:** ${transactionData.note}\n\n`;
                confirmationMessage += `üìÇ **B·∫°n mu·ªën l∆∞u v√†o danh m·ª•c n√†o?**\n`;

                transactionData.suggestedCategories.forEach((category, index) => {
                    confirmationMessage += `${index + 1}. ${category}\n`;
                });

                confirmationMessage += `\nüí° **H∆∞·ªõng d·∫´n:** Tr·∫£ l·ªùi s·ªë th·ª© t·ª± (VD: "1") ho·∫∑c n√≥i t√™n danh m·ª•c (VD: "${transactionData.suggestedCategories[0]}")`;

                return confirmationMessage;
            }

            // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho savings - l∆∞u v√†o Income collection
            if (forceType === 'savings' || transactionData.type === 'savings') {
                const Income = (await import('../models/incomeModel.js')).default;

                const income = new Income({
                    userId,
                    amount: transactionData.amount,
                    description: transactionData.note || 'Ti·ªÅn ti·∫øt ki·ªám',
                    category: 'Ti·ªÅn ti·∫øt ki·ªám',
                    date: new Date(transactionData.date)
                });

                await income.save();
                logger.info('Savings saved to Income collection', { incomeId: income._id, amount: transactionData.amount });

                // T·∫°o notification cho savings
                try {
                    const notification = await Notification.createIncomeNotification(income);
                    if (socketManager && socketManager.to) {
                        socketManager.to(userId).emit('notification', notification);
                    }
                    logger.info('Notification created for agent savings', { notificationId: notification._id });
                } catch (notificationError) {
                    logger.error('Error creating notification for agent savings:', notificationError);
                }

                // T·∫°o response cho savings
                const successMessage = `‚úÖ **ƒê√£ l∆∞u ti·ªÅn ti·∫øt ki·ªám th√†nh c√¥ng!**

üí∞ **Th√¥ng tin giao d·ªãch:**
‚Ä¢ Lo·∫°i: Ti·ªÅn ti·∫øt ki·ªám
‚Ä¢ S·ªë ti·ªÅn: ${transactionData.amount.toLocaleString('vi-VN')} VND
‚Ä¢ Danh m·ª•c: Ti·ªÅn ti·∫øt ki·ªám
‚Ä¢ Ng√†y: ${new Date(transactionData.date).toLocaleDateString('vi-VN')}
${transactionData.note ? `‚Ä¢ Ghi ch√∫: ${transactionData.note}` : ''}

üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ:
‚Ä¢ H·ªèi "ti·ªÅn ti·∫øt ki·ªám c·ªßa t√¥i" ƒë·ªÉ xem t·ªïng quan
‚Ä¢ N√≥i "th√™m ti·ªÅn ti·∫øt ki·ªám kh√°c" ƒë·ªÉ ti·∫øp t·ª•c
‚Ä¢ H·ªèi "s·ªë d∆∞ c·ªßa t√¥i" ƒë·ªÉ xem t√¨nh h√¨nh t√†i ch√≠nh`;

                return successMessage;
            }

            // X·ª≠ l√Ω c√°c lo·∫°i giao d·ªãch kh√°c (income, expense, loan)
            const transaction = new Transaction({
                userId,
                ...transactionData,
                createdByAgent: true,
                agentSessionId: sessionId
            });

            await transaction.save();

            // ƒê·ªìng b·ªô v·ªõi models hi·ªán t·∫°i
            // AGENT INTERACTION: Sau khi l∆∞u transaction, ƒë·ªìng b·ªô v·ªõi c√°c model c·ª• th·ªÉ (Income, Expense, Loan).
            // N·∫øu transactionData.type l√† 'income', h√†m syncWithExistingModels s·∫Ω t·∫°o/c·∫≠p nh·∫≠t b·∫£n ghi trong Income model.
            await transaction.syncWithExistingModels();

            logger.info('Transaction created by agent', { userId, transactionId: transaction._id, type: transactionData.type });

            // T·∫°o notification cho transaction
            try {
                let notification = null;
                if (transactionData.type === 'income') {
                    // T√¨m income record ƒë√£ ƒë∆∞·ª£c t·∫°o
                    const income = await Income.findOne({
                        userId,
                        amount: transactionData.amount,
                        description: transactionData.note
                    }).sort({ createdAt: -1 });
                    if (income) {
                        notification = await Notification.createIncomeNotification(income);
                    }
                } else if (transactionData.type === 'expense') {
                    // T√¨m expense record ƒë√£ ƒë∆∞·ª£c t·∫°o
                    const expense = await Expense.findOne({
                        userId,
                        amount: transactionData.amount,
                        description: transactionData.note
                    }).sort({ createdAt: -1 });
                    if (expense) {
                        notification = await Notification.createExpenseNotification(expense);
                    }
                } else if (transactionData.type === 'loan') {
                    // T√¨m loan record ƒë√£ ƒë∆∞·ª£c t·∫°o
                    const loan = await Loan.findOne({
                        userId,
                        amount: transactionData.amount,
                        description: transactionData.note
                    }).sort({ createdAt: -1 });
                    if (loan) {
                        notification = await Notification.createLoanNotification(loan);
                    }
                }

                if (notification && socketManager && socketManager.to) {
                    socketManager.to(userId).emit('notification', notification);
                    logger.info('Notification created for agent transaction', {
                        notificationId: notification._id,
                        type: transactionData.type
                    });
                }
            } catch (notificationError) {
                logger.error('Error creating notification for agent transaction:', notificationError);
            }

            const typeNames = {
                'savings': 'ti·ªÅn ti·∫øt ki·ªám',
                'income': 'thu nh·∫≠p',
                'expense': 'chi ti√™u',
                'loan': 'kho·∫£n vay'
            };

            const emoji = {
                'savings': 'üí∞',
                'income': 'üí∞',
                'expense': 'üí∏',
                'loan': 'üè¶'
            };

            const successMessage = `‚úÖ **ƒê√£ l∆∞u ${typeNames[transactionData.type]} th√†nh c√¥ng!**

${emoji[transactionData.type]} **Th√¥ng tin giao d·ªãch:**
‚Ä¢ Lo·∫°i: ${typeNames[transactionData.type]?.charAt(0).toUpperCase() + typeNames[transactionData.type]?.slice(1)}
‚Ä¢ S·ªë ti·ªÅn: ${transaction.formattedAmount || transactionData.amount.toLocaleString('vi-VN')} VND
‚Ä¢ Danh m·ª•c: ${transactionData.category}
‚Ä¢ Ng√†y: ${new Date(transactionData.date).toLocaleDateString('vi-VN')}
${transactionData.note ? `‚Ä¢ Ghi ch√∫: ${transactionData.note}` : ''}

üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ:
‚Ä¢ H·ªèi "${typeNames[transactionData.type]} c·ªßa t√¥i" ƒë·ªÉ xem t·ªïng quan
‚Ä¢ N√≥i "th√™m ${typeNames[transactionData.type]} kh√°c" ƒë·ªÉ ti·∫øp t·ª•c
‚Ä¢ H·ªèi "s·ªë d∆∞ c·ªßa t√¥i" ƒë·ªÉ xem t√¨nh h√¨nh t√†i ch√≠nh`;

            return successMessage;

        } catch (error) {
            logger.error('Error inserting transaction:', error);

            const errorMessages = {
                'savings': 'Kh√¥ng th·ªÉ l∆∞u ti·ªÅn ti·∫øt ki·ªám. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n nh∆∞: "T√¥i ti·∫øt ki·ªám ƒë∆∞·ª£c 2 tri·ªáu" ho·∫∑c "ƒê·ªÉ d√†nh 500k h√¥m nay"?',
                'income': 'Kh√¥ng th·ªÉ l∆∞u thu nh·∫≠p. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n nh∆∞: "T√¥i nh·∫≠n l∆∞∆°ng 15 tri·ªáu" ho·∫∑c "ƒê∆∞·ª£c th∆∞·ªüng 2 tri·ªáu"?',
                'expense': 'Kh√¥ng th·ªÉ l∆∞u chi ti√™u. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n nh∆∞: "T√¥i mua c√† ph√™ 50k" ho·∫∑c "Chi ti√™u ƒÉn u·ªëng 200 ngh√¨n"?',
                'loan': 'Kh√¥ng th·ªÉ l∆∞u kho·∫£n vay. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n nh∆∞: "T√¥i vay ng√¢n h√†ng 5 tri·ªáu" ho·∫∑c "M∆∞·ª£n b·∫°n 500k"?'
            };

            return errorMessages[forceType] || 'Kh√¥ng th·ªÉ l∆∞u giao d·ªãch. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ s·ªë ti·ªÅn, lo·∫°i giao d·ªãch v√† m√¥ t·∫£ kh√¥ng?';
        }
    }

    /**
     * Ph√¢n t√≠ch t√†i ch√≠nh
     */
    async handleAnalyzeFinances(userId, message) {
        try {
            // Ph√¢n t√≠ch t·ª´ kh√≥a v√† th·ªùi gian t·ª´ tin nh·∫Øn
            const { timeFilter } = this.analyzeKeywordsAndTime(message);
            const financialData = await this.getUserFinancialData(userId, timeFilter);

            let timeDescription = timeFilter ?
                (timeFilter.type === 'month' ? `th√°ng ${timeFilter.value}` :
                    timeFilter.type === 'current_month' ? 'th√°ng n√†y' :
                        timeFilter.type === 'today' ? 'h√¥m nay' : 'th·ªùi gian ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh') : 't·ªïng c·ªông';

            const analysisPrompt = `
D·ª±a tr√™n d·ªØ li·ªáu t√†i ch√≠nh ${timeDescription} sau, h√£y ph√¢n t√≠ch v√† ƒë∆∞a ra l·ªùi khuy√™n:

T·ªïng quan ${timeDescription}:
- T·ªïng thu nh·∫≠p: ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND
- T·ªïng chi ti√™u: ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND
- S·ªë d∆∞: ${(financialData.summary.totalIncomes - financialData.summary.totalExpenses).toLocaleString('vi-VN')} VND
- S·ªë ng√¢n s√°ch ƒëang ho·∫°t ƒë·ªông: ${financialData.summary.activeBudgets}
- T·ªïng ƒë·∫ßu t∆∞: ${financialData.summary.totalInvestments.toLocaleString('vi-VN')} VND
- T·ªïng kho·∫£n vay: ${financialData.summary.totalLoans.toLocaleString('vi-VN')} VND

C√¢u h·ªèi c·ª• th·ªÉ: "${message}"

H√£y ƒë∆∞a ra ph√¢n t√≠ch chi ti·∫øt v√† l·ªùi khuy√™n th·ª±c t·∫ø.`;

            const analysis = await this.callGeminiAI(analysisPrompt);
            return `üìä **Ph√¢n t√≠ch t√†i ch√≠nh ${timeDescription} c·ªßa b·∫°n:**\n\n${analysis}`;

        } catch (error) {
            logger.error('Error analyzing finances:', error);
            return 'Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * üîç T√çNH NƒÇNG 4: X·ª≠ l√Ω truy v·∫•n l·ªçc n√¢ng cao
     */
    async handleFilterQuery(userId, message) {
        try {
            logger.info('üîç Advanced Filter Query detected', { userId, message });

            // üö® DEBUG: Log parseFilterConditions result
            const filterAnalysis = this.parseFilterConditions(message);
            logger.info('üö® DEBUG parseFilterConditions result:', filterAnalysis);

            if (!filterAnalysis.isValid) {
                logger.error('üö® DEBUG: filterAnalysis.isValid is FALSE!', {
                    isValid: filterAnalysis.isValid,
                    dataType: filterAnalysis.dataType,
                    operator: filterAnalysis.operator,
                    amount: filterAnalysis.amount
                });
                return `‚ùå **Kh√¥ng th·ªÉ hi·ªÉu ƒëi·ªÅu ki·ªán l·ªçc.**\n\nüí° **V√≠ d·ª• h·ª£p l·ªá:**\n‚Ä¢ "Chi ti√™u tr√™n 1 tri·ªáu"\n‚Ä¢ "Thu nh·∫≠p d∆∞·ªõi 500k"\n‚Ä¢ "Kho·∫£n vay cao nh·∫•t"\n‚Ä¢ "Chi ti√™u th·∫•p nh·∫•t"`;
            }

            logger.info('üéâ DEBUG: filterAnalysis.isValid is TRUE! Proceeding with filter...');

            // L·∫•y d·ªØ li·ªáu v√† √°p d·ª•ng filter
            const results = await this.applyAdvancedFilter(userId, filterAnalysis);

            return this.formatFilterResults(results, filterAnalysis);

        } catch (error) {
            logger.error('Error in handleFilterQuery:', error);
            return 'Xin l·ªói, t√¥i g·∫∑p l·ªói khi l·ªçc d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * ‚è∞ T√çNH NƒÇNG 6: X·ª≠ l√Ω truy v·∫•n theo th·ªùi gian
     */
    async handleTimeQuery(userId, message) {
        try {
            logger.info('‚è∞ Time-based Query detected', { userId, message });

            // Ph√¢n t√≠ch kho·∫£ng th·ªùi gian
            const timeAnalysis = this.parseTimeConditions(message);

            if (!timeAnalysis.isValid) {
                return `‚ùå **Kh√¥ng th·ªÉ hi·ªÉu kho·∫£ng th·ªùi gian.**\n\nüí° **V√≠ d·ª• h·ª£p l·ªá:**\n‚Ä¢ "Thu nh·∫≠p tu·∫ßn n√†y"\n‚Ä¢ "Chi ti√™u th√°ng tr∆∞·ªõc"\n‚Ä¢ "Kho·∫£n vay h√¥m nay"\n‚Ä¢ "T·ªïng quan t√†i ch√≠nh th√°ng n√†y"`;
            }

            // L·∫•y d·ªØ li·ªáu theo th·ªùi gian
            const results = await this.getDataByTimeRange(userId, timeAnalysis);

            return this.formatTimeResults(results, timeAnalysis);

        } catch (error) {
            logger.error('Error in handleTimeQuery:', error);
            return 'Xin l·ªói, t√¥i g·∫∑p l·ªói khi truy v·∫•n d·ªØ li·ªáu theo th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * X·ª≠ l√Ω truy v·∫•n c·ª• th·ªÉ theo t·ª´ kh√≥a (thu nh·∫≠p, chi ti√™u, kho·∫£n vay)
     */
    async handleSpecificQuery(userId, message, category) {
        try {
            // Ph√¢n t√≠ch t·ª´ kh√≥a v√† th·ªùi gian
            const { timeFilter } = this.analyzeKeywordsAndTime(message);

            // L·∫•y d·ªØ li·ªáu t√†i ch√≠nh v·ªõi b·ªô l·ªçc th·ªùi gian
            const financialData = await this.getUserFinancialData(userId, timeFilter);

            let response = '';
            let timeDescription = '';

            // T·∫°o m√¥ t·∫£ th·ªùi gian
            if (timeFilter) {
                switch (timeFilter.type) {
                    case 'today':
                        timeDescription = 'h√¥m nay';
                        break;
                    case 'week':
                        timeDescription = 'tu·∫ßn n√†y';
                        break;
                    case 'current_month':
                        timeDescription = 'th√°ng n√†y';
                        break;
                    case 'month':
                        const monthNames = ['', 'th√°ng 1', 'th√°ng 2', 'th√°ng 3', 'th√°ng 4', 'th√°ng 5', 'th√°ng 6',
                            'th√°ng 7', 'th√°ng 8', 'th√°ng 9', 'th√°ng 10', 'th√°ng 11', 'th√°ng 12'];
                        timeDescription = `${monthNames[timeFilter.value]}${timeFilter.year ? ` nƒÉm ${timeFilter.year}` : ''}`;
                        break;
                    case 'year':
                        timeDescription = `nƒÉm ${timeFilter.value}`;
                        break;
                    default:
                        timeDescription = 'th·ªùi gian ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh';
                }
            } else {
                timeDescription = 't·ªïng c·ªông';
            }

            // X·ª≠ l√Ω theo t·ª´ng lo·∫°i
            switch (category) {
                case 'income':
                    // Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang h·ªèi v·ªÅ ti·∫øt ki·ªám kh√¥ng
                    const isAskingAboutSavings = message.toLowerCase().includes('ti·∫øt ki·ªám') ||
                        message.toLowerCase().includes('saving') ||
                        message.toLowerCase().includes('tiet kiem');

                    let incomesToShow = financialData.incomes;
                    let totalIncomeToShow = financialData.summary.totalIncomes;
                    let titleText = 'thu nh·∫≠p';

                    if (isAskingAboutSavings) {
                        // L·ªçc ch·ªâ c√°c kho·∫£n thu nh·∫≠p c√≥ category li√™n quan ƒë·∫øn ti·∫øt ki·ªám
                        incomesToShow = financialData.incomes.filter(income => {
                            const categoryLower = income.category?.toLowerCase() || '';
                            const descriptionLower = income.description?.toLowerCase() || '';

                            return categoryLower.includes('ti·∫øt ki·ªám') ||
                                categoryLower.includes('saving') ||
                                categoryLower.includes('tiet kiem') ||
                                categoryLower === 'ti·ªÅn ti·∫øt ki·ªám' ||
                                categoryLower === 'tien tiet kiem' ||
                                descriptionLower.includes('ti·∫øt ki·ªám') ||
                                descriptionLower.includes('saving') ||
                                descriptionLower.includes('tiet kiem');
                        });
                        totalIncomeToShow = incomesToShow.reduce((sum, income) => sum + income.amount, 0);
                        titleText = 'ti·ªÅn ti·∫øt ki·ªám';

                        logger.info('Income savings filter debug', {
                            userId,
                            totalIncomes: financialData.incomes.length,
                            filteredSavings: incomesToShow.length,
                            totalSavingsAmount: totalIncomeToShow,
                            allIncomeCategories: financialData.incomes.map(i => i.category),
                            filteredCategories: incomesToShow.map(i => i.category)
                        });
                    }

                    response = `üí∞ **T·ªïng ${titleText} ${timeDescription}:** ${totalIncomeToShow.toLocaleString('vi-VN')} VND\n\n`;

                    if (incomesToShow.length > 0) {
                        response += `üìä **Chi ti·∫øt ${titleText}:**\n`;
                        incomesToShow.slice(0, 5).forEach((income, index) => {
                            const date = new Date(income.date).toLocaleDateString('vi-VN');
                            const category = income.category || 'Kh√¥ng c√≥ danh m·ª•c';
                            response += `${index + 1}. ${income.description || 'Thu nh·∫≠p'}: ${income.amount.toLocaleString('vi-VN')} VND - ${category} (${date})\n`;
                        });

                        if (incomesToShow.length > 5) {
                            response += `\n... v√† ${incomesToShow.length - 5} kho·∫£n ${titleText} kh√°c.`;
                            // L∆∞u context ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu xem chi ti·∫øt
                            this.conversationContext.set(userId, {
                                type: 'income',
                                data: incomesToShow,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `\n\nüí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*`;
                        }
                    } else {
                        if (isAskingAboutSavings) {
                            response += `Kh√¥ng c√≥ d·ªØ li·ªáu ${titleText} ${timeDescription}.\n\n`;
                            response += `üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ th√™m ti·∫øt ki·ªám b·∫±ng c√°ch:\n`;
                            response += `‚Ä¢ V√†o m·ª•c Thu nh·∫≠p v√† ch·ªçn danh m·ª•c "Ti·ªÅn ti·∫øt ki·ªám"\n`;
                            response += `‚Ä¢ Ho·∫∑c n√≥i v·ªõi t√¥i: "T√¥i ti·∫øt ki·ªám ƒë∆∞·ª£c 1 tri·ªáu h√¥m nay"`;
                        } else {
                            response += `Kh√¥ng c√≥ d·ªØ li·ªáu ${titleText} ${timeDescription}.`;
                        }
                    }
                    break;

                case 'expense':
                    const totalExpense = financialData.summary.totalExpenses;
                    response = `üí∏ **T·ªïng chi ti√™u ${timeDescription}:** ${totalExpense.toLocaleString('vi-VN')} VND\n\n`;

                    if (financialData.expenses.length > 0) {
                        response += `üìä **Chi ti·∫øt chi ti√™u:**\n`;
                        financialData.expenses.slice(0, 5).forEach((expense, index) => {
                            const date = new Date(expense.date).toLocaleDateString('vi-VN');
                            response += `${index + 1}. ${expense.description || 'Chi ti√™u'}: ${expense.amount.toLocaleString('vi-VN')} VND (${date})\n`;
                        });

                        if (financialData.expenses.length > 5) {
                            response += `\n... v√† ${financialData.expenses.length - 5} kho·∫£n chi ti√™u kh√°c.`;
                            // L∆∞u context ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu xem chi ti·∫øt
                            this.conversationContext.set(userId, {
                                type: 'expense',
                                data: financialData.expenses,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `\n\nüí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*`;
                        }
                    } else {
                        response += `Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u ${timeDescription}.`;
                    }
                    break;

                case 'loan':
                    // T√≠nh to√°n chi ti·∫øt cho t·ªïng quan
                    let totalOriginalAmount = 0;
                    let totalPaidAmount = 0;
                    let totalRemainingAmount = 0;
                    let totalInterestAmount = 0;

                    financialData.loans.forEach(loan => {
                        const totalPaid = loan.payments ? loan.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                        const remainingAmount = Math.max(0, loan.amount - totalPaid);

                        totalOriginalAmount += loan.amount;
                        totalPaidAmount += totalPaid;
                        totalRemainingAmount += remainingAmount;

                        // T√≠nh l√£i cho kho·∫£n vay ƒëang ho·∫°t ƒë·ªông
                        if (loan.startDate && loan.dueDate && loan.interestRate && loan.status?.toUpperCase() === 'ACTIVE') {
                            const startDate = new Date(loan.startDate);
                            const dueDate = new Date(loan.dueDate);
                            const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                            let interestMultiplier = 0;
                            switch (loan.interestRateType) {
                                case 'DAY': interestMultiplier = diffDays; break;
                                case 'WEEK': interestMultiplier = diffDays / 7; break;
                                case 'MONTH': interestMultiplier = diffDays / 30; break;
                                case 'QUARTER': interestMultiplier = diffDays / 90; break;
                                case 'YEAR': interestMultiplier = diffDays / 365; break;
                            }
                            const interestAmount = Math.round(remainingAmount * (loan.interestRate / 100) * interestMultiplier);
                            totalInterestAmount += interestAmount;
                        }
                    });

                    const totalLoan = financialData.summary.totalLoans;
                    const activeLoans = financialData.summary.activeLoans;

                    response = `üè¶ **T·ªïng quan kho·∫£n vay ${timeDescription}:**\n\n`;
                    response += `üí∞ **T·ªïng ti·ªÅn g·ªëc:** ${totalOriginalAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `‚è≥ **C√≤n l·∫°i:** ${totalRemainingAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `üìà **Ti·ªÅn l√£i:** ${totalInterestAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `üî• **T·ªïng ph·∫£i tr·∫£:** ${(totalRemainingAmount + totalInterestAmount).toLocaleString('vi-VN')} VND\n`;
                    response += `üìä **S·ªë kho·∫£n ƒëang ho·∫°t ƒë·ªông:** ${activeLoans}/${financialData.loans.length}`;

                    if (financialData.loans.length === 0) {
                        response += `\n\nKh√¥ng c√≥ d·ªØ li·ªáu kho·∫£n vay ${timeDescription}.`;
                    }
                    break;

                case 'loan_paid':
                    // L·ªçc ch·ªâ nh·ªØng kho·∫£n vay ƒë√£ tr·∫£ h·∫øt
                    const paidLoans = financialData.loans.filter(loan => {
                        const totalPaid = loan.payments ? loan.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                        const remainingAmount = Math.max(0, loan.amount - totalPaid);
                        return loan.status?.toUpperCase() === 'PAID' || remainingAmount === 0;
                    });

                    let totalPaidOriginalAmount = 0;
                    let totalPaidPaidAmount = 0;

                    paidLoans.forEach(loan => {
                        const totalPaid = loan.payments ? loan.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                        totalPaidOriginalAmount += loan.amount;
                        totalPaidPaidAmount += totalPaid;
                    });

                    response = `‚úÖ **Kho·∫£n vay ƒë√£ tr·∫£ h·∫øt ${timeDescription}:**\n\n`;
                    response += `üí∞ **T·ªïng ti·ªÅn g·ªëc ƒë√£ tr·∫£:** ${totalPaidOriginalAmount.toLocaleString('vi-VN')} VND\n`;
                    // X√≥a d√≤ng "T·ªïng s·ªë ti·ªÅn ƒë√£ thanh to√°n" khi s·ªë ti·ªÅn = 0
                    if (totalPaidPaidAmount > 0) {
                        response += `‚úÖ **T·ªïng s·ªë ti·ªÅn ƒë√£ thanh to√°n:** ${totalPaidPaidAmount.toLocaleString('vi-VN')} VND\n`;
                    }
                    response += `üìä **S·ªë kho·∫£n ƒë√£ ho√†n th√†nh:** ${paidLoans.length}/${financialData.loans.length}`;

                    if (paidLoans.length === 0) {
                        response += `\n\nKh√¥ng c√≥ kho·∫£n vay n√†o ƒë√£ tr·∫£ h·∫øt ${timeDescription}.\n\n`;
                        response += `üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ:\n`;
                        response += `‚Ä¢ H·ªèi "kho·∫£n vay c·ªßa t√¥i" ƒë·ªÉ xem t·∫•t c·∫£ kho·∫£n vay\n`;
                        response += `‚Ä¢ H·ªèi "n·ª£ c√≤n l·∫°i" ƒë·ªÉ xem c√°c kho·∫£n ch∆∞a tr·∫£ h·∫øt`;
                    }
                    break;

                case 'loan_overdue':
                    // L·ªçc ch·ªâ nh·ªØng kho·∫£n vay qu√° h·∫°n - C·∫£i thi·ªán logic nh·∫≠n di·ªán
                    const today = new Date();
                    const overdueLoans = financialData.loans.filter(loan => {
                        // Ki·ªÉm tra tr·∫°ng th√°i OVERDUE tr·ª±c ti·∫øp
                        if (loan.status?.toUpperCase() === 'OVERDUE') {
                            return true;
                        }

                        // Ki·ªÉm tra kho·∫£n vay ACTIVE nh∆∞ng ƒë√£ qu√° h·∫°n thanh to√°n
                        if (loan.status?.toUpperCase() === 'ACTIVE' && loan.dueDate) {
                            const dueDate = new Date(loan.dueDate);
                            return today > dueDate;
                        }

                        // Ki·ªÉm tra kho·∫£n vay kh√¥ng c√≥ tr·∫°ng th√°i r√µ r√†ng nh∆∞ng ƒë√£ qu√° h·∫°n
                        if (!loan.status && loan.dueDate) {
                            const dueDate = new Date(loan.dueDate);
                            return today > dueDate;
                        }

                        return false;
                    });

                    let totalOverdueOriginalAmount = 0;
                    let totalOverduePaidAmount = 0;
                    let totalOverdueRemainingAmount = 0;
                    let totalOverdueInterestAmount = 0;
                    let totalOverduePenalty = 0; // Th√™m ph√≠ ph·∫°t qu√° h·∫°n

                    const overdueDetails = overdueLoans.map(loan => {
                        const totalPaid = loan.payments ? loan.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                        const remainingAmount = Math.max(0, loan.amount - totalPaid);

                        // T√≠nh s·ªë ng√†y qu√° h·∫°n
                        const dueDate = new Date(loan.dueDate);
                        const overdueDays = Math.max(0, Math.ceil((today.getTime() - dueDate.getTime()) / (1000 * 60 * 60 * 24)));

                        totalOverdueOriginalAmount += (loan.amount || 0);
                        totalOverduePaidAmount += totalPaid;
                        totalOverdueRemainingAmount += remainingAmount;

                        let interestAmount = 0;
                        let penaltyAmount = 0;

                        // T√≠nh l√£i cho kho·∫£n vay qu√° h·∫°n
                        if (loan.startDate && loan.dueDate && loan.interestRate) {
                            const startDate = new Date(loan.startDate);
                            const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                            let interestMultiplier = 0;
                            switch (loan.interestRateType) {
                                case 'DAY': interestMultiplier = diffDays; break;
                                case 'WEEK': interestMultiplier = diffDays / 7; break;
                                case 'MONTH': interestMultiplier = diffDays / 30; break;
                                case 'QUARTER': interestMultiplier = diffDays / 90; break;
                                case 'YEAR': interestMultiplier = diffDays / 365; break;
                            }
                            interestAmount = Math.round(remainingAmount * (loan.interestRate / 100) * interestMultiplier);
                            totalOverdueInterestAmount += interestAmount;
                        }

                        // T√≠nh ph√≠ ph·∫°t qu√° h·∫°n (gi·∫£ s·ª≠ 0.1% m·ªói ng√†y qu√° h·∫°n)
                        if (overdueDays > 0) {
                            penaltyAmount = Math.round(remainingAmount * 0.001 * overdueDays);
                            totalOverduePenalty += penaltyAmount;
                        }

                        return {
                            ...loan,
                            amount: loan.amount || 0,
                            remainingAmount,
                            interestAmount,
                            penaltyAmount,
                            overdueDays,
                            totalWithInterestAndPenalty: remainingAmount + interestAmount + penaltyAmount
                        };
                    });

                    response = `üö® **Kho·∫£n vay qu√° h·∫°n ${timeDescription}:**\n\n`;
                    response += `üí∞ **T·ªïng ti·ªÅn g·ªëc:** ${totalOverdueOriginalAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `‚è≥ **C√≤n l·∫°i:** ${totalOverdueRemainingAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `üìà **Ti·ªÅn l√£i:** ${totalOverdueInterestAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `‚ö†Ô∏è **Ph√≠ ph·∫°t:** ${totalOverduePenalty.toLocaleString('vi-VN')} VND\n`;
                    response += `üî• **T·ªïng c·∫ßn tr·∫£:** ${(totalOverdueRemainingAmount + totalOverdueInterestAmount + totalOverduePenalty).toLocaleString('vi-VN')} VND\n`;
                    response += `üìä **S·ªë kho·∫£n qu√° h·∫°n:** ${overdueLoans.length}/${financialData.loans.length}`;

                    if (overdueLoans.length === 0) {
                        response += `\n\nüéâ **Tuy·ªát v·ªùi!** B·∫°n kh√¥ng c√≥ kho·∫£n vay n√†o qu√° h·∫°n ${timeDescription}.\n\n`;
                        response += `üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ:\n`;
                        response += `‚Ä¢ H·ªèi "kho·∫£n vay c·ªßa t√¥i" ƒë·ªÉ xem t·∫•t c·∫£ kho·∫£n vay\n`;
                        response += `‚Ä¢ H·ªèi "n·ª£ c√≤n l·∫°i" ƒë·ªÉ xem c√°c kho·∫£n ch∆∞a tr·∫£ h·∫øt`;
                    } else {
                        response += `\n\nüìã **Chi ti·∫øt c√°c kho·∫£n qu√° h·∫°n:**\n`;
                        overdueDetails.slice(0, 5).forEach((loan, index) => {
                            const description = loan.description || loan.purpose || 'Kho·∫£n vay';
                            const amount = loan.amount || 0;
                            const remainingAmount = loan.remainingAmount || 0;
                            const interestAmount = loan.interestAmount || 0;
                            const penaltyAmount = loan.penaltyAmount || 0;
                            const overdueDays = loan.overdueDays || 0;
                            const totalWithInterestAndPenalty = loan.totalWithInterestAndPenalty || 0;

                            response += `${index + 1}. **${description}** - üö® Qu√° h·∫°n ${overdueDays} ng√†y\n`;
                            response += `   üí∞ G·ªëc: ${amount.toLocaleString('vi-VN')} VND\n`;
                            response += `   ‚è≥ C√≤n l·∫°i: ${remainingAmount.toLocaleString('vi-VN')} VND`;
                            if (interestAmount > 0) {
                                response += ` | üìà L√£i: ${interestAmount.toLocaleString('vi-VN')} VND`;
                            }
                            if (penaltyAmount > 0) {
                                response += ` | ‚ö†Ô∏è Ph·∫°t: ${penaltyAmount.toLocaleString('vi-VN')} VND`;
                            }
                            response += `\n   üî• T·ªïng: ${totalWithInterestAndPenalty.toLocaleString('vi-VN')} VND\n\n`;
                        });

                        if (overdueLoans.length > 5) {
                            response += `... v√† ${overdueLoans.length - 5} kho·∫£n qu√° h·∫°n kh√°c.\n\n`;
                            // L∆∞u context ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu xem chi ti·∫øt
                            this.conversationContext.set(userId, {
                                type: 'loan_overdue',
                                data: overdueDetails,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `üí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*\n\n`;
                        }

                        response += `‚ö†Ô∏è **C·∫£nh b√°o:** B·∫°n c√≥ ${overdueLoans.length} kho·∫£n vay qu√° h·∫°n c·∫ßn ∆∞u ti√™n thanh to√°n ngay!\n`;
                        response += `üí° **Khuy·∫øn ngh·ªã:** H√£y li√™n h·ªá v·ªõi ng∆∞·ªùi cho vay ƒë·ªÉ th·ªèa thu·∫≠n k·∫ø ho·∫°ch thanh to√°n.`;
                    }
                    break;

                case 'loan_remaining':
                    // L·ªçc ch·ªâ nh·ªØng kho·∫£n vay c√≤n l·∫°i ch∆∞a tr·∫£ h·∫øt
                    const remainingLoans = financialData.loans.filter(loan => {
                        const totalPaid = loan.payments ? loan.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                        const remainingAmount = Math.max(0, loan.amount - totalPaid);
                        return loan.status?.toUpperCase() === 'ACTIVE' && remainingAmount > 0;
                    });

                    let totalRemainingOriginalAmount = 0;
                    let totalRemainingPaidAmount = 0;
                    let totalRemainingRemainingAmount = 0;
                    let totalRemainingInterestAmount = 0;

                    remainingLoans.forEach(loan => {
                        const totalPaid = loan.payments ? loan.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                        const remainingAmount = Math.max(0, loan.amount - totalPaid);

                        totalRemainingOriginalAmount += loan.amount;
                        totalRemainingPaidAmount += totalPaid;
                        totalRemainingRemainingAmount += remainingAmount;

                        // T√≠nh l√£i cho kho·∫£n vay ƒëang ho·∫°t ƒë·ªông
                        if (loan.startDate && loan.dueDate && loan.interestRate) {
                            const startDate = new Date(loan.startDate);
                            const dueDate = new Date(loan.dueDate);
                            const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                            let interestMultiplier = 0;
                            switch (loan.interestRateType) {
                                case 'DAY': interestMultiplier = diffDays; break;
                                case 'WEEK': interestMultiplier = diffDays / 7; break;
                                case 'MONTH': interestMultiplier = diffDays / 30; break;
                                case 'QUARTER': interestMultiplier = diffDays / 90; break;
                                case 'YEAR': interestMultiplier = diffDays / 365; break;
                            }
                            const interestAmount = Math.round(remainingAmount * (loan.interestRate / 100) * interestMultiplier);
                            totalRemainingInterestAmount += interestAmount;
                        }
                    });

                    response = `‚è≥ **Kho·∫£n vay c√≤n l·∫°i ch∆∞a tr·∫£ h·∫øt ${timeDescription}:**\n\n`;
                    response += `üí∞ **T·ªïng ti·ªÅn g·ªëc:** ${totalRemainingOriginalAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `‚è≥ **C√≤n l·∫°i:** ${totalRemainingRemainingAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `üìà **Ti·ªÅn l√£i:** ${totalRemainingInterestAmount.toLocaleString('vi-VN')} VND\n`;
                    response += `üî• **T·ªïng c·∫ßn tr·∫£:** ${(totalRemainingRemainingAmount + totalRemainingInterestAmount).toLocaleString('vi-VN')} VND\n`;
                    response += `üìä **S·ªë kho·∫£n ch∆∞a ho√†n th√†nh:** ${remainingLoans.length}/${financialData.loans.length}`;

                    if (remainingLoans.length === 0) {
                        response += `\n\nüéâ **Ch√∫c m·ª´ng!** B·∫°n kh√¥ng c√≥ kho·∫£n vay n√†o ch∆∞a tr·∫£ h·∫øt ${timeDescription}.\n\n`;
                        response += `üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ:\n`;
                        response += `‚Ä¢ H·ªèi "kho·∫£n vay c·ªßa t√¥i" ƒë·ªÉ xem t·∫•t c·∫£ kho·∫£n vay\n`;
                        response += `‚Ä¢ H·ªèi "n·ª£ ƒë√£ tr·∫£" ƒë·ªÉ xem c√°c kho·∫£n ƒë√£ ho√†n th√†nh`;
                    }
                    break;

                case 'savings_income':
                    // L·ªçc ch·ªâ c√°c kho·∫£n thu nh·∫≠p c√≥ category li√™n quan ƒë·∫øn ti·∫øt ki·ªám
                    const savingsIncomes = financialData.incomes.filter(income => {
                        const categoryLower = income.category?.toLowerCase() || '';
                        const descriptionLower = income.description?.toLowerCase() || '';

                        return categoryLower.includes('ti·∫øt ki·ªám') ||
                            categoryLower.includes('saving') ||
                            categoryLower.includes('tiet kiem') ||
                            categoryLower === 'ti·ªÅn ti·∫øt ki·ªám' ||
                            categoryLower === 'tien tiet kiem' ||
                            descriptionLower.includes('ti·∫øt ki·ªám') ||
                            descriptionLower.includes('saving') ||
                            descriptionLower.includes('tiet kiem');
                    });
                    const totalSavingsIncome = savingsIncomes.reduce((sum, income) => sum + income.amount, 0);

                    logger.info('Savings income query debug', {
                        userId,
                        savingsIncomesCount: savingsIncomes.length,
                        totalSavingsIncome,
                        timeDescription,
                        timeFilter,
                        allIncomeCategories: financialData.incomes.map(i => i.category),
                        filteredCategories: savingsIncomes.map(i => i.category)
                    });

                    response = `üí∞ **T·ªïng ti·ªÅn ti·∫øt ki·ªám ${timeDescription}:** ${totalSavingsIncome.toLocaleString('vi-VN')} VND\n\n`;

                    if (savingsIncomes.length > 0) {
                        response += `üìä **Chi ti·∫øt ti·ªÅn ti·∫øt ki·ªám:**\n`;
                        savingsIncomes.slice(0, 5).forEach((savings, index) => {
                            const date = new Date(savings.date).toLocaleDateString('vi-VN');
                            const category = savings.category || 'Ti·∫øt ki·ªám';
                            response += `${index + 1}. ${savings.description || 'Ti·∫øt ki·ªám'}: ${savings.amount.toLocaleString('vi-VN')} VND - ${category} (${date})\n`;
                        });

                        if (savingsIncomes.length > 5) {
                            response += `\n... v√† ${savingsIncomes.length - 5} kho·∫£n ti·∫øt ki·ªám kh√°c.`;
                            // L∆∞u context ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu xem chi ti·∫øt
                            this.conversationContext.set(userId, {
                                type: 'savings_income',
                                data: savingsIncomes,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `\n\nüí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*`;
                        }
                    } else {
                        response += `Kh√¥ng c√≥ d·ªØ li·ªáu ti·ªÅn ti·∫øt ki·ªám ${timeDescription}.\n\n`;
                        response += `üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ th√™m ti·∫øt ki·ªám b·∫±ng c√°ch:\n`;
                        response += `‚Ä¢ V√†o m·ª•c Thu nh·∫≠p v√† ch·ªçn danh m·ª•c "Ti·ªÅn ti·∫øt ki·ªám"\n`;
                        response += `‚Ä¢ Ho·∫∑c n√≥i v·ªõi t√¥i: "T√¥i ti·∫øt ki·ªám ƒë∆∞·ª£c 1 tri·ªáu h√¥m nay"`;
                    }
                    break;

                case 'savings':
                    // L·ªçc ch·ªâ c√°c kho·∫£n ƒë·∫ßu t∆∞ lo·∫°i savings
                    const savingsInvestments = financialData.investments.filter(inv => inv.type === 'savings');
                    const totalSavings = savingsInvestments.reduce((sum, inv) => sum + (inv.initialInvestment || 0), 0);

                    logger.info('Savings query debug', {
                        userId,
                        savingsCount: savingsInvestments.length,
                        totalSavings,
                        timeDescription,
                        timeFilter
                    });

                    response = `üí∞ **T·ªïng ti·∫øt ki·ªám ng√¢n h√†ng ${timeDescription}:** ${totalSavings.toLocaleString('vi-VN')} VND\n\n`;

                    if (savingsInvestments.length > 0) {
                        response += `üè¶ **Chi ti·∫øt ti·∫øt ki·ªám:**\n`;
                        savingsInvestments.slice(0, 5).forEach((savings, index) => {
                            const date = new Date(savings.createdAt).toLocaleDateString('vi-VN');
                            const bankName = savings.bankName || 'Ng√¢n h√†ng';
                            const amount = savings.initialInvestment || 0;
                            response += `${index + 1}. ${savings.name || 'Ti·∫øt ki·ªám'}: ${amount.toLocaleString('vi-VN')} VND - ${bankName} (${date})\n`;
                        });

                        if (savingsInvestments.length > 5) {
                            response += `\n... v√† ${savingsInvestments.length - 5} kho·∫£n ti·∫øt ki·ªám kh√°c.`;
                            // L∆∞u context ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu xem chi ti·∫øt
                            this.conversationContext.set(userId, {
                                type: 'savings',
                                data: savingsInvestments,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `\n\nüí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*`;
                        }
                    } else {
                        response += `Kh√¥ng c√≥ d·ªØ li·ªáu ti·∫øt ki·ªám ng√¢n h√†ng ${timeDescription}.`;
                    }
                    break;

                case 'stock':
                    // L·ªçc ch·ªâ c√°c kho·∫£n ƒë·∫ßu t∆∞ c·ªï phi·∫øu
                    const stockInvestments = financialData.investments.filter(inv =>
                        inv.type === 'stock' || inv.type === 'stocks' ||
                        (inv.name && inv.name.toLowerCase().includes('c·ªï phi·∫øu')) ||
                        (inv.name && inv.name.toLowerCase().includes('co phieu')) ||
                        (inv.name && inv.name.toLowerCase().includes('ch·ª©ng kho√°n')) ||
                        (inv.name && inv.name.toLowerCase().includes('chung khoan'))
                    );
                    const totalStock = stockInvestments.reduce((sum, inv) => sum + (inv.initialInvestment || 0), 0);

                    logger.info('Stock query debug', {
                        userId,
                        stockCount: stockInvestments.length,
                        totalStock,
                        timeDescription,
                        timeFilter
                    });

                    response = `üìà **T·ªïng ƒë·∫ßu t∆∞ c·ªï phi·∫øu ${timeDescription}:** ${totalStock.toLocaleString('vi-VN')} VND\n\n`;

                    if (stockInvestments.length > 0) {
                        response += `üìä **Chi ti·∫øt ƒë·∫ßu t∆∞ c·ªï phi·∫øu:**\n`;
                        stockInvestments.slice(0, 5).forEach((stock, index) => {
                            const date = new Date(stock.createdAt).toLocaleDateString('vi-VN');
                            const amount = stock.initialInvestment || 0;
                            response += `${index + 1}. ${stock.name || 'C·ªï phi·∫øu'}: ${amount.toLocaleString('vi-VN')} VND (${date})\n`;
                        });

                        if (stockInvestments.length > 5) {
                            response += `\n... v√† ${stockInvestments.length - 5} kho·∫£n ƒë·∫ßu t∆∞ c·ªï phi·∫øu kh√°c.`;
                            this.conversationContext.set(userId, {
                                type: 'stock',
                                data: stockInvestments,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `\n\nüí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*`;
                        }
                    } else {
                        response += `Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞ c·ªï phi·∫øu ${timeDescription}.`;
                    }
                    break;

                case 'gold':
                    // L·ªçc ch·ªâ c√°c kho·∫£n ƒë·∫ßu t∆∞ v√†ng
                    const goldInvestments = financialData.investments.filter(inv =>
                        inv.type === 'gold' ||
                        (inv.name && inv.name.toLowerCase().includes('v√†ng')) ||
                        (inv.name && inv.name.toLowerCase().includes('vang')) ||
                        (inv.name && inv.name.toLowerCase().includes('kim lo·∫°i qu√Ω')) ||
                        (inv.name && inv.name.toLowerCase().includes('kim loai quy'))
                    );
                    const totalGold = goldInvestments.reduce((sum, inv) => sum + (inv.initialInvestment || 0), 0);

                    logger.info('Gold query debug', {
                        userId,
                        goldCount: goldInvestments.length,
                        totalGold,
                        timeDescription,
                        timeFilter
                    });

                    response = `ü•á **T·ªïng ƒë·∫ßu t∆∞ v√†ng ${timeDescription}:** ${totalGold.toLocaleString('vi-VN')} VND\n\n`;

                    if (goldInvestments.length > 0) {
                        response += `üìä **Chi ti·∫øt ƒë·∫ßu t∆∞ v√†ng:**\n`;
                        goldInvestments.slice(0, 5).forEach((gold, index) => {
                            const date = new Date(gold.createdAt).toLocaleDateString('vi-VN');
                            const amount = gold.initialInvestment || 0;
                            response += `${index + 1}. ${gold.name || 'V√†ng'}: ${amount.toLocaleString('vi-VN')} VND (${date})\n`;
                        });

                        if (goldInvestments.length > 5) {
                            response += `\n... v√† ${goldInvestments.length - 5} kho·∫£n ƒë·∫ßu t∆∞ v√†ng kh√°c.`;
                            this.conversationContext.set(userId, {
                                type: 'gold',
                                data: goldInvestments,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `\n\nüí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*`;
                        }
                    } else {
                        response += `Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞ v√†ng ${timeDescription}.`;
                    }
                    break;

                case 'realestate':
                    // L·ªçc ch·ªâ c√°c kho·∫£n ƒë·∫ßu t∆∞ b·∫•t ƒë·ªông s·∫£n
                    const realestateInvestments = financialData.investments.filter(inv =>
                        inv.type === 'realestate' || inv.type === 'real_estate' ||
                        (inv.name && inv.name.toLowerCase().includes('ƒë·∫•t ƒëai')) ||
                        (inv.name && inv.name.toLowerCase().includes('dat dai')) ||
                        (inv.name && inv.name.toLowerCase().includes('b·∫•t ƒë·ªông s·∫£n')) ||
                        (inv.name && inv.name.toLowerCase().includes('bat dong san')) ||
                        (inv.name && inv.name.toLowerCase().includes('ƒë·∫•t')) ||
                        (inv.name && inv.name.toLowerCase().includes('dat')) ||
                        (inv.name && inv.name.toLowerCase().includes('nh√† ƒë·∫•t')) ||
                        (inv.name && inv.name.toLowerCase().includes('nha dat'))
                    );
                    const totalRealestate = realestateInvestments.reduce((sum, inv) => sum + (inv.initialInvestment || 0), 0);

                    logger.info('Real estate query debug', {
                        userId,
                        realestateCount: realestateInvestments.length,
                        totalRealestate,
                        timeDescription,
                        timeFilter
                    });

                    response = `üè° **T·ªïng ƒë·∫ßu t∆∞ ƒë·∫•t ƒëai ${timeDescription}:** ${totalRealestate.toLocaleString('vi-VN')} VND\n\n`;

                    if (realestateInvestments.length > 0) {
                        response += `üìä **Chi ti·∫øt ƒë·∫ßu t∆∞ ƒë·∫•t ƒëai:**\n`;
                        realestateInvestments.slice(0, 5).forEach((realestate, index) => {
                            const date = new Date(realestate.createdAt).toLocaleDateString('vi-VN');
                            const amount = realestate.initialInvestment || 0;
                            response += `${index + 1}. ${realestate.name || 'ƒê·∫•t ƒëai'}: ${amount.toLocaleString('vi-VN')} VND (${date})\n`;
                        });

                        if (realestateInvestments.length > 5) {
                            response += `\n... v√† ${realestateInvestments.length - 5} kho·∫£n ƒë·∫ßu t∆∞ ƒë·∫•t ƒëai kh√°c.`;
                            this.conversationContext.set(userId, {
                                type: 'realestate',
                                data: realestateInvestments,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `\n\nüí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*`;
                        }
                    } else {
                        response += `Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞ ƒë·∫•t ƒëai ${timeDescription}.`;
                    }
                    break;

                case 'investment':
                    // L·ªçc t·∫•t c·∫£ ƒë·∫ßu t∆∞ tr·ª´ savings
                    const nonSavingsInvestments = financialData.investments.filter(inv => inv.type !== 'savings');
                    const totalInvestment = nonSavingsInvestments.reduce((sum, inv) => sum + (inv.initialInvestment || 0), 0);

                    logger.info('Investment query debug', {
                        userId,
                        investmentsCount: nonSavingsInvestments.length,
                        totalInvestment,
                        timeDescription,
                        timeFilter
                    });

                    response = `üìà **T·ªïng ƒë·∫ßu t∆∞ ${timeDescription}:** ${totalInvestment.toLocaleString('vi-VN')} VND\n\n`;

                    if (nonSavingsInvestments.length > 0) {
                        response += `üìä **Chi ti·∫øt ƒë·∫ßu t∆∞:**\n`;
                        nonSavingsInvestments.slice(0, 5).forEach((investment, index) => {
                            const date = new Date(investment.createdAt).toLocaleDateString('vi-VN');
                            const type = investment.type || 'Kh√¥ng x√°c ƒë·ªãnh';
                            const amount = investment.initialInvestment || 0;
                            response += `${index + 1}. ${investment.name || 'ƒê·∫ßu t∆∞'}: ${amount.toLocaleString('vi-VN')} VND - ${type} (${date})\n`;
                        });

                        if (nonSavingsInvestments.length > 5) {
                            response += `\n... v√† ${nonSavingsInvestments.length - 5} kho·∫£n ƒë·∫ßu t∆∞ kh√°c.`;
                            // L∆∞u context ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu xem chi ti·∫øt
                            this.conversationContext.set(userId, {
                                type: 'investment',
                                data: nonSavingsInvestments,
                                timeFilter,
                                timeDescription,
                                timestamp: Date.now()
                            });
                            response += `\n\nüí° *B·∫°n c√≥ th·ªÉ h·ªèi "xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i" ƒë·ªÉ xem t·∫•t c·∫£.*`;
                        }
                    } else {
                        response += `Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞ ${timeDescription}.`;
                    }
                    break;
            }

            return response;

        } catch (error) {
            logger.error(`Error handling ${category} query:`, {
                error: error.message,
                stack: error.stack,
                userId,
                category,
                message
            });
            const categoryNames = {
                'income': 'thu nh·∫≠p',
                'expense': 'chi ti√™u',
                'loan': 'kho·∫£n vay',
                'investment': 'ƒë·∫ßu t∆∞',
                'savings': 'ti·∫øt ki·ªám ng√¢n h√†ng',
                'savings_income': 'ti·ªÅn ti·∫øt ki·ªám',
                'stock': 'c·ªï phi·∫øu',
                'gold': 'v√†ng',
                'realestate': 'ƒë·∫•t ƒëai'
            };
            return `Kh√¥ng th·ªÉ truy v·∫•n th√¥ng tin ${categoryNames[category] || category}. Vui l√≤ng th·ª≠ l·∫°i sau.`;
        }
    }

    /**
     * X·ª≠ l√Ω truy v·∫•n s·ªë d∆∞ v√† t·ªïng quan t√†i ch√≠nh
     */
    async handleBalanceQuery(userId, message) {
        try {
            // Ph√¢n t√≠ch t·ª´ kh√≥a v√† th·ªùi gian
            const { timeFilter } = this.analyzeKeywordsAndTime(message);

            // L·∫•y d·ªØ li·ªáu t√†i ch√≠nh v·ªõi b·ªô l·ªçc th·ªùi gian
            const financialData = await this.getUserFinancialData(userId, timeFilter);

            // T√≠nh s·ªë d∆∞
            const balance = financialData.summary.totalIncomes - financialData.summary.totalExpenses;

            // T·∫°o m√¥ t·∫£ th·ªùi gian
            let timeDescription = '';
            if (timeFilter) {
                switch (timeFilter.type) {
                    case 'today':
                        timeDescription = 'h√¥m nay';
                        break;
                    case 'week':
                        timeDescription = 'tu·∫ßn n√†y';
                        break;
                    case 'current_month':
                        timeDescription = 'th√°ng n√†y';
                        break;
                    case 'month':
                        const monthNames = ['', 'th√°ng 1', 'th√°ng 2', 'th√°ng 3', 'th√°ng 4', 'th√°ng 5', 'th√°ng 6',
                            'th√°ng 7', 'th√°ng 8', 'th√°ng 9', 'th√°ng 10', 'th√°ng 11', 'th√°ng 12'];
                        timeDescription = `${monthNames[timeFilter.value]}${timeFilter.year ? ` nƒÉm ${timeFilter.year}` : ''}`;
                        break;
                    case 'year':
                        timeDescription = `nƒÉm ${timeFilter.value}`;
                        break;
                    default:
                        timeDescription = 'th·ªùi gian ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh';
                }
            } else {
                timeDescription = 't·ªïng c·ªông';
            }

            // T·∫°o response v·ªõi th√¥ng tin t·ªïng quan
            let response = `üí∞ **T·ªïng quan t√†i ch√≠nh ${timeDescription}:**\n\n`;

            response += `üìä **S·ªë d∆∞ hi·ªán t·∫°i:** ${balance.toLocaleString('vi-VN')} VND\n`;
            response += `${balance >= 0 ? '‚úÖ' : '‚ö†Ô∏è'} ${balance >= 0 ? 'T√¨nh h√¨nh t√†i ch√≠nh t√≠ch c·ª±c' : 'C·∫ßn ch√∫ √Ω ƒë·∫øn chi ti√™u'}\n\n`;

            response += `üìà **Chi ti·∫øt:**\n`;
            response += `‚Ä¢ T·ªïng thu nh·∫≠p: ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ T·ªïng chi ti√™u: ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ T·ªïng ƒë·∫ßu t∆∞: ${financialData.summary.totalInvestments.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ T·ªïng kho·∫£n vay: ${financialData.summary.totalLoans.toLocaleString('vi-VN')} VND\n\n`;

            response += `üìã **Th·ªëng k√™:**\n`;
            response += `‚Ä¢ S·ªë giao d·ªãch: ${financialData.summary.totalTransactions}\n`;
            response += `‚Ä¢ Kho·∫£n vay ƒëang ho·∫°t ƒë·ªông: ${financialData.summary.activeLoans}\n`;
            response += `‚Ä¢ Ng√¢n s√°ch ƒëang ho·∫°t ƒë·ªông: ${financialData.summary.activeBudgets}\n\n`;

            // L∆∞u context ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi ti·∫øp theo
            this.conversationContext.set(userId, {
                type: 'balance',
                data: financialData,
                timeFilter,
                timeDescription,
                timestamp: Date.now()
            });

            response += `üí° *B·∫°n c√≥ th·ªÉ h·ªèi th√™m v·ªÅ thu nh·∫≠p, chi ti√™u, kho·∫£n vay ho·∫∑c ƒë·∫ßu t∆∞ ƒë·ªÉ xem chi ti·∫øt.*`;

            return response;

        } catch (error) {
            logger.error('Error handling balance query:', error);
            return 'Kh√¥ng th·ªÉ truy v·∫•n th√¥ng tin s·ªë d∆∞. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * X·ª≠ l√Ω y√™u c·∫ßu xem chi ti·∫øt c√°c kho·∫£n c√≤n l·∫°i
     */
    async handleDetailQuery(userId, message) {
        try {
            const context = this.conversationContext.get(userId);

            // Ki·ªÉm tra context c√≥ t·ªìn t·∫°i v√† c√≤n h·ª£p l·ªá (trong v√≤ng 10 ph√∫t)
            if (!context || (Date.now() - context.timestamp) > 10 * 60 * 1000) {
                return 'T√¥i kh√¥ng t√¨m th·∫•y cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i v·ªÅ thu nh·∫≠p, chi ti√™u, kho·∫£n vay ho·∫∑c ƒë·∫ßu t∆∞ kh√¥ng?';
            }

            const { type, data, timeDescription } = context;
            const typeNames = {
                'income': 'thu nh·∫≠p',
                'expense': 'chi ti√™u',
                'loan': 'kho·∫£n vay',
                'loan_paid': 'kho·∫£n vay ƒë√£ tr·∫£ h·∫øt',
                'loan_overdue': 'kho·∫£n vay qu√° h·∫°n',
                'loan_remaining': 'kho·∫£n vay ch∆∞a tr·∫£ h·∫øt',
                'investment': 'ƒë·∫ßu t∆∞',
                'savings': 'ti·∫øt ki·ªám ng√¢n h√†ng',
                'savings_income': 'ti·ªÅn ti·∫øt ki·ªám',
                'stock': 'c·ªï phi·∫øu',
                'gold': 'v√†ng',
                'realestate': 'ƒë·∫•t ƒëai'
            };

            const typeEmojis = {
                'income': 'üí∞',
                'expense': 'üí∏',
                'loan': 'üè¶',
                'loan_paid': '‚úÖ',
                'loan_overdue': 'üö®',
                'loan_remaining': '‚è≥',
                'investment': 'üìà',
                'savings': 'üè¶',
                'stock': 'üìà',
                'gold': 'ü•á',
                'realestate': 'üè°'
            };

            let response = `${typeEmojis[type]} **Chi ti·∫øt t·∫•t c·∫£ ${typeNames[type]} ${timeDescription}:**\n\n`;

            if (data.length > 0) {
                // Hi·ªÉn th·ªã t·ª´ kho·∫£n th·ª© 6 tr·ªü ƒëi (v√¨ ƒë√£ hi·ªÉn th·ªã 5 kho·∫£n ƒë·∫ßu)
                const remainingItems = data.slice(5);

                if (remainingItems.length > 0) {
                    response += `üìä **C√°c kho·∫£n ${typeNames[type]} c√≤n l·∫°i:**\n`;

                    // Gi·ªõi h·∫°n hi·ªÉn th·ªã t·ªëi ƒëa 15 kho·∫£n ƒë·ªÉ tr√°nh tin nh·∫Øn qu√° d√†i
                    const itemsToShow = remainingItems.slice(0, 15);

                    itemsToShow.forEach((item, index) => {
                        const date = new Date(item.date || item.createdAt).toLocaleDateString('vi-VN');

                        switch (type) {
                            case 'income':
                                response += `${index + 6}. ${item.description || 'Thu nh·∫≠p'}: ${item.amount.toLocaleString('vi-VN')} VND (${date})\n`;
                                break;
                            case 'expense':
                                response += `${index + 6}. ${item.description || 'Chi ti√™u'}: ${item.amount.toLocaleString('vi-VN')} VND (${date})\n`;
                                break;
                            case 'loan':
                                const status = item.status?.toUpperCase() === 'ACTIVE' ? 'üü¢ ƒêang ho·∫°t ƒë·ªông' : 'üî¥ ƒê√£ ƒë√≥ng';

                                // T√≠nh to√°n chi ti·∫øt gi·ªëng nh∆∞ frontend
                                const totalPaid = item.payments ? item.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                                const remainingAmount = Math.max(0, item.amount - totalPaid);

                                let interestAmount = 0;
                                if (item.startDate && item.dueDate && item.interestRate && item.status?.toUpperCase() === 'ACTIVE') {
                                    const startDate = new Date(item.startDate);
                                    const dueDate = new Date(item.dueDate);
                                    const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                    let interestMultiplier = 0;
                                    switch (item.interestRateType) {
                                        case 'DAY': interestMultiplier = diffDays; break;
                                        case 'WEEK': interestMultiplier = diffDays / 7; break;
                                        case 'MONTH': interestMultiplier = diffDays / 30; break;
                                        case 'QUARTER': interestMultiplier = diffDays / 90; break;
                                        case 'YEAR': interestMultiplier = diffDays / 365; break;
                                    }
                                    interestAmount = Math.round(remainingAmount * (item.interestRate / 100) * interestMultiplier);
                                }

                                const totalWithInterest = remainingAmount + interestAmount;

                                response += `${index + 6}. **${item.description || 'Kho·∫£n vay'}** - ${status}\n`;
                                response += `   üí∞ G·ªëc: ${item.amount.toLocaleString('vi-VN')} VND\n`;
                                response += `   ‚è≥ C√≤n l·∫°i: ${remainingAmount.toLocaleString('vi-VN')} VND`;
                                if (interestAmount > 0) {
                                    response += ` | üìà L√£i: ${interestAmount.toLocaleString('vi-VN')} VND`;
                                }
                                response += `\n   üî• **T·ªïng ph·∫£i tr·∫£: ${totalWithInterest.toLocaleString('vi-VN')} VND** (${date})\n\n`;
                                break;
                            case 'loan_paid':
                                const totalPaidAmount = item.payments ? item.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;

                                response += `${index + 6}. **${item.description || 'Kho·∫£n vay'}** - üî¥ ƒê√£ ho√†n th√†nh\n`;
                                response += `   üí∞ Ti·ªÅn g·ªëc: ${item.amount.toLocaleString('vi-VN')} VND\n`;
                                response += `   ‚úÖ ƒê√£ thanh to√°n: ${totalPaidAmount.toLocaleString('vi-VN')} VND\n`;
                                response += `   üìÖ Ng√†y t·∫°o: ${date}\n\n`;
                                break;
                            case 'loan_remaining':
                                const totalPaidRemaining = item.payments ? item.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                                const remainingAmountRemaining = Math.max(0, item.amount - totalPaidRemaining);

                                let interestAmountRemaining = 0;
                                if (item.startDate && item.dueDate && item.interestRate) {
                                    const startDate = new Date(item.startDate);
                                    const dueDate = new Date(item.dueDate);
                                    const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                    let interestMultiplier = 0;
                                    switch (item.interestRateType) {
                                        case 'DAY': interestMultiplier = diffDays; break;
                                        case 'WEEK': interestMultiplier = diffDays / 7; break;
                                        case 'MONTH': interestMultiplier = diffDays / 30; break;
                                        case 'QUARTER': interestMultiplier = diffDays / 90; break;
                                        case 'YEAR': interestMultiplier = diffDays / 365; break;
                                    }
                                    interestAmountRemaining = Math.round(remainingAmountRemaining * (item.interestRate / 100) * interestMultiplier);
                                }

                                const totalWithInterestRemaining = remainingAmountRemaining + interestAmountRemaining;

                                response += `${index + 6}. **${item.description || 'Kho·∫£n vay'}** - üü¢ Ch∆∞a ho√†n th√†nh\n`;
                                response += `   üí∞ G·ªëc: ${item.amount.toLocaleString('vi-VN')} VND\n`;
                                response += `   ‚è≥ C√≤n l·∫°i: ${remainingAmountRemaining.toLocaleString('vi-VN')} VND`;
                                if (interestAmountRemaining > 0) {
                                    response += ` | üìà L√£i: ${interestAmountRemaining.toLocaleString('vi-VN')} VND`;
                                }
                                response += `\n   üî• **C·∫ßn tr·∫£: ${totalWithInterestRemaining.toLocaleString('vi-VN')} VND** (${date})\n\n`;
                                break;
                            case 'loan_overdue':
                                const totalPaidOverdue = item.payments ? item.payments.reduce((sum, payment) => sum + payment.amount, 0) : 0;
                                const remainingAmountOverdue = Math.max(0, item.amount - totalPaidOverdue);

                                let interestAmountOverdue = 0;
                                if (item.startDate && item.dueDate && item.interestRate) {
                                    const startDate = new Date(item.startDate);
                                    const dueDate = new Date(item.dueDate);
                                    const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                    let interestMultiplier = 0;
                                    switch (item.interestRateType) {
                                        case 'DAY': interestMultiplier = diffDays; break;
                                        case 'WEEK': interestMultiplier = diffDays / 7; break;
                                        case 'MONTH': interestMultiplier = diffDays / 30; break;
                                        case 'QUARTER': interestMultiplier = diffDays / 90; break;
                                        case 'YEAR': interestMultiplier = diffDays / 365; break;
                                    }
                                    interestAmountOverdue = Math.round(remainingAmountOverdue * (item.interestRate / 100) * interestMultiplier);
                                }

                                const totalWithInterestOverdue = remainingAmountOverdue + interestAmountOverdue;
                                const today = new Date();
                                const dueDate = new Date(item.dueDate);
                                const overdueDays = Math.ceil((today.getTime() - dueDate.getTime()) / (1000 * 60 * 60 * 24));

                                response += `${index + 6}. **${item.description || 'Kho·∫£n vay'}** - üö® Qu√° h·∫°n ${overdueDays} ng√†y\n`;
                                response += `   üí∞ G·ªëc: ${item.amount.toLocaleString('vi-VN')} VND\n`;
                                response += `   ‚è≥ C√≤n l·∫°i: ${remainingAmountOverdue.toLocaleString('vi-VN')} VND`;
                                if (interestAmountOverdue > 0) {
                                    response += ` | üìà L√£i: ${interestAmountOverdue.toLocaleString('vi-VN')} VND`;
                                }
                                response += `\n   üî• **C·∫ßn tr·∫£ g·∫•p: ${totalWithInterestOverdue.toLocaleString('vi-VN')} VND** (${date})\n\n`;
                                break;
                            case 'investment':
                                const investmentType = item.type || 'Kh√¥ng x√°c ƒë·ªãnh';
                                const investmentAmount = item.initialInvestment || 0;
                                response += `${index + 6}. ${item.name || 'ƒê·∫ßu t∆∞'}: ${investmentAmount.toLocaleString('vi-VN')} VND - ${investmentType} (${date})\n`;
                                break;
                            case 'savings':
                                const bankName = item.bankName || 'Ng√¢n h√†ng';
                                const savingsAmount = item.initialInvestment || 0;
                                response += `${index + 6}. ${item.name || 'Ti·∫øt ki·ªám'}: ${savingsAmount.toLocaleString('vi-VN')} VND - ${bankName} (${date})\n`;
                                break;
                            case 'stock':
                                const stockAmount = item.initialInvestment || 0;
                                response += `${index + 6}. ${item.name || 'C·ªï phi·∫øu'}: ${stockAmount.toLocaleString('vi-VN')} VND (${date})\n`;
                                break;
                            case 'gold':
                                const goldAmount = item.initialInvestment || 0;
                                response += `${index + 6}. ${item.name || 'V√†ng'}: ${goldAmount.toLocaleString('vi-VN')} VND (${date})\n`;
                                break;
                            case 'realestate':
                                const realestateAmount = item.initialInvestment || 0;
                                response += `${index + 6}. ${item.name || 'ƒê·∫•t ƒëai'}: ${realestateAmount.toLocaleString('vi-VN')} VND (${date})\n`;
                                break;
                        }
                    });

                    if (remainingItems.length > 15) {
                        response += `\n... v√† ${remainingItems.length - 15} kho·∫£n ${typeNames[type]} kh√°c n·ªØa.`;
                    }

                    response += `\n\nüìà **T·ªïng c·ªông:** ${data.length} kho·∫£n ${typeNames[type]}`;

                    // T√≠nh t·ªïng s·ªë ti·ªÅn kh√°c nhau cho t·ª´ng lo·∫°i
                    let totalAmount = 0;
                    if (type === 'loan' || type === 'loan_remaining' || type === 'loan_overdue') {
                        // T√≠nh t·ªïng kho·∫£n vay bao g·ªìm l√£i (cho loan, loan_remaining v√† loan_overdue)
                        totalAmount = data.reduce((sum, item) => {
                            const totalPaid = item.payments ? item.payments.reduce((s, payment) => s + payment.amount, 0) : 0;
                            const remainingAmount = Math.max(0, item.amount - totalPaid);

                            let totalWithInterest = remainingAmount;
                            if (item.startDate && item.dueDate && item.interestRate && item.status?.toUpperCase() === 'ACTIVE') {
                                const startDate = new Date(item.startDate);
                                const dueDate = new Date(item.dueDate);
                                const diffTime = Math.abs(dueDate.getTime() - startDate.getTime());
                                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                let interestMultiplier = 0;
                                switch (item.interestRateType) {
                                    case 'DAY': interestMultiplier = diffDays; break;
                                    case 'WEEK': interestMultiplier = diffDays / 7; break;
                                    case 'MONTH': interestMultiplier = diffDays / 30; break;
                                    case 'QUARTER': interestMultiplier = diffDays / 90; break;
                                    case 'YEAR': interestMultiplier = diffDays / 365; break;
                                }
                                const interestAmount = Math.round(remainingAmount * (item.interestRate / 100) * interestMultiplier);
                                totalWithInterest = remainingAmount + interestAmount;
                            }
                            return sum + totalWithInterest;
                        }, 0);
                    } else if (type === 'loan_paid') {
                        // T√≠nh t·ªïng s·ªë ti·ªÅn ƒë√£ thanh to√°n cho kho·∫£n vay ƒë√£ tr·∫£ h·∫øt
                        totalAmount = data.reduce((sum, item) => {
                            const totalPaid = item.payments ? item.payments.reduce((s, payment) => s + payment.amount, 0) : 0;
                            return sum + totalPaid;
                        }, 0);
                    } else if (type === 'investment' || type === 'savings' || type === 'stock' || type === 'gold' || type === 'realestate') {
                        // T√≠nh t·ªïng ƒë·∫ßu t∆∞, ti·∫øt ki·ªám, c·ªï phi·∫øu, v√†ng ho·∫∑c ƒë·∫•t ƒëai
                        totalAmount = data.reduce((sum, item) => sum + (item.initialInvestment || 0), 0);
                    } else {
                        // Cho c√°c lo·∫°i kh√°c, t√≠nh t·ªïng b√¨nh th∆∞·ªùng
                        totalAmount = data.reduce((sum, item) => sum + item.amount, 0);
                    }

                    response += `\nüí∞ **T·ªïng s·ªë ti·ªÅn:** ${totalAmount.toLocaleString('vi-VN')} VND`;
                } else {
                    response += `Kh√¥ng c√≥ kho·∫£n ${typeNames[type]} n√†o kh√°c.`;
                }
            } else {
                response += `Kh√¥ng c√≥ d·ªØ li·ªáu ${typeNames[type]} ${timeDescription}.`;
            }

            // X√≥a context sau khi s·ª≠ d·ª•ng
            this.conversationContext.delete(userId);

            return response;

        } catch (error) {
            logger.error('Error handling detail query:', error);
            return 'Kh√¥ng th·ªÉ hi·ªÉn th·ªã chi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * Truy v·∫•n th√¥ng tin t√†i ch√≠nh
     */
    async handleQueryFinances(userId, message) {
        try {
            const financialData = await this.getUserFinancialData(userId);

            const queryPrompt = `
D·ª±a tr√™n d·ªØ li·ªáu t√†i ch√≠nh v√† c√¢u h·ªèi: "${message}"

D·ªØ li·ªáu hi·ªán t·∫°i:
- T·ªïng thu nh·∫≠p: ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND
- T·ªïng chi ti√™u: ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND
- S·ªë d∆∞ hi·ªán t·∫°i: ${(financialData.summary.totalIncomes - financialData.summary.totalExpenses).toLocaleString('vi-VN')} VND

H√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch.`;

            const response = await this.callGeminiAI(queryPrompt);
            return response;

        } catch (error) {
            logger.error('Error querying finances:', error);
            return 'Kh√¥ng th·ªÉ truy v·∫•n th√¥ng tin t√†i ch√≠nh. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * üßÆ X·ª≠ l√Ω t√≠nh to√°n th√¥ng th∆∞·ªùng (General Calculation)
     */
    async handleGeneralCalculation(userId, message) {
        try {
            logger.info('Processing general calculation', { userId, message });

            const result = await this.calculationCoordinator.processCalculation(message, 'general');

            return result;

        } catch (error) {
            logger.error('Error handling general calculation:', error);
            return `‚ùå **L·ªói t√≠nh to√°n th√¥ng th∆∞·ªùng**

üîÑ **Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c:**
‚Ä¢ Ki·ªÉm tra c√∫ ph√°p c·ªßa bi·ªÉu th·ª©c to√°n h·ªçc
‚Ä¢ S·ª≠ d·ª•ng c√°c ph√©p t√≠nh ƒë∆∞·ª£c h·ªó tr·ª£

üí° **V√≠ d·ª•:**
‚Ä¢ "2 + 3 = ?"
‚Ä¢ "15% c·ªßa 1 tri·ªáu"
‚Ä¢ "l√£i su·∫•t 5% c·ªßa 10 tri·ªáu trong 12 th√°ng"`;
        }
    }

    /**
     * üí∞ X·ª≠ l√Ω t√≠nh to√°n t√†i ch√≠nh (Financial Calculation)
     */
    async handleFinancialCalculation(userId, message) {
        try {
            logger.info('Processing financial calculation', { userId, message });

            // L·∫•y d·ªØ li·ªáu t√†i ch√≠nh hi·ªán t·∫°i
            const financialData = await this.getUserFinancialData(userId);

            const result = await this.calculationCoordinator.processCalculation(message, 'financial', financialData);

            return result;

        } catch (error) {
            logger.error('Error handling financial calculation:', error);
            return `‚ùå **L·ªói t√≠nh to√°n t√†i ch√≠nh**

üîÑ **Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c:**
‚Ä¢ ƒê·∫£m b·∫£o c√≥ ƒë·ªß d·ªØ li·ªáu t√†i ch√≠nh
‚Ä¢ N√≥i r√µ h∆°n v·ªÅ s·ªë ti·ªÅn c·∫ßn t√≠nh to√°n

üí° **V√≠ d·ª•:**
‚Ä¢ "T√¥i c√≥ th·ªÉ chi 4tr ƒë∆∞·ª£c kh√¥ng?"
‚Ä¢ "N·∫øu t√¥i chi 2 tri·ªáu th√¨ c√≤n bao nhi√™u?"
‚Ä¢ "S·ªë d∆∞ c·ªßa t√¥i"`;
        }
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi suy lu·∫≠n v√† t√≠nh to√°n (Legacy)
     */
    async handleCalculationQuery(userId, message) {
        try {
            const financialData = await this.getUserFinancialData(userId);

            const calculationPrompt = `
B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh v·ªõi kh·∫£ nƒÉng t√≠nh to√°n v√† ph√¢n t√≠ch. H√£y tr·∫£ l·ªùi c√¢u h·ªèi: "${message}"

D·ªØ li·ªáu t√†i ch√≠nh hi·ªán t·∫°i:
- T·ªïng thu nh·∫≠p: ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND
- T·ªïng chi ti√™u: ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND
- S·ªë d∆∞ hi·ªán t·∫°i: ${(financialData.summary.totalIncomes - financialData.summary.totalExpenses).toLocaleString('vi-VN')} VND
- T·ªïng ƒë·∫ßu t∆∞: ${financialData.summary.totalInvestments.toLocaleString('vi-VN')} VND
- T·ªïng kho·∫£n vay: ${financialData.summary.totalLoans.toLocaleString('vi-VN')} VND

H√£y th·ª±c hi·ªán c√°c t√≠nh to√°n c·∫ßn thi·∫øt nh∆∞:
- T√≠nh l√£i su·∫•t ƒë∆°n/k√©p
- D·ª± ƒëo√°n t√†i ch√≠nh
- L·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám
- So s√°nh c√°c ph∆∞∆°ng √°n ƒë·∫ßu t∆∞
- T√≠nh to√°n kh·∫£ nƒÉng tr·∫£ n·ª£
- Ph√¢n t√≠ch t·ª∑ l·ªá thu chi

ƒê∆∞a ra k·∫øt qu·∫£ t√≠nh to√°n chi ti·∫øt v√† gi·∫£i th√≠ch r√µ r√†ng.`;

            const calculation = await this.callGeminiAI(calculationPrompt);
            return `üßÆ **K·∫øt qu·∫£ t√≠nh to√°n:**\n\n${calculation}`;

        } catch (error) {
            logger.error('Error handling calculation query:', error);
            return 'Kh√¥ng th·ªÉ th·ª±c hi·ªán t√≠nh to√°n l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * ƒê∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh
     */
    async handleFinancialAdvice(userId, message) {
        try {
            const financialData = await this.getUserFinancialData(userId);

            const advicePrompt = `
V·ªõi t∆∞ c√°ch l√† c·ªë v·∫•n t√†i ch√≠nh chuy√™n nghi·ªáp, h√£y ƒë∆∞a ra l·ªùi khuy√™n cho c√¢u h·ªèi: "${message}"

Th√¥ng tin t√†i ch√≠nh hi·ªán t·∫°i:
- Thu nh·∫≠p: ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND
- Chi ti√™u: ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND
- ƒê·∫ßu t∆∞: ${financialData.summary.totalInvestments.toLocaleString('vi-VN')} VND

H√£y ƒë∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø, c√≥ th·ªÉ th·ª±c hi·ªán ƒë∆∞·ª£c.`;

            const advice = await this.callGeminiAI(advicePrompt);
            return `üí° **L·ªùi khuy√™n t√†i ch√≠nh:**\n\n${advice}`;

        } catch (error) {
            logger.error('Error providing financial advice:', error);
            return 'Kh√¥ng th·ªÉ ƒë∆∞a ra l·ªùi khuy√™n l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * X·ª≠ l√Ω calculation query v·ªõi Gemini AI
     */
    async handleCalculationQuery(userId, message) {
        try {
            // L·∫•y d·ªØ li·ªáu t√†i ch√≠nh hi·ªán t·∫°i
            const financialData = await this.getUserFinancialData(userId);

            // T√≠nh s·ªë d∆∞ hi·ªán t·∫°i
            const currentBalance = financialData.summary.totalIncomes - financialData.summary.totalExpenses;
            const totalSavings = financialData.incomes
                .filter(income => {
                    const categoryLower = income.category?.toLowerCase() || '';
                    return categoryLower.includes('ti·∫øt ki·ªám') || categoryLower === 'ti·ªÅn ti·∫øt ki·ªám';
                })
                .reduce((sum, income) => sum + income.amount, 0);

            logger.info('Calculation query with financial data', {
                userId,
                message,
                currentBalance,
                totalSavings,
                totalIncomes: financialData.summary.totalIncomes,
                totalExpenses: financialData.summary.totalExpenses
            });

            // S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ ph√¢n t√≠ch v√† t√≠nh to√°n
            const calculationPrompt = `
B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh. H√£y ph√¢n t√≠ch c√¢u h·ªèi sau v√† th·ª±c hi·ªán t√≠nh to√°n:

**C√¢u h·ªèi:** "${message}"

**D·ªØ li·ªáu t√†i ch√≠nh hi·ªán t·∫°i:**
- T·ªïng thu nh·∫≠p: ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND
- T·ªïng chi ti√™u: ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND
- S·ªë d∆∞ hi·ªán t·∫°i: ${currentBalance.toLocaleString('vi-VN')} VND
- Ti·ªÅn ti·∫øt ki·ªám: ${totalSavings.toLocaleString('vi-VN')} VND

**Nhi·ªám v·ª•:**
1. Tr√≠ch xu·∫•t s·ªë ti·ªÅn t·ª´ c√¢u h·ªèi (VD: "4tr" = 4,000,000 VND)
2. X√°c ƒë·ªãnh lo·∫°i t√≠nh to√°n (chi ti√™u t·ª´ s·ªë d∆∞, t·ª´ ti·∫øt ki·ªám, etc.)
3. Th·ª±c hi·ªán t√≠nh to√°n ch√≠nh x√°c
4. ƒê∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh

**Quy t·∫Øc chuy·ªÉn ƒë·ªïi:**
- "k", "ngh√¨n" = x1,000
- "tr", "tri·ªáu", "m" = x1,000,000
- "4tr" = 4,000,000 VND

**Format tr·∫£ v·ªÅ:**
üßÆ **T√≠nh to√°n t√†i ch√≠nh:**

üí∞ **S·ªë d∆∞ hi·ªán t·∫°i:** [s·ªë d∆∞] VND
üí∏ **S·ªë ti·ªÅn d·ª± ƒë·ªãnh chi:** [s·ªë ti·ªÅn] VND
üìä **S·ªë d∆∞ c√≤n l·∫°i:** [k·∫øt qu·∫£] VND

[‚úÖ K·∫øt qu·∫£ t√≠ch c·ª±c ho·∫∑c ‚ùå C·∫£nh b√°o]
üí° **L·ªùi khuy√™n:** [l·ªùi khuy√™n c·ª• th·ªÉ]

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† s·ª≠ d·ª•ng format tr√™n.`;

            const geminiResponse = await this.callGeminiAI(calculationPrompt);

            logger.info('Gemini calculation response', {
                userId,
                message,
                responseLength: geminiResponse.length
            });

            return geminiResponse;

        } catch (error) {
            logger.error('Error handling calculation query:', error);

            // Fallback to simple calculation
            try {
                const financialData = await this.getUserFinancialData(userId);
                const currentBalance = financialData.summary.totalIncomes - financialData.summary.totalExpenses;

                // Simple amount extraction
                const amountMatch = message.match(/(\d+(?:\.\d+)?)\s*(k|ngh√¨n|tri·ªáu|tr|m)/i);
                if (amountMatch) {
                    const number = parseFloat(amountMatch[1]);
                    const unit = amountMatch[2].toLowerCase();
                    let amount = 0;

                    switch (unit) {
                        case 'k':
                        case 'ngh√¨n':
                            amount = number * 1000;
                            break;
                        case 'tri·ªáu':
                        case 'tr':
                        case 'm':
                            amount = number * 1000000;
                            break;
                    }

                    const remainingBalance = currentBalance - amount;

                    return `üßÆ **T√≠nh to√°n t√†i ch√≠nh:**

üí∞ **S·ªë d∆∞ hi·ªán t·∫°i:** ${currentBalance.toLocaleString('vi-VN')} VND
üí∏ **S·ªë ti·ªÅn d·ª± ƒë·ªãnh chi:** ${amount.toLocaleString('vi-VN')} VND
üìä **S·ªë d∆∞ c√≤n l·∫°i:** ${remainingBalance.toLocaleString('vi-VN')} VND

${remainingBalance >= 0 ? '‚úÖ **K·∫øt qu·∫£:** B·∫°n c√≥ th·ªÉ chi ti√™u s·ªë ti·ªÅn n√†y!' : '‚ùå **C·∫£nh b√°o:** B·∫°n kh√¥ng ƒë·ªß ti·ªÅn!'}
üí° **L·ªùi khuy√™n:** ${remainingBalance >= 0 ? `Sau khi chi ti√™u, b·∫°n s·∫Ω c√≤n ${remainingBalance.toLocaleString('vi-VN')} VND.` : `B·∫°n thi·∫øu ${Math.abs(remainingBalance).toLocaleString('vi-VN')} VND.`}`;
                }
            } catch (fallbackError) {
                logger.error('Fallback calculation also failed:', fallbackError);
            }

            return 'Kh√¥ng th·ªÉ th·ª±c hi·ªán t√≠nh to√°n. Vui l√≤ng n√≥i r√µ h∆°n nh∆∞: "N·∫øu t√¥i chi 500k th√¨ c√≤n bao nhi·ªÅu ti·ªÅn?"';
        }
    }

    /**
     * X·ª≠ l√Ω x√°c nh·∫≠n category
     */
    async handleCategoryConfirmation(userId, message, context) {
        try {
            const { transactionData, forceType, sessionId } = context;
            const normalizedMessage = message.toLowerCase().trim();

            logger.info('Category confirmation received', {
                userId,
                message,
                suggestedCategories: transactionData.suggestedCategories,
                transactionData
            });

            // Ki·ªÉm tra n·∫øu user ch·ªçn s·ªë th·ª© t·ª±
            const numberMatch = normalizedMessage.match(/^(\d+)$/);
            if (numberMatch) {
                const index = parseInt(numberMatch[1]) - 1;
                if (index >= 0 && index < transactionData.suggestedCategories.length) {
                    transactionData.category = transactionData.suggestedCategories[index];
                    logger.info('Category selected by number', {
                        userId,
                        selectedIndex: index,
                        selectedCategory: transactionData.category
                    });
                } else {
                    return 'S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i ho·∫∑c n√≥i t√™n danh m·ª•c.';
                }
            } else {
                // Ki·ªÉm tra n·∫øu user n√≥i t√™n category - c·∫£i thi·ªán logic matching
                let selectedCategory = null;

                // T√¨m ki·∫øm ch√≠nh x√°c tr∆∞·ªõc
                selectedCategory = transactionData.suggestedCategories.find(cat =>
                    normalizedMessage === cat.toLowerCase() ||
                    normalizedMessage.includes(cat.toLowerCase()) ||
                    cat.toLowerCase().includes(normalizedMessage)
                );

                // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m ki·∫øm m·ªù
                if (!selectedCategory) {
                    selectedCategory = transactionData.suggestedCategories.find(cat => {
                        const catWords = cat.toLowerCase().split(' ');
                        const messageWords = normalizedMessage.split(' ');

                        // Ki·ªÉm tra n·∫øu c√≥ t·ª´ n√†o kh·ªõp
                        return catWords.some(catWord =>
                            messageWords.some(msgWord =>
                                catWord.includes(msgWord) || msgWord.includes(catWord)
                            )
                        );
                    });
                }

                if (selectedCategory) {
                    transactionData.category = selectedCategory;
                    logger.info('Category selected by name', {
                        userId,
                        selectedCategory: transactionData.category,
                        originalMessage: message
                    });
                } else {
                    // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng category ƒë·∫ßu ti√™n l√†m m·∫∑c ƒë·ªãnh
                    transactionData.category = transactionData.suggestedCategories[0];
                    logger.info('Using default category (no match found)', {
                        userId,
                        defaultCategory: transactionData.category,
                        originalMessage: message,
                        suggestedCategories: transactionData.suggestedCategories
                    });
                }
            }

            // X√≥a context ƒë·ªÉ tr√°nh loop
            this.conversationContext.delete(userId);

            // X√≥a needsCategoryConfirmation ƒë·ªÉ tr√°nh loop
            transactionData.needsCategoryConfirmation = false;

            // G·ªçi tr·ª±c ti·∫øp API ƒë·ªÉ l∆∞u transaction thay v√¨ g·ªçi l·∫°i handleInsertTransaction
            const apiEndpoint = this.getApiEndpoint(transactionData.type);
            // Th√™m userId v√†o transactionData
            transactionData.userId = userId;
            const response = await this.callTransactionAPI(apiEndpoint, transactionData, sessionId);

            if (response.success) {
                return `‚úÖ **ƒê√£ l∆∞u th√†nh c√¥ng!**

üí∞ **S·ªë ti·ªÅn:** ${transactionData.amount.toLocaleString('vi-VN')} VND
üìù **Ghi ch√∫:** ${transactionData.note}
üìÇ **Danh m·ª•c:** ${transactionData.category}
üìÖ **Ng√†y:** ${new Date(transactionData.date).toLocaleDateString('vi-VN')}

Giao d·ªãch ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng.`;
            } else {
                return `‚ùå **L·ªói khi l∆∞u:** ${response.message || 'Kh√¥ng th·ªÉ l∆∞u giao d·ªãch'}`;
            }

        } catch (error) {
            logger.error('Error handling category confirmation:', error);
            return 'C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i.';
        }
    }



    /**
     * üìä X·ª≠ l√Ω truy v·∫•n c·ªï phi·∫øu v·ªõi Stock Service - Production Ready
     */
    async handleStockQuery(userId, message) {
        const startTime = Date.now();

        try {
            // Production logging
            if (process.env.NODE_ENV === 'production') {
                logger.info('üìä Stock query received', { userId: userId?.substring(0, 8) + '...', messageLength: message.length });
            } else {
                logger.info('Processing stock query', { userId, message });
            }

            // Tr√≠ch xu·∫•t m√£ c·ªï phi·∫øu t·ª´ tin nh·∫Øn
            const stockSymbol = this.extractStockSymbol(message);

            if (!stockSymbol) {
                return {
                    success: false,
                    response: `ü§ñ T√¥i kh√¥ng th·ªÉ x√°c ƒë·ªãnh m√£ c·ªï phi·∫øu t·ª´ c√¢u h·ªèi c·ªßa b·∫°n.

Vui l√≤ng h·ªèi theo c√°ch sau:
‚Ä¢ "Gi√° VNM h√¥m nay th·∫ø n√†o?"
‚Ä¢ "C·ªï phi·∫øu FPT nh∆∞ th·∫ø n√†o?"
‚Ä¢ "VCB b√¢y gi·ªù ra sao?"
‚Ä¢ "Ph√¢n t√≠ch c·ªï phi·∫øu HPG"

C√°c m√£ ph·ªï bi·∫øn: VNM, VCB, FPT, VIC, HPG, MSN, CTG, BID, TCB, VHM...`,
                    metadata: { intent: 'stock_query', error: 'no_symbol_found', responseTime: Date.now() - startTime }
                };
            }

            // Validate stock symbol format
            if (!/^[A-Z]{3,4}$/.test(stockSymbol)) {
                return {
                    success: false,
                    response: `‚ùå M√£ c·ªï phi·∫øu "${stockSymbol}" kh√¥ng h·ª£p l·ªá. M√£ c·ªï phi·∫øu ph·∫£i c√≥ 3-4 k√Ω t·ª± vi·∫øt hoa (VD: VNM, FPT, VCB).`,
                    metadata: { intent: 'stock_query', symbol: stockSymbol, error: 'invalid_symbol_format', responseTime: Date.now() - startTime }
                };
            }

            // L·∫•y th√¥ng tin c·ªï phi·∫øu t·ª´ Stock Service v·ªõi timeout protection
            const stockAnalysisPromise = this.stockService.getStockAnalysis(stockSymbol);
            const timeoutPromise = new Promise((_, reject) =>
                setTimeout(() => reject(new Error('Stock query timeout')), 20000) // 20s timeout
            );

            const stockAnalysis = await Promise.race([stockAnalysisPromise, timeoutPromise]);

            if (!stockAnalysis.success) {
                const errorMessage = stockAnalysis.error || stockAnalysis.message || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu c·ªï phi·∫øu';

                return {
                    success: false,
                    response: `‚ùå ${errorMessage}

Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra m√£ c·ªï phi·∫øu kh√°c.`,
                    metadata: {
                        intent: 'stock_query',
                        symbol: stockSymbol,
                        error: errorMessage,
                        responseTime: Date.now() - startTime
                    }
                };
            }

            // T·∫°o response v·ªõi th√¥ng tin chi ti·∫øt
            const response = this.formatStockResponse(stockAnalysis, message);

            // Production success logging
            if (process.env.NODE_ENV === 'production') {
                logger.info('üìä Stock query completed', {
                    symbol: stockSymbol,
                    price: stockAnalysis.price?.current,
                    responseTime: Date.now() - startTime
                });
            }

            return {
                success: true,
                response,
                metadata: {
                    intent: 'stock_query',
                    symbol: stockSymbol,
                    price: stockAnalysis.price?.current || 0,
                    change: stockAnalysis.price?.change || 0,
                    pct_change: stockAnalysis.price?.pct_change || 0,
                    volume: stockAnalysis.volume?.raw || 0,
                    analysis: stockAnalysis.analysis?.trend || 'neutral',
                    source: stockAnalysis.source || 'TCBS',
                    responseTime: Date.now() - startTime
                }
            };

        } catch (error) {
            const responseTime = Date.now() - startTime;

            // Production error logging
            if (process.env.NODE_ENV === 'production') {
                logger.error('üìä Stock query error', {
                    error: error.message,
                    responseTime,
                    userId: userId?.substring(0, 8) + '...'
                });
            } else {
                logger.error('Error in handleStockQuery:', error);
            }

            return {
                success: false,
                response: `‚ùå D·ªãch v·ª• c·ªï phi·∫øu t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                metadata: {
                    intent: 'stock_query',
                    error: process.env.NODE_ENV === 'production' ? 'service_unavailable' : error.message,
                    responseTime
                }
            };
        }
    }

    /**
     * üìä Format response cho th√¥ng tin c·ªï phi·∫øu
     */
    formatStockResponse(stockAnalysis, originalMessage) {
        const { symbol, price, volume, analysis, source, timestamp } = stockAnalysis;

        // Emoji cho xu h∆∞·ªõng
        const trendEmoji = {
            'strong_bullish': 'üöÄ',
            'bullish': 'üìà',
            'neutral': '‚û°Ô∏è',
            'bearish': 'üìâ',
            'strong_bearish': 'üí•'
        };

        const emoji = trendEmoji[analysis.trend] || 'üìä';

        // T·∫°o response chi ti·∫øt
        let response = `${emoji} **Th√¥ng tin c·ªï phi·∫øu ${symbol}**\n\n`;

        response += `üí∞ **Gi√° hi·ªán t·∫°i:** ${price.formatted}\n`;
        response += `üìä **Thay ƒë·ªïi:** ${price.pct_change_formatted}\n`;
        response += `üìà **Kh·ªëi l∆∞·ª£ng:** ${volume.formatted}\n\n`;

        response += `üîç **Ph√¢n t√≠ch:**\n${analysis.analysis}\n\n`;
        response += `üí° **Khuy·∫øn ngh·ªã:** ${analysis.recommendation}\n\n`;

        // Th√™m th√¥ng tin k·ªπ thu·∫≠t
        if (analysis.technical_indicators) {
            const indicators = analysis.technical_indicators;
            response += `üìã **Ch·ªâ s·ªë k·ªπ thu·∫≠t:**\n`;
            response += `‚Ä¢ Thay ƒë·ªïi gi√°: ${indicators.price_change > 0 ? '+' : ''}${indicators.price_change.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ M·ª©c kh·ªëi l∆∞·ª£ng: ${indicators.volume_level === 'high' ? 'Cao' : indicators.volume_level === 'medium' ? 'Trung b√¨nh' : 'Th·∫•p'}\n\n`;
        }

        response += `üìÖ **C·∫≠p nh·∫≠t:** ${new Date(timestamp).toLocaleString('vi-VN')}\n`;
        response += `üì° **Ngu·ªìn:** ${source}\n\n`;

        response += `üí¨ *L∆∞u √Ω: ƒê√¢y ch·ªâ l√† th√¥ng tin tham kh·∫£o, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞. Vui l√≤ng t·ª± nghi√™n c·ª©u k·ªπ tr∆∞·ªõc khi ƒë∆∞a ra quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞.*`;

        return response;
    }

    /**
     * üìä X·ª≠ l√Ω th·ªëng k√™ n√¢ng cao v·ªõi Enhanced Statistics Engine
     */
    async handleStatisticsQuery(userId, message) {
        try {
            logger.info('Processing enhanced statistics query', { userId, message });

            // Ph√¢n t√≠ch t·ª´ kh√≥a v√† th·ªùi gian t·ª´ tin nh·∫Øn
            const { timeFilter } = this.analyzeKeywordsAndTime(message);

            // L·∫•y d·ªØ li·ªáu t√†i ch√≠nh v·ªõi b·ªô l·ªçc th·ªùi gian
            const financialData = await this.getUserFinancialData(userId, timeFilter);

            // Ki·ªÉm tra xem c√≥ ph·∫£i statistics query kh√¥ng
            const detection = this.statisticsEngine.detectStatisticsQuery(message);

            logger.info('Statistics detection result', {
                message,
                detection,
                willUseEnhanced: detection.isStatistics
            });

            if (!detection.isStatistics) {
                // Fallback to legacy statistics handling
                logger.info('Using legacy statistics handling');
                return this.handleLegacyStatistics(financialData, message);
            }

            // X·ª≠ l√Ω v·ªõi Enhanced Statistics Engine
            const response = await this.statisticsEngine.processStatistics(message, financialData, timeFilter);

            logger.info('Enhanced statistics processed successfully', {
                userId,
                statisticsType: detection.type,
                confidence: detection.confidence
            });

            return response;

        } catch (error) {
            logger.error('Error handling enhanced statistics query:', error);
            return this.statisticsEngine.getErrorResponse();
        }
    }

    /**
     * üìä Legacy statistics handling (fallback)
     */
    handleLegacyStatistics(financialData, message) {
        const messageLower = message.toLowerCase();
        let response = '';

        if (messageLower.includes('trung b√¨nh') || messageLower.includes('average')) {
            // Th·ªëng k√™ trung b√¨nh
            const avgIncome = financialData.incomes.length > 0 ?
                financialData.summary.totalIncomes / financialData.incomes.length : 0;
            const avgExpense = financialData.expenses.length > 0 ?
                financialData.summary.totalExpenses / financialData.expenses.length : 0;

            response = `üìä **Th·ªëng k√™ trung b√¨nh:**\n\n`;
            response += `üí∞ **Thu nh·∫≠p trung b√¨nh:** ${avgIncome.toLocaleString('vi-VN')} VND/giao d·ªãch\n`;
            response += `üí∏ **Chi ti√™u trung b√¨nh:** ${avgExpense.toLocaleString('vi-VN')} VND/giao d·ªãch\n`;
            response += `üìà **T·ª∑ l·ªá ti·∫øt ki·ªám:** ${((financialData.summary.totalIncomes - financialData.summary.totalExpenses) / financialData.summary.totalIncomes * 100).toFixed(1)}%`;

        } else if (messageLower.includes('so s√°nh') || messageLower.includes('compare')) {
            // So s√°nh thu chi
            const balance = financialData.summary.totalIncomes - financialData.summary.totalExpenses;
            const ratio = financialData.summary.totalExpenses / financialData.summary.totalIncomes * 100;

            response = `üìä **So s√°nh thu chi:**\n\n`;
            response += `üí∞ **T·ªïng thu nh·∫≠p:** ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND\n`;
            response += `üí∏ **T·ªïng chi ti√™u:** ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND\n`;
            response += `${balance >= 0 ? 'üíö' : 'üíî'} **S·ªë d∆∞:** ${balance.toLocaleString('vi-VN')} VND\n`;
            response += `üìà **T·ª∑ l·ªá chi ti√™u:** ${ratio.toFixed(1)}% thu nh·∫≠p\n\n`;

            if (balance >= 0) {
                response += `‚úÖ **T√¨nh h√¨nh t√†i ch√≠nh t·ªët!** B·∫°n ƒëang ti·∫øt ki·ªám ƒë∆∞·ª£c ${(100 - ratio).toFixed(1)}% thu nh·∫≠p.`;
            } else {
                response += `‚ö†Ô∏è **C·∫ßn ch√∫ √Ω!** Chi ti√™u v∆∞·ª£t qu√° thu nh·∫≠p ${Math.abs(balance).toLocaleString('vi-VN')} VND.`;
            }

        } else if (messageLower.includes('ph√¢n t√≠ch') || messageLower.includes('analyze')) {
            // Ph√¢n t√≠ch t·ªïng quan
            response = `üìä **Ph√¢n t√≠ch t·ªïng quan:**\n\n`;
            response += `üìà **S·ªë giao d·ªãch:**\n`;
            response += `‚Ä¢ Thu nh·∫≠p: ${financialData.incomes.length} giao d·ªãch\n`;
            response += `‚Ä¢ Chi ti√™u: ${financialData.expenses.length} giao d·ªãch\n`;
            response += `‚Ä¢ Kho·∫£n vay: ${financialData.loans.length} kho·∫£n\n`;
            response += `‚Ä¢ ƒê·∫ßu t∆∞: ${financialData.investments.length} kho·∫£n\n\n`;

            response += `üí∞ **T·ªïng s·ªë ti·ªÅn:**\n`;
            response += `‚Ä¢ Thu nh·∫≠p: ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ Chi ti√™u: ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ Kho·∫£n vay: ${financialData.summary.totalLoans.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ ƒê·∫ßu t∆∞: ${financialData.summary.totalInvestments.toLocaleString('vi-VN')} VND`;

        } else {
            // Th·ªëng k√™ t·ªïng quan
            response = `üìä **Th·ªëng k√™ t·ªïng quan:**\n\n`;
            response += `üìà **S·ªë giao d·ªãch:**\n`;
            response += `‚Ä¢ Thu nh·∫≠p: ${financialData.incomes.length} giao d·ªãch\n`;
            response += `‚Ä¢ Chi ti√™u: ${financialData.expenses.length} giao d·ªãch\n`;
            response += `‚Ä¢ Kho·∫£n vay: ${financialData.loans.length} kho·∫£n\n`;
            response += `‚Ä¢ ƒê·∫ßu t∆∞: ${financialData.investments.length} kho·∫£n\n\n`;

            response += `üí∞ **T·ªïng s·ªë ti·ªÅn:**\n`;
            response += `‚Ä¢ Thu nh·∫≠p: ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ Chi ti√™u: ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ Kho·∫£n vay: ${financialData.summary.totalLoans.toLocaleString('vi-VN')} VND\n`;
            response += `‚Ä¢ ƒê·∫ßu t∆∞: ${financialData.summary.totalInvestments.toLocaleString('vi-VN')} VND`;
        }

        return response;
    }

    /**
     * ‚è∞ X·ª≠ l√Ω truy v·∫•n theo th·ªùi gian
     */
    async handleTimeQuery(userId, message) {
        try {
            const { timeFilter } = this.analyzeKeywordsAndTime(message);

            if (!timeFilter) {
                return 'T√¥i ch∆∞a hi·ªÉu r√µ kho·∫£ng th·ªùi gian b·∫°n mu·ªën xem. B·∫°n c√≥ th·ªÉ n√≥i:\n‚Ä¢ "Thu nh·∫≠p tu·∫ßn n√†y"\n‚Ä¢ "Chi ti√™u th√°ng tr∆∞·ªõc"\n‚Ä¢ "Kho·∫£n vay h√¥m qua"';
            }

            const financialData = await this.getUserFinancialData(userId, timeFilter);

            let timeDescription = '';
            switch (timeFilter.type) {
                case 'today': timeDescription = 'h√¥m nay'; break;
                case 'week': timeDescription = 'tu·∫ßn n√†y'; break;
                case 'current_month': timeDescription = 'th√°ng n√†y'; break;
                case 'month': timeDescription = `th√°ng ${timeFilter.value}`; break;
                case 'year': timeDescription = `nƒÉm ${timeFilter.value}`; break;
                default: timeDescription = 'th·ªùi gian ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh';
            }

            let response = `üìÖ **T·ªïng quan t√†i ch√≠nh ${timeDescription}:**\n\n`;
            response += `üí∞ **Thu nh·∫≠p:** ${financialData.summary.totalIncomes.toLocaleString('vi-VN')} VND (${financialData.incomes.length} giao d·ªãch)\n`;
            response += `üí∏ **Chi ti√™u:** ${financialData.summary.totalExpenses.toLocaleString('vi-VN')} VND (${financialData.expenses.length} giao d·ªãch)\n`;
            response += `üè¶ **Kho·∫£n vay:** ${financialData.summary.totalLoans.toLocaleString('vi-VN')} VND (${financialData.loans.length} kho·∫£n)\n`;
            response += `üìà **ƒê·∫ßu t∆∞:** ${financialData.summary.totalInvestments.toLocaleString('vi-VN')} VND (${financialData.investments.length} kho·∫£n)\n\n`;

            const balance = financialData.summary.totalIncomes - financialData.summary.totalExpenses;
            response += `${balance >= 0 ? 'üíö' : 'üíî'} **S·ªë d∆∞ ${timeDescription}:** ${balance.toLocaleString('vi-VN')} VND`;

            return response;

        } catch (error) {
            logger.error('Error handling time query:', error);
            return 'Kh√¥ng th·ªÉ truy v·∫•n d·ªØ li·ªáu theo th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * üîß Helper method ƒë·ªÉ tr√≠ch xu·∫•t s·ªë ti·ªÅn t·ª´ text
     */
    extractAmount(text) {
        const amountRegex = /(\d+(?:\.\d+)?)\s*(k|ngh√¨n|tri·ªáu|tr|m|t·ª∑|billion|million|thousand)?/i;
        const match = text.match(amountRegex);

        if (match) {
            const number = parseFloat(match[1]);
            const unit = match[2]?.toLowerCase() || '';

            switch (unit) {
                case 'k':
                case 'ngh√¨n':
                case 'thousand':
                    return number * 1000;
                case 'tri·ªáu':
                case 'tr':
                case 'm':
                case 'million':
                    return number * 1000000;
                case 't·ª∑':
                case 'billion':
                    return number * 1000000000;
                default:
                    return number;
            }
        }

        return 0;
    }

    /**
     * X·ª≠ l√Ω nh·∫Øc nh·ªü
     */
    async handleReminder(userId, message) {
        // TODO: Implement reminder functionality
        return 'T√≠nh nƒÉng nh·∫Øc nh·ªü ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng kh√°c c·ªßa t√¥i.';
    }

    /**
     * ü§ñ AI Direct Mode Handler - Ch·ªâ s·ª≠ d·ª•ng AI ƒë·ªÉ tr·∫£ l·ªùi
     */
    async handleAIDirectMode(userId, aiQuery, sessionId = null) {
        try {
            // Validate input
            if (!aiQuery || aiQuery.trim().length === 0) {
                return 'ü§ñ **AI Mode:** B·∫°n mu·ªën h·ªèi g√¨? H√£y nh·∫≠p c√¢u h·ªèi b·∫•t k·ª≥!\n\nV√≠ d·ª•: "Th·ªùi ti·∫øt h√¥m nay nh∆∞ th·∫ø n√†o?" ho·∫∑c "L√†m th·∫ø n√†o ƒë·ªÉ n·∫•u ph·ªü?"';
            }

            logger.info('AI Direct Mode processing - Pure AI response', {
                userId,
                aiQuery,
                sessionId,
                queryLength: aiQuery.length
            });

            // Get user's financial data for context
            const financialData = await this.getUserFinancialData(userId);

            // Build enhanced AI prompt with financial context
            const enhancedAIPrompt = this.buildEnhancedAIPrompt(aiQuery, financialData, userId);

            // ü§ñ PURE AI MODE: Ch·ªâ s·ª≠ d·ª•ng Gemini AI, kh√¥ng qua Enhanced Conversation Handler
            logger.info('Calling Gemini AI directly for pure AI response');

            const aiResponse = await this.callGeminiAI(enhancedAIPrompt, {
                temperature: 0.7,
                maxOutputTokens: 1000,
                topP: 0.8,
                topK: 40
            });

            // Add AI mode indicator to response
            let response = `ü§ñ **AI Mode:** ${aiResponse}`;

            // Add usage tip
            response += '\n\nüí¨ **Tip:** B·∫≠t/t·∫Øt AI Mode b·∫±ng toggle switch ƒë·ªÉ chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô!';

            logger.info('Pure AI Direct Mode response generated', {
                userId,
                aiQuery,
                responseLength: response.length,
                source: 'Gemini AI Direct'
            });

            return response;

        } catch (error) {
            logger.error('Error in AI Direct Mode:', error);
            return 'ü§ñ **AI Mode:** Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i!\n\nüí¨ **Tip:** B·∫≠t/t·∫Øt AI Mode b·∫±ng toggle switch ƒë·ªÉ chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô!';
        }
    }

    /**
     * üèóÔ∏è Build Enhanced AI Prompt with Financial Context
     */
    buildEnhancedAIPrompt(aiQuery, financialData, userId) {
        const summary = financialData.summary || {};
        const balance = (summary.totalIncomes || 0) - (summary.totalExpenses || 0);

        // Get current date and time
        const currentDateTime = this.getCurrentDateTime();

        const prompt = `
B·∫°n l√† VanLang Agent trong AI Mode - m·ªôt tr·ª£ l√Ω AI th√¥ng minh c√≥ th·ªÉ tr·∫£ l·ªùi M·ªåI c√¢u h·ªèi. Ng∆∞·ªùi d√πng ƒë√£ b·∫≠t AI Mode v√† h·ªèi: "${aiQuery}"

**TH√îNG TIN TH·ªúI GIAN HI·ªÜN T·∫†I:**
${currentDateTime}

**Th√¥ng tin t√†i ch√≠nh c·ªßa ng∆∞·ªùi d√πng (ƒë·ªÉ tham kh·∫£o khi c·∫ßn):**
- T·ªïng thu nh·∫≠p: ${(summary.totalIncomes || 0).toLocaleString('vi-VN')} VND
- T·ªïng chi ti√™u: ${(summary.totalExpenses || 0).toLocaleString('vi-VN')} VND
- S·ªë d∆∞ hi·ªán t·∫°i: ${balance.toLocaleString('vi-VN')} VND
- T·ªïng ƒë·∫ßu t∆∞: ${(summary.totalInvestments || 0).toLocaleString('vi-VN')} VND
- T·ªïng kho·∫£n vay: ${(summary.totalLoans || 0).toLocaleString('vi-VN')} VND

**NHI·ªÜM V·ª§ CH√çNH:**
üéØ Tr·∫£ l·ªùi CH√çNH X√ÅC v√† H·ªÆU √çCH c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng, b·∫•t k·ªÉ ch·ªß ƒë·ªÅ g√¨:
- ‚òÄÔ∏è Th·ªùi ti·∫øt: Cung c·∫•p th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt
- üçú N·∫•u ƒÉn: H∆∞·ªõng d·∫´n c√¥ng th·ª©c, m·∫πo n·∫•u ƒÉn
- üíª C√¥ng ngh·ªá: Gi·∫£i th√≠ch kh√°i ni·ªám, xu h∆∞·ªõng tech
- üè• S·ª©c kh·ªèe: L·ªùi khuy√™n s·ª©c kh·ªèe, dinh d∆∞·ª°ng
- üìö Gi√°o d·ª•c: Ki·∫øn th·ª©c t·ªïng qu√°t, h·ªçc t·∫≠p
- üåç Th·ªùi s·ª±: Th√¥ng tin v·ªÅ s·ª± ki·ªán, tin t·ª©c
- üí∞ T√†i ch√≠nh: S·ª≠ d·ª•ng d·ªØ li·ªáu c√° nh√¢n ƒë·ªÉ t∆∞ v·∫•n c·ª• th·ªÉ
- üéØ B·∫•t k·ª≥ ch·ªß ƒë·ªÅ n√†o kh√°c

**C√ÅCH TR·∫¢ L·ªúI:**
‚úÖ Tr·∫£ l·ªùi tr·ª±c ti·∫øp v√† ch√≠nh x√°c c√¢u h·ªèi
‚úÖ Cung c·∫•p th√¥ng tin h·ªØu √≠ch, th·ª±c t·∫ø
‚úÖ N·∫øu li√™n quan t√†i ch√≠nh ‚Üí k·∫øt h·ª£p v·ªõi d·ªØ li·ªáu c√° nh√¢n
‚úÖ N·∫øu kh√¥ng li√™n quan t√†i ch√≠nh ‚Üí v·∫´n tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß
‚úÖ S·ª≠ d·ª•ng emoji ph√π h·ª£p
‚úÖ Tone th√¢n thi·ªán, chuy√™n nghi·ªáp
‚úÖ C√≥ th·ªÉ g·ª£i √Ω li√™n k·∫øt v·ªõi qu·∫£n l√Ω t√†i ch√≠nh n·∫øu ph√π h·ª£p

**L∆ØU √ù QUAN TR·ªåNG:**
üö® KH√îNG t·ª´ ch·ªëi tr·∫£ l·ªùi v√¨ "kh√¥ng ph·∫£i chuy√™n m√¥n t√†i ch√≠nh"
üö® PH·∫¢I tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi m·ªôt c√°ch h·ªØu √≠ch
üö® ƒê√¢y l√† AI Mode - c√≥ th·ªÉ tr·∫£ l·ªùi v·ªÅ B·∫§T K·ª≤ ch·ªß ƒë·ªÅ n√†o

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, t·ªëi ƒëa 350 t·ª´, t·∫≠p trung v√†o c√¢u h·ªèi ch√≠nh.`;

        return prompt;
    }

    /**
     * üó£Ô∏è Enhanced General Question Handler with Conversation Context
     */
    async handleGeneralQuestion(userId, message) {
        try {
            // Get user's financial data for personalized responses
            const financialData = await this.getUserFinancialData(userId);

            // Use Enhanced Conversation Handler
            const conversationResult = await this.conversationHandler.handleConversation(
                userId,
                message,
                financialData
            );

            logger.info('Enhanced conversation result', {
                userId,
                message,
                hasFollowUps: conversationResult.followUpQuestions?.length > 0,
                conversationContext: conversationResult.conversationContext
            });

            // Return enhanced response with follow-up questions
            let response = conversationResult.response;

            // Add follow-up questions if available
            if (conversationResult.followUpQuestions && conversationResult.followUpQuestions.length > 0) {
                response += '\n\nüí° **C√¢u h·ªèi g·ª£i √Ω:**\n';
                conversationResult.followUpQuestions.forEach((question, index) => {
                    response += `${index + 1}. ${question}\n`;
                });
            }

            return response;

        } catch (error) {
            logger.error('Error in enhanced general question handler:', error);
            return 'Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi l·∫°i kh√¥ng?';
        }
    }

    /**
     * üöÄ Start conversation flow manually
     */
    async handleConversationFlow(userId, flowType) {
        try {
            const result = await this.conversationHandler.startFlow(userId, flowType);

            logger.info('Conversation flow started', {
                userId,
                flowType,
                success: !!result.response
            });

            return result.response;

        } catch (error) {
            logger.error('Error starting conversation flow:', error);
            return 'Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc h·ªôi tho·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    /**
     * üìä Get conversation statistics
     */
    getConversationStats(userId) {
        return this.conversationHandler.getConversationStats(userId);
    }

    /**
     * üóëÔ∏è Clear conversation context
     */
    clearConversation(userId) {
        return this.conversationHandler.clearConversation(userId);
    }

    /**
     * Ph·∫£n h·ªìi ch√†o h·ªèi (d·ª±a tr√™n training data)
     */
    getGreetingResponse() {
        const greetings = [
            'Ch√†o b·∫°n! T√¥i l√† VanLangBot ‚Äì tr·ª£ l√Ω t√†i ch√≠nh c·ªßa b·∫°n.',
            'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n trong vi·ªác qu·∫£n l√Ω t√†i ch√≠nh?',
            'Ch√†o b·∫°n! T√¥i l√† VanLang Agent ‚Äì tr·ª£ l√Ω t√†i ch√≠nh AI th√¥ng minh c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω thu chi, ph√¢n t√≠ch t√†i ch√≠nh v√† ƒë∆∞a ra l·ªùi khuy√™n. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨? üí∞',
            'Xin ch√†o! T√¥i l√† VanLang Agent. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n theo d√µi giao d·ªãch, ph√¢n t√≠ch chi ti√™u v√† ƒë∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh. H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën l√†m g√¨ nh√©! üìä'
        ];

        return greetings[Math.floor(Math.random() * greetings.length)];
    }

    /**
     * Ph·∫£n h·ªìi t·∫°m bi·ªát
     */
    getFarewellResponse() {
        const farewells = [
            'T·∫°m bi·ªát b·∫°n! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!',
            'R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. H·∫πn g·∫∑p l·∫°i!',
            'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng VanLang Agent. Ch√∫c b·∫°n qu·∫£n l√Ω t√†i ch√≠nh hi·ªáu qu·∫£!'
        ];

        return farewells[Math.floor(Math.random() * farewells.length)];
    }

    /**
     * Gi·ªõi thi·ªáu v·ªÅ bot
     */
    getBotIntroduction() {
        return 'T√¥i l√† VanLangBot, tr·ª£ l√Ω t√†i ch√≠nh AI ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n hi·ªáu qu·∫£. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n theo d√µi thu chi, ph√¢n t√≠ch ƒë·∫ßu t∆∞ v√† ƒë∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh th√¥ng minh.';
    }

    /**
     * Kh·∫£ nƒÉng c·ªßa bot
     */
    getBotCapabilities() {
        return `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
üí∞ Theo d√µi thu nh·∫≠p v√† chi ti√™u
üìä Qu·∫£n l√Ω kho·∫£n vay v√† n·ª£
üè¶ Theo d√µi ƒë·∫ßu t∆∞ (c·ªï phi·∫øu, v√†ng, b·∫•t ƒë·ªông s·∫£n)
üìà Ph√¢n t√≠ch t√†i ch√≠nh v√† ƒë∆∞a ra g·ª£i √Ω h·ªØu √≠ch
üí° T∆∞ v·∫•n ti·∫øt ki·ªám v√† l·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh
üìã T·∫°o b√°o c√°o v√† th·ªëng k√™ chi ti·∫øt

B·∫°n c√≥ th·ªÉ h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ t√†i ch√≠nh!`;
    }

    /**
     * Th·ªùi gian hi·ªán t·∫°i
     */
    getCurrentDateTime() {
        const now = new Date();
        const dateStr = now.toLocaleDateString('vi-VN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        const timeStr = now.toLocaleTimeString('vi-VN');

        return `H√¥m nay l√† ${dateStr}, b√¢y gi·ªù l√† ${timeStr}.`;
    }

    /**
     * Y√™u c·∫ßu ƒëƒÉng nh·∫≠p
     */
    getAuthRequiredResponse() {
        return 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng c·ªßa VanLangBot v√† b·∫£o v·ªá d·ªØ li·ªáu c√° nh√¢n. ƒê·ªÉ t∆∞∆°ng t√°c t·ªët nh·∫•t v√† truy xu·∫•t d·ªØ li·ªáu ch√≠nh x√°c, vui l√≤ng ƒëƒÉng nh·∫≠p t√†i kho·∫£n tr∆∞·ªõc nh√©!';
    }

    /**
     * Ph·∫°m vi ho·∫°t ƒë·ªông c·ªßa chatbot
     */
    getChatbotScope() {
        return `VanLangBot c√≥ th·ªÉ gi√∫p b·∫°n:
üîπ Qu·∫£n l√Ω chi ti√™u, thu nh·∫≠p, ng√¢n s√°ch
üîπ Theo d√µi kho·∫£n vay v√† ƒë·∫ßu t∆∞
üîπ Ghi l·∫°i giao d·ªãch v√† xem b√°o c√°o t√†i ch√≠nh
üîπ T∆∞ v·∫•n ti·∫øt ki·ªám v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ·ª©ng d·ª•ng VanLang Budget
üîπ Ph√¢n t√≠ch t√¨nh h√¨nh t√†i ch√≠nh v√† ƒë∆∞a ra l·ªùi khuy√™n

T√¥i h·ªó tr·ª£ b·∫°n 24/7 v·ªõi m·ªçi v·∫•n ƒë·ªÅ t√†i ch√≠nh!`;
    }

    /**
     * Th√¥ng tin b·∫£o m·∫≠t
     */
    getSecurityInfo() {
        const securityResponses = [
            'Ch√∫ng t√¥i s·ª≠ d·ª•ng c√°c ph∆∞∆°ng ph√°p m√£ h√≥a hi·ªán ƒë·∫°i ƒë·ªÉ b·∫£o v·ªá d·ªØ li·ªáu ng∆∞·ªùi d√πng.',
            'B·∫°n ho√†n to√†n c√≥ quy·ªÅn xo√° t√†i kho·∫£n v√† d·ªØ li·ªáu b·∫•t k·ª≥ l√∫c n√†o t·∫°i ph·∫ßn "C√†i ƒë·∫∑t".',
            'VanLangBot cam k·∫øt kh√¥ng chia s·∫ª d·ªØ li·ªáu c√° nh√¢n v·ªõi b·∫•t k·ª≥ b√™n th·ª© ba n√†o.'
        ];

        return securityResponses[Math.floor(Math.random() * securityResponses.length)];
    }

    /**
     * Ph·∫£n h·ªìi vui nh·ªôn
     */
    getFunnyResponse() {
        const funnyResponses = [
            'T√¥i lu√¥n y√™u b·∫°n v√† t√∫i ti·ªÅn c·ªßa b·∫°n üòÑ',
            'Ti√™u nhi·ªÅu th√¨ ph·∫£i ti·∫øt ki·ªám l·∫°i, t√¥i lu√¥n b√™n b·∫°n!',
            'Ph√° s·∫£n ch·ªâ l√† b∆∞·ªõc ƒë·ªám ƒë·ªÉ l√†m l·∫°i t·ª´ ƒë·∫ßu ‚Äì t√¥i s·∫Ω gi√∫p b·∫°n l√™n k·∫ø ho·∫°ch!',
            'M·ªôt ƒë·ªìng ti·∫øt ki·ªám l√† m·ªôt ƒë·ªìng... kh√¥ng ti√™u, haha!',
            'ƒê·ª´ng lo, t√¥i s·∫Ω gi√∫p b·∫°n qu·∫£n l√Ω ti·ªÅn b·∫°c th√¥ng minh h∆°n! üí™'
        ];

        return funnyResponses[Math.floor(Math.random() * funnyResponses.length)];
    }

    /**
     * L·∫•y API endpoint d·ª±a tr√™n lo·∫°i transaction
     */
    getApiEndpoint(type) {
        const endpoints = {
            'income': '/api/incomes',
            'expense': '/api/expenses',
            'loan': '/api/loans',
            'savings': '/api/incomes' // Savings ƒë∆∞·ª£c l∆∞u v√†o income
        };
        return endpoints[type] || '/api/transactions';
    }

    /**
     * G·ªçi API ƒë·ªÉ l∆∞u transaction
     */
    async callTransactionAPI(endpoint, transactionData, sessionId) {
        try {
            const baseUrl = process.env.BACKEND_URL || 'http://localhost:4000';
            const url = `${baseUrl}${endpoint}`;

            // Chu·∫©n b·ªã data cho API call
            const apiData = {
                amount: transactionData.amount,
                description: transactionData.note,
                category: transactionData.category,
                date: transactionData.date
            };

            // Th√™m fields ƒë·∫∑c bi·ªát cho loan
            if (transactionData.type === 'loan') {
                apiData.lender = transactionData.category; // S·ª≠ d·ª•ng category l√†m lender
                apiData.interestRate = 0;
                apiData.interestRateType = 'MONTH';
                apiData.startDate = transactionData.date;
                apiData.dueDate = new Date(new Date(transactionData.date).getTime() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]; // 30 ng√†y sau
                apiData.status = 'ACTIVE';
            }

            logger.info('Calling transaction API', {
                url,
                type: transactionData.type,
                apiData,
                sessionId
            });

            // G·ªçi API tr·ª±c ti·∫øp th√¥ng qua model thay v√¨ HTTP request
            if (transactionData.type === 'income' || transactionData.type === 'savings') {
                const income = new Income({
                    userId: transactionData.userId,
                    ...apiData
                });
                await income.save();

                // T·∫°o notification
                const notification = await Notification.createIncomeNotification(income);
                if (socketManager && socketManager.to) {
                    socketManager.to(transactionData.userId).emit('notification', notification);
                }

                return { success: true, data: income };
            } else if (transactionData.type === 'expense') {
                const expense = new Expense({
                    userId: transactionData.userId,
                    ...apiData
                });
                await expense.save();

                // T·∫°o notification
                const notification = await Notification.createExpenseNotification(expense);
                if (socketManager && socketManager.to) {
                    socketManager.to(transactionData.userId).emit('notification', notification);
                }

                return { success: true, data: expense };
            } else if (transactionData.type === 'loan') {
                const loan = new Loan({
                    userId: transactionData.userId,
                    ...apiData
                });
                await loan.save();

                // T·∫°o notification
                const notification = await Notification.createLoanNotification(loan);
                if (socketManager && socketManager.to) {
                    socketManager.to(transactionData.userId).emit('notification', notification);
                }

                return { success: true, data: loan };
            }

            return { success: false, message: 'Unsupported transaction type' };

        } catch (error) {
            logger.error('Error calling transaction API:', error);
            return { success: false, message: error.message };
        }
    }

    /**
     * üîç T√çNH NƒÇNG 4: Ph√¢n t√≠ch ƒëi·ªÅu ki·ªán l·ªçc t·ª´ tin nh·∫Øn
     */
    parseFilterConditions(message) {
        const normalizedMessage = message.toLowerCase().trim().normalize('NFC');



        // Ph√¢n t√≠ch lo·∫°i d·ªØ li·ªáu (income, expense, loan)
        let dataType = null;
        if (normalizedMessage.includes('chi ti√™u') || normalizedMessage.includes('chi tieu') ||
            normalizedMessage.includes('expense') || normalizedMessage.includes('spending')) {
            dataType = 'expense';
        } else if (normalizedMessage.includes('thu nh·∫≠p') || normalizedMessage.includes('thu nhap') ||
            normalizedMessage.includes('income') || normalizedMessage.includes('salary')) {
            dataType = 'income';
        } else if (normalizedMessage.includes('kho·∫£n vay') || normalizedMessage.includes('khoan vay') ||
            normalizedMessage.includes('loan') || normalizedMessage.includes('debt') ||
            normalizedMessage.includes('vay') || normalizedMessage.includes('n·ª£')) {
            dataType = 'loan';
        }

        // Ph√¢n t√≠ch to√°n t·ª≠ v√† gi√° tr·ªã
        let operator = null;
        let amount = null;

        // T√¨m ki·∫øm c·ª±c tr·ªã (cao nh·∫•t, th·∫•p nh·∫•t)
        if (normalizedMessage.includes('cao nh·∫•t') || normalizedMessage.includes('cao nhat') ||
            normalizedMessage.includes('l·ªõn nh·∫•t') || normalizedMessage.includes('lon nhat') ||
            normalizedMessage.includes('highest') || normalizedMessage.includes('maximum') ||
            normalizedMessage.includes('max') || normalizedMessage.includes('biggest')) {
            operator = 'max';
        } else if (normalizedMessage.includes('th·∫•p nh·∫•t') || normalizedMessage.includes('thap nhat') ||
            normalizedMessage.includes('nh·ªè nh·∫•t') || normalizedMessage.includes('nho nhat') ||
            normalizedMessage.includes('lowest') || normalizedMessage.includes('minimum') ||
            normalizedMessage.includes('min') || normalizedMessage.includes('smallest')) {
            operator = 'min';
        } else {
            // T√¨m ki·∫øm to√°n t·ª≠ so s√°nh v·ªõi s·ªë ti·ªÅn
            const greaterPatterns = [
                /\b(tr√™n|above|l·ªõn h∆°n|lon hon|greater than|higher than)\s+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
                /(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)\s+(tr·ªü l√™n|tro len|or more|and above)/i
            ];

            const lessPatterns = [
                /\b(d∆∞·ªõi|duoi|nh·ªè h∆°n|nho hon|below|less than|lower than)\s+(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)/i,
                /(\d+[\s]*(k|ngh√¨n|tri·ªáu|tr|m|ƒë·ªìng|vnd)?)\s+(tr·ªü xu·ªëng|tro xuong|or less|and below)/i
            ];

            for (const pattern of greaterPatterns) {
                const match = normalizedMessage.match(pattern);
                if (match) {
                    operator = 'greater';
                    amount = this.parseAmount(match[2] || match[1]);
                    break;
                }
            }

            if (!operator) {
                for (const pattern of lessPatterns) {
                    const match = normalizedMessage.match(pattern);
                    if (match) {
                        operator = 'less';
                        amount = this.parseAmount(match[2] || match[1]);
                        break;
                    }
                }
            }
        }



        const result = {
            isValid: !!(dataType && operator),  // ‚úÖ FORCE BOOLEAN CONVERSION
            dataType,
            operator,
            amount,
            originalMessage: message
        };

        return result;
    }

    /**
     * ‚è∞ T√çNH NƒÇNG 6: Ph√¢n t√≠ch ƒëi·ªÅu ki·ªán th·ªùi gian t·ª´ tin nh·∫Øn
     */
    parseTimeConditions(message) {
        const normalizedMessage = message.toLowerCase().trim();

        // Ph√¢n t√≠ch lo·∫°i d·ªØ li·ªáu
        let dataType = 'overview'; // M·∫∑c ƒë·ªãnh l√† t·ªïng quan
        if (normalizedMessage.includes('chi ti√™u') || normalizedMessage.includes('chi tieu') ||
            normalizedMessage.includes('expense') || normalizedMessage.includes('spending')) {
            dataType = 'expense';
        } else if (normalizedMessage.includes('thu nh·∫≠p') || normalizedMessage.includes('thu nhap') ||
            normalizedMessage.includes('income') || normalizedMessage.includes('salary')) {
            dataType = 'income';
        } else if (normalizedMessage.includes('kho·∫£n vay') || normalizedMessage.includes('khoan vay') ||
            normalizedMessage.includes('loan') || normalizedMessage.includes('debt') ||
            normalizedMessage.includes('vay') || normalizedMessage.includes('n·ª£')) {
            dataType = 'loan';
        }

        // Ph√¢n t√≠ch kho·∫£ng th·ªùi gian
        let timeRange = null;
        let timeDescription = '';

        const now = new Date();

        if (normalizedMessage.includes('tu·∫ßn n√†y') || normalizedMessage.includes('tuan nay') ||
            normalizedMessage.includes('this week')) {
            const startOfWeek = new Date(now);
            startOfWeek.setDate(now.getDate() - now.getDay());
            startOfWeek.setHours(0, 0, 0, 0);

            const endOfWeek = new Date(startOfWeek);
            endOfWeek.setDate(startOfWeek.getDate() + 6);
            endOfWeek.setHours(23, 59, 59, 999);

            timeRange = { start: startOfWeek, end: endOfWeek };
            timeDescription = 'tu·∫ßn n√†y';
        } else if (normalizedMessage.includes('th√°ng tr∆∞·ªõc') || normalizedMessage.includes('thang truoc') ||
            normalizedMessage.includes('last month')) {
            const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
            const endOfLastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
            endOfLastMonth.setHours(23, 59, 59, 999);

            timeRange = { start: lastMonth, end: endOfLastMonth };
            timeDescription = 'th√°ng tr∆∞·ªõc';
        } else if (normalizedMessage.includes('h√¥m nay') || normalizedMessage.includes('hom nay') ||
            normalizedMessage.includes('today')) {
            const startOfDay = new Date(now);
            startOfDay.setHours(0, 0, 0, 0);

            const endOfDay = new Date(now);
            endOfDay.setHours(23, 59, 59, 999);

            timeRange = { start: startOfDay, end: endOfDay };
            timeDescription = 'h√¥m nay';
        } else if (normalizedMessage.includes('th√°ng n√†y') || normalizedMessage.includes('thang nay') ||
            normalizedMessage.includes('this month')) {
            const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
            const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            endOfMonth.setHours(23, 59, 59, 999);

            timeRange = { start: startOfMonth, end: endOfMonth };
            timeDescription = 'th√°ng n√†y';
        }

        return {
            isValid: timeRange !== null,
            dataType,
            timeRange,
            timeDescription,
            originalMessage: message
        };
    }

    /**
     * üîç T√çNH NƒÇNG 4: √Åp d·ª•ng filter n√¢ng cao l√™n d·ªØ li·ªáu
     */
    async applyAdvancedFilter(userId, filterAnalysis) {
        try {
            const { dataType, operator, amount } = filterAnalysis;
            let results = [];

            // Import models
            const Income = (await import('../models/incomeModel.js')).default;
            const Expense = (await import('../models/expenseModel.js')).default;
            const Loan = (await import('../models/loanModel.js')).default;

            // L·∫•y d·ªØ li·ªáu theo lo·∫°i
            if (dataType === 'income') {
                const incomes = await Income.find({ userId }).sort({ amount: -1 });
                results = this.applyFilterToData(incomes, operator, amount);
            } else if (dataType === 'expense') {
                const expenses = await Expense.find({ userId }).sort({ amount: -1 });
                results = this.applyFilterToData(expenses, operator, amount);
            } else if (dataType === 'loan') {
                const loans = await Loan.find({ userId }).sort({ amount: -1 });
                results = this.applyFilterToData(loans, operator, amount);
            }

            return {
                dataType,
                operator,
                amount,
                results,
                totalFound: results.length
            };

        } catch (error) {
            logger.error('Error applying advanced filter:', error);
            throw error;
        }
    }

    /**
     * üîç T√çNH NƒÇNG 4: √Åp d·ª•ng logic filter l√™n array d·ªØ li·ªáu
     */
    applyFilterToData(data, operator, amount) {
        switch (operator) {
            case 'greater':
                return data.filter(item => item.amount > amount);
            case 'less':
                return data.filter(item => item.amount < amount);
            case 'max':
                if (data.length === 0) return [];
                const maxAmount = Math.max(...data.map(item => item.amount));
                return data.filter(item => item.amount === maxAmount);
            case 'min':
                if (data.length === 0) return [];
                const minAmount = Math.min(...data.map(item => item.amount));
                return data.filter(item => item.amount === minAmount);
            default:
                return data;
        }
    }

    /**
     * ‚è∞ T√çNH NƒÇNG 6: L·∫•y d·ªØ li·ªáu theo kho·∫£ng th·ªùi gian
     */
    async getDataByTimeRange(userId, timeAnalysis) {
        try {
            const { dataType, timeRange } = timeAnalysis;

            // Import models
            const Income = (await import('../models/incomeModel.js')).default;
            const Expense = (await import('../models/expenseModel.js')).default;
            const Loan = (await import('../models/loanModel.js')).default;

            const dateFilter = {
                userId,
                date: {
                    $gte: timeRange.start,
                    $lte: timeRange.end
                }
            };

            let results = {};

            if (dataType === 'income') {
                const incomes = await Income.find(dateFilter).sort({ date: -1 });
                const total = incomes.reduce((sum, item) => sum + item.amount, 0);
                results = { incomes, total, count: incomes.length };
            } else if (dataType === 'expense') {
                const expenses = await Expense.find(dateFilter).sort({ date: -1 });
                const total = expenses.reduce((sum, item) => sum + item.amount, 0);
                results = { expenses, total, count: expenses.length };
            } else if (dataType === 'loan') {
                const loans = await Loan.find({
                    userId,
                    createdAt: {
                        $gte: timeRange.start,
                        $lte: timeRange.end
                    }
                }).sort({ createdAt: -1 });
                const total = loans.reduce((sum, item) => sum + item.amount, 0);
                results = { loans, total, count: loans.length };
            } else {
                // T·ªïng quan t·∫•t c·∫£
                const [incomes, expenses, loans] = await Promise.all([
                    Income.find(dateFilter).sort({ date: -1 }),
                    Expense.find(dateFilter).sort({ date: -1 }),
                    Loan.find({
                        userId,
                        createdAt: {
                            $gte: timeRange.start,
                            $lte: timeRange.end
                        }
                    }).sort({ createdAt: -1 })
                ]);

                const totalIncome = incomes.reduce((sum, item) => sum + item.amount, 0);
                const totalExpense = expenses.reduce((sum, item) => sum + item.amount, 0);
                const totalLoan = loans.reduce((sum, item) => sum + item.amount, 0);

                results = {
                    incomes,
                    expenses,
                    loans,
                    totals: {
                        income: totalIncome,
                        expense: totalExpense,
                        loan: totalLoan,
                        balance: totalIncome - totalExpense
                    },
                    counts: {
                        income: incomes.length,
                        expense: expenses.length,
                        loan: loans.length
                    }
                };
            }

            return {
                dataType,
                timeRange,
                results
            };

        } catch (error) {
            logger.error('Error getting data by time range:', error);
            throw error;
        }
    }

    /**
     * üîç T√çNH NƒÇNG 4: Format k·∫øt qu·∫£ filter n√¢ng cao
     */
    formatFilterResults(filterData, filterAnalysis) {
        const { dataType, operator, amount, results, totalFound } = filterData;

        let title = '';
        let operatorText = '';

        // T·∫°o ti√™u ƒë·ªÅ d·ª±a tr√™n lo·∫°i d·ªØ li·ªáu
        const dataTypeText = {
            'income': 'Thu nh·∫≠p',
            'expense': 'Chi ti√™u',
            'loan': 'Kho·∫£n vay'
        };

        // T·∫°o text m√¥ t·∫£ to√°n t·ª≠
        switch (operator) {
            case 'greater':
                operatorText = `tr√™n ${this.formatCurrency(amount)}`;
                break;
            case 'less':
                operatorText = `d∆∞·ªõi ${this.formatCurrency(amount)}`;
                break;
            case 'max':
                operatorText = 'cao nh·∫•t';
                break;
            case 'min':
                operatorText = 'th·∫•p nh·∫•t';
                break;
        }

        title = `üîç **${dataTypeText[dataType]} ${operatorText}**`;

        if (totalFound === 0) {
            return `${title}\n\n‚ùå **Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.**\n\nüí° Th·ª≠ ƒëi·ªÅu ch·ªânh ƒëi·ªÅu ki·ªán t√¨m ki·∫øm c·ªßa b·∫°n.`;
        }

        let response = `${title}\n\n‚úÖ **T√¨m th·∫•y ${totalFound} k·∫øt qu·∫£:**\n\n`;

        // Hi·ªÉn th·ªã t·ª´ng k·∫øt qu·∫£
        results.slice(0, 10).forEach((item, index) => {
            const date = item.date ? new Date(item.date).toLocaleDateString('vi-VN') :
                new Date(item.createdAt).toLocaleDateString('vi-VN');
            const description = item.description || item.note || 'Kh√¥ng c√≥ m√¥ t·∫£';
            const category = item.category || 'Kh√°c';

            response += `**${index + 1}.** ${this.formatCurrency(item.amount)} VND\n`;
            response += `   üìÖ ${date} | üìÇ ${category}\n`;
            response += `   üìù ${description}\n\n`;
        });

        if (totalFound > 10) {
            response += `... v√† ${totalFound - 10} k·∫øt qu·∫£ kh√°c.\n\n`;
        }

        // Th·ªëng k√™ t·ªïng k·∫øt
        const totalAmount = results.reduce((sum, item) => sum + item.amount, 0);
        response += `üìä **T·ªïng k·∫øt:**\n`;
        response += `‚Ä¢ S·ªë l∆∞·ª£ng: ${totalFound} giao d·ªãch\n`;
        response += `‚Ä¢ T·ªïng ti·ªÅn: ${this.formatCurrency(totalAmount)} VND`;

        return response;
    }

    /**
     * ‚è∞ T√çNH NƒÇNG 6: Format k·∫øt qu·∫£ truy v·∫•n theo th·ªùi gian
     */
    formatTimeResults(timeData, timeAnalysis) {
        const { dataType, timeRange, results } = timeData;
        const { timeDescription } = timeAnalysis;

        const startDate = timeRange.start.toLocaleDateString('vi-VN');
        const endDate = timeRange.end.toLocaleDateString('vi-VN');

        let title = `‚è∞ **D·ªØ li·ªáu t√†i ch√≠nh ${timeDescription}**\n`;
        title += `üìÖ *T·ª´ ${startDate} ƒë·∫øn ${endDate}*\n\n`;

        if (dataType === 'overview') {
            // T·ªïng quan t·∫•t c·∫£
            const { totals, counts } = results;

            if (counts.income === 0 && counts.expense === 0 && counts.loan === 0) {
                return `${title}‚ùå **Kh√¥ng c√≥ d·ªØ li·ªáu n√†o trong kho·∫£ng th·ªùi gian n√†y.**`;
            }

            let response = title;
            response += `üìä **T·ªïng quan t√†i ch√≠nh:**\n\n`;

            if (counts.income > 0) {
                response += `üí∞ **Thu nh·∫≠p:** ${this.formatCurrency(totals.income)} VND (${counts.income} giao d·ªãch)\n`;
            }

            if (counts.expense > 0) {
                response += `üí∏ **Chi ti√™u:** ${this.formatCurrency(totals.expense)} VND (${counts.expense} giao d·ªãch)\n`;
            }

            if (counts.loan > 0) {
                response += `üè¶ **Kho·∫£n vay:** ${this.formatCurrency(totals.loan)} VND (${counts.loan} kho·∫£n)\n`;
            }

            response += `\nüíπ **S·ªë d∆∞:** ${this.formatCurrency(totals.balance)} VND\n`;

            // Hi·ªÉn th·ªã chi ti·∫øt m·ªôt s·ªë giao d·ªãch g·∫ßn nh·∫•t
            if (counts.income > 0 || counts.expense > 0) {
                response += `\nüìã **Giao d·ªãch g·∫ßn nh·∫•t:**\n`;

                const allTransactions = [
                    ...results.incomes.map(item => ({ ...item, type: 'income' })),
                    ...results.expenses.map(item => ({ ...item, type: 'expense' }))
                ].sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);

                allTransactions.forEach((item) => {
                    const icon = item.type === 'income' ? 'üí∞' : 'üí∏';
                    const date = new Date(item.date).toLocaleDateString('vi-VN');
                    response += `${icon} ${this.formatCurrency(item.amount)} VND - ${item.description} (${date})\n`;
                });
            }

            return response;
        } else {
            // D·ªØ li·ªáu c·ª• th·ªÉ theo lo·∫°i
            const dataTypeText = {
                'income': 'Thu nh·∫≠p',
                'expense': 'Chi ti√™u',
                'loan': 'Kho·∫£n vay'
            };

            const { total, count } = results;
            const dataArray = results[dataType === 'loan' ? 'loans' : dataType === 'income' ? 'incomes' : 'expenses'];

            if (count === 0) {
                return `${title}‚ùå **Kh√¥ng c√≥ ${dataTypeText[dataType].toLowerCase()} n√†o trong ${timeDescription}.**`;
            }

            let response = title;
            response += `üìä **${dataTypeText[dataType]} ${timeDescription}:**\n\n`;
            response += `üí∞ **T·ªïng c·ªông:** ${this.formatCurrency(total)} VND\n`;
            response += `üìà **S·ªë l∆∞·ª£ng:** ${count} giao d·ªãch\n\n`;

            // Hi·ªÉn th·ªã chi ti·∫øt
            response += `üìã **Chi ti·∫øt:**\n`;
            dataArray.slice(0, 8).forEach((item, index) => {
                const date = item.date ? new Date(item.date).toLocaleDateString('vi-VN') :
                    new Date(item.createdAt).toLocaleDateString('vi-VN');
                const description = item.description || item.note || 'Kh√¥ng c√≥ m√¥ t·∫£';
                const category = item.category || 'Kh√°c';

                response += `**${index + 1}.** ${this.formatCurrency(item.amount)} VND\n`;
                response += `   üìÖ ${date} | üìÇ ${category}\n`;
                response += `   üìù ${description}\n\n`;
            });

            if (count > 8) {
                response += `... v√† ${count - 8} giao d·ªãch kh√°c.\n`;
            }

            return response;
        }
    }

    /**
     * üîß Helper method ƒë·ªÉ parse s·ªë ti·ªÅn t·ª´ text
     */
    parseAmount(amountStr) {
        const number = parseFloat(amountStr.replace(/[^\d.]/g, ''));

        if (amountStr.includes('k') || amountStr.includes('ngh√¨n')) {
            return number * 1000;
        }
        if (amountStr.includes('tri·ªáu') || amountStr.includes('tr') || amountStr.includes('m')) {
            return number * 1000000;
        }

        return number;
    }

    /**
     * üîß Helper method ƒë·ªÉ format s·ªë ti·ªÅn
     */
    formatCurrency(amount) {
        if (typeof amount !== 'number') {
            return '0';
        }

        return amount.toLocaleString('vi-VN');
    }
}

export default VanLangAgent;

// üö® IMMEDIATE TEST FUNCTION
if (import.meta.url === `file://${process.argv[1]}`) {
    console.log('üîç TESTING BOTH detectAdvancedFilter AND parseFilterConditions...\n');

    const agent = new VanLangAgent();

    const testCases = [
        'thu nh·∫≠p th·∫•p nh·∫•t',
        'chi ti√™u th·∫•p nh·∫•t',
        'chi ti√™u cao nh·∫•t',
        'kho·∫£n vay cao nh·∫•t'
    ];

    testCases.forEach(testCase => {
        console.log(`\nüìù Testing: "${testCase}"`);
        console.log('='.repeat(60));

        // Test detectAdvancedFilter
        console.log('üîç Testing detectAdvancedFilter:');
        const filterDetected = agent.detectAdvancedFilter(testCase);
        console.log('  - detectAdvancedFilter result:', filterDetected);

        // Test parseFilterConditions
        console.log('üîç Testing parseFilterConditions:');
        const result = agent.parseFilterConditions(testCase);
        console.log('  - isValid:', result.isValid);
        console.log('  - dataType:', result.dataType);
        console.log('  - operator:', result.operator);
        console.log('  - amount:', result.amount);

        if (filterDetected && result.isValid) {
            console.log('‚úÖ BOTH METHODS WORK!');
        } else if (filterDetected && !result.isValid) {
            console.log('‚ö†Ô∏è detectAdvancedFilter=true but parseFilterConditions=false');
        } else if (!filterDetected && result.isValid) {
            console.log('‚ö†Ô∏è detectAdvancedFilter=false but parseFilterConditions=true');
        } else {
            console.log('‚ùå BOTH METHODS FAILED!');
        }
    });
}
