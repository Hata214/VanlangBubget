/**
 * ü§ñ Test AI Direct Mode - Demo t√≠nh nƒÉng m·ªõi
 */

import dotenv from 'dotenv';
import VanLangAgent from './vanlangAgent.js';
import logger from '../utils/logger.js';

// Load environment variables
dotenv.config();

async function testAIDirectMode() {
    console.log('\nü§ñ ===== TEST AI DIRECT MODE =====\n');

    try {
        // Kh·ªüi t·∫°o agent
        const agent = new VanLangAgent(process.env.GEMINI_API_KEY);
        const testUserId = '507f1f77bcf86cd799439011'; // Test user ID

        console.log('üìù Test cases for AI Direct Mode:\n');

        // Test 1: C√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt (kh√¥ng li√™n quan t√†i ch√≠nh)
        console.log('1. Test c√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt...');
        try {
            const response1 = await agent.handleUserMessage(
                testUserId, 
                '?Th·ªùi ti·∫øt h√¥m nay nh∆∞ th·∫ø n√†o?'
            );
            console.log('‚úÖ Response:', response1);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 2: C√¢u h·ªèi v·ªÅ n·∫•u ƒÉn (c√≥ th·ªÉ li√™n k·∫øt v·ªõi t√†i ch√≠nh)
        console.log('2. Test c√¢u h·ªèi v·ªÅ n·∫•u ƒÉn...');
        try {
            const response2 = await agent.handleUserMessage(
                testUserId, 
                '?L√†m th·∫ø n√†o ƒë·ªÉ n·∫•u ph·ªü ngon?'
            );
            console.log('‚úÖ Response:', response2);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 3: C√¢u h·ªèi v·ªÅ ƒë·∫ßu t∆∞ (li√™n quan tr·ª±c ti·∫øp t√†i ch√≠nh)
        console.log('3. Test c√¢u h·ªèi v·ªÅ ƒë·∫ßu t∆∞...');
        try {
            const response3 = await agent.handleUserMessage(
                testUserId, 
                '?T√¥i c√≥ n√™n ƒë·∫ßu t∆∞ v√†o c·ªï phi·∫øu kh√¥ng?'
            );
            console.log('‚úÖ Response:', response3);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 4: C√¢u h·ªèi v·ªÅ c√¥ng ngh·ªá
        console.log('4. Test c√¢u h·ªèi v·ªÅ c√¥ng ngh·ªá...');
        try {
            const response4 = await agent.handleUserMessage(
                testUserId, 
                '?Blockchain l√† g√¨?'
            );
            console.log('‚úÖ Response:', response4);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 5: C√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe
        console.log('5. Test c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe...');
        try {
            const response5 = await agent.handleUserMessage(
                testUserId, 
                '?L√†m th·∫ø n√†o ƒë·ªÉ gi·ªØ s·ª©c kh·ªèe t·ªët?'
            );
            console.log('‚úÖ Response:', response5);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 6: C√¢u h·ªèi r·ªóng v·ªõi AI mode
        console.log('6. Test c√¢u h·ªèi r·ªóng v·ªõi AI mode...');
        try {
            const response6 = await agent.handleUserMessage(
                testUserId, 
                '?'
            );
            console.log('‚úÖ Response:', response6);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 7: So s√°nh v·ªõi c√¢u h·ªèi th∆∞·ªùng (kh√¥ng c√≥ "?")
        console.log('7. Test so s√°nh v·ªõi c√¢u h·ªèi th∆∞·ªùng...');
        try {
            const response7 = await agent.handleUserMessage(
                testUserId, 
                'Th·ªùi ti·∫øt h√¥m nay nh∆∞ th·∫ø n√†o?'
            );
            console.log('‚úÖ Response (Normal Mode):', response7);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 8: C√¢u h·ªèi ph·ª©c t·∫°p v·ªÅ t√†i ch√≠nh c√° nh√¢n
        console.log('8. Test c√¢u h·ªèi ph·ª©c t·∫°p v·ªÅ t√†i ch√≠nh...');
        try {
            const response8 = await agent.handleUserMessage(
                testUserId, 
                '?V·ªõi t√¨nh h√¨nh t√†i ch√≠nh hi·ªán t·∫°i c·ªßa t√¥i, t√¥i c√≥ n√™n vay ti·ªÅn ƒë·ªÉ mua nh√† kh√¥ng?'
            );
            console.log('‚úÖ Response:', response8);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 9: C√¢u h·ªèi v·ªÅ h·ªçc t·∫≠p
        console.log('9. Test c√¢u h·ªèi v·ªÅ h·ªçc t·∫≠p...');
        try {
            const response9 = await agent.handleUserMessage(
                testUserId, 
                '?L√†m th·∫ø n√†o ƒë·ªÉ h·ªçc l·∫≠p tr√¨nh hi·ªáu qu·∫£?'
            );
            console.log('‚úÖ Response:', response9);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        // Test 10: C√¢u h·ªèi v·ªÅ du l·ªãch
        console.log('10. Test c√¢u h·ªèi v·ªÅ du l·ªãch...');
        try {
            const response10 = await agent.handleUserMessage(
                testUserId, 
                '?ƒê·ªãa ƒëi·ªÉm du l·ªãch n√†o ·ªü Vi·ªát Nam ƒë√°ng ƒëi nh·∫•t?'
            );
            console.log('‚úÖ Response:', response10);
            console.log('\n' + '='.repeat(80) + '\n');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }

        console.log('üéâ Ho√†n th√†nh test AI Direct Mode!');
        
        // Test Gemini metrics
        console.log('\nüìä Gemini Performance Metrics:');
        const metrics = agent.getGeminiMetrics();
        console.log(JSON.stringify(metrics, null, 2));

    } catch (error) {
        console.error('‚ùå Test failed:', error);
    }

    // ƒê√≥ng k·∫øt n·ªëi
    process.exit(0);
}

// Ch·∫°y test
testAIDirectMode().catch(console.error);
