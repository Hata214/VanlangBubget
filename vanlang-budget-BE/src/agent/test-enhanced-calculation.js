/**
 * üß™ Test Enhanced Calculation Engine
 * Test script cho 2 lo·∫°i t√≠nh to√°n: General v√† Financial
 */

import VanLangAgent from './vanlangAgent.js';
import mongoose from 'mongoose';
import 'dotenv/config';

// Test script cho Enhanced Calculation
async function testEnhancedCalculation() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test Enhanced Calculation Engine...');

    // K·∫øt n·ªëi MongoDB
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
        return;
    }

    // Kh·ªüi t·∫°o agent
    const agent = new VanLangAgent(process.env.GEMINI_API_KEY);
    const testUserId = '507f1f77bcf86cd799439011'; // Test user ID

    console.log('\nüìù Test Enhanced Calculation Engine:');

    // Test General Calculation
    console.log('\nüßÆ === GENERAL CALCULATION TESTS ===');
    
    const generalCalculationTests = [
        '2 + 3 = ?',
        '15% c·ªßa 1 tri·ªáu',
        '1000 * 12 th√°ng',
        'l√£i su·∫•t 5% c·ªßa 10 tri·ªáu trong 12 th√°ng',
        '20 ph·∫ßn trƒÉm c·ªßa 500k',
        '100 chia 4',
        '2 c·ªông 3 nh√¢n 4',
        't√≠nh 15% c·ªßa 2 tri·ªáu'
    ];

    for (const [index, testCase] of generalCalculationTests.entries()) {
        console.log(`\n${index + 1}. Test General: "${testCase}"`);
        try {
            const response = await agent.handleUserMessage(testUserId, testCase);
            console.log('‚úÖ Response:', response.substring(0, 200) + '...');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }
    }

    // Test Financial Calculation
    console.log('\nüí∞ === FINANCIAL CALCULATION TESTS ===');
    
    const financialCalculationTests = [
        'T√¥i c√≥ th·ªÉ chi 4tr ƒë∆∞·ª£c kh√¥ng?',
        'N·∫øu t√¥i chi 2 tri·ªáu th√¨ c√≤n bao nhi√™u?',
        'T√¥i c√≥ ƒë·ªß ti·ªÅn chi 500k kh√¥ng?',
        'Sau khi chi 1 tri·ªáu th√¨ thi·∫øu bao nhi√™u?',
        'S·ªë d∆∞ c·ªßa t√¥i',
        'T√¥i c√≥ th·ªÉ mua xe 50 tri·ªáu ƒë∆∞·ª£c kh√¥ng?',
        'N·∫øu t√¥i l·∫•y ti·ªÅn ti·∫øt ki·ªám ƒë·ªÉ mua xe ƒë·∫°p gi√° 4tr th√¨ t√¥i s·∫Ω c√≤n bao nhi·ªÅu ti·ªÅn?',
        'T√¥i chi 500k th√¨ c√≤n bao nhi·ªÅu?'
    ];

    for (const [index, testCase] of financialCalculationTests.entries()) {
        console.log(`\n${index + 1}. Test Financial: "${testCase}"`);
        try {
            const response = await agent.handleUserMessage(testUserId, testCase);
            console.log('‚úÖ Response:', response.substring(0, 200) + '...');
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }
    }

    // Test Intent Detection
    console.log('\nüéØ === INTENT DETECTION TESTS ===');
    
    const intentTests = [
        { message: '2 + 3 = ?', expected: 'general_calculation' },
        { message: '15% c·ªßa 1 tri·ªáu', expected: 'general_calculation' },
        { message: 'T√¥i c√≥ th·ªÉ chi 4tr ƒë∆∞·ª£c kh√¥ng?', expected: 'financial_calculation' },
        { message: 'N·∫øu t√¥i chi 2 tri·ªáu th√¨ c√≤n bao nhi√™u?', expected: 'financial_calculation' },
        { message: 'l√£i su·∫•t 5% c·ªßa 10 tri·ªáu', expected: 'general_calculation' },
        { message: 'S·ªë d∆∞ c·ªßa t√¥i', expected: 'financial_calculation' },
        { message: 't√≠nh 100 * 12', expected: 'general_calculation' },
        { message: 'Sau khi chi 1 tri·ªáu th√¨ thi·∫øu bao nhi√™u?', expected: 'financial_calculation' }
    ];

    for (const [index, test] of intentTests.entries()) {
        console.log(`\n${index + 1}. Intent Test: "${test.message}"`);
        try {
            const intent = await agent.analyzeIntent(test.message);
            const isCorrect = intent === test.expected;
            console.log(`${isCorrect ? '‚úÖ' : '‚ùå'} Intent: ${intent} (Expected: ${test.expected})`);
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }
    }

    // Test Calculation Coordinator directly
    console.log('\n‚öôÔ∏è === CALCULATION COORDINATOR TESTS ===');
    
    const coordinatorTests = [
        '2 + 3 = ?',
        'T√¥i c√≥ th·ªÉ chi 4tr ƒë∆∞·ª£c kh√¥ng?',
        '15% c·ªßa 1 tri·ªáu',
        'N·∫øu t√¥i chi 2 tri·ªáu th√¨ c√≤n bao nhi√™u?',
        'l√£i su·∫•t 5% c·ªßa 10 tri·ªáu trong 12 th√°ng',
        'S·ªë d∆∞ c·ªßa t√¥i'
    ];

    for (const [index, testCase] of coordinatorTests.entries()) {
        console.log(`\n${index + 1}. Coordinator Test: "${testCase}"`);
        try {
            const result = await agent.calculationCoordinator.detectAndProcess(testCase);
            console.log(`${result.isCalculation ? '‚úÖ' : '‚ùå'} Is Calculation: ${result.isCalculation}`);
            if (result.isCalculation) {
                console.log(`üéØ Type: ${result.type}, Confidence: ${result.confidence.toFixed(2)}`);
                console.log(`üìù Response: ${result.response.substring(0, 150)}...`);
            }
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }
    }

    // Test Edge Cases
    console.log('\nüîç === EDGE CASE TESTS ===');
    
    const edgeCaseTests = [
        't√¥i mua c√† ph√™ 50k', // Should NOT be calculation
        'mua xe 10 tri·ªáu', // Should NOT be calculation  
        '2 + 3 v√† t√¥i c√≥ th·ªÉ chi 4tr kh√¥ng?', // Mixed case
        't√≠nh 15% c·ªßa s·ªë d∆∞ c·ªßa t√¥i', // Mixed case
        'hello', // Not calculation
        'xin ch√†o', // Not calculation
        '123', // Just number
        'abc + def' // Invalid math
    ];

    for (const [index, testCase] of edgeCaseTests.entries()) {
        console.log(`\n${index + 1}. Edge Case: "${testCase}"`);
        try {
            const result = await agent.calculationCoordinator.detectAndProcess(testCase);
            console.log(`${result.isCalculation ? 'üî¢' : '‚ùå'} Is Calculation: ${result.isCalculation}`);
            if (result.isCalculation) {
                console.log(`üéØ Type: ${result.type}, Confidence: ${result.confidence.toFixed(2)}`);
            }
        } catch (error) {
            console.error('‚ùå Error:', error.message);
        }
    }

    console.log('\nüéâ Ho√†n th√†nh test Enhanced Calculation Engine!');
    
    // ƒê√≥ng k·∫øt n·ªëi MongoDB
    await mongoose.connection.close();
    console.log('‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
}

// Test specific calculation types
async function testCalculationTypes() {
    console.log('\nüî¨ === DETAILED CALCULATION TYPE TESTS ===');
    
    const agent = new VanLangAgent(process.env.GEMINI_API_KEY);
    
    // Test General Calculation Engine directly
    console.log('\nüßÆ Testing General Calculation Engine:');
    const generalTests = [
        { input: '2 + 3', expected: 'arithmetic' },
        { input: '15% c·ªßa 1 tri·ªáu', expected: 'percentage' },
        { input: 'l√£i su·∫•t 5% c·ªßa 10 tri·ªáu', expected: 'interest' },
        { input: '100 * 12', expected: 'arithmetic' }
    ];
    
    for (const test of generalTests) {
        try {
            const result = await agent.calculationCoordinator.generalEngine.processCalculation(test.input);
            console.log(`‚úÖ "${test.input}" -> ${result.substring(0, 100)}...`);
        } catch (error) {
            console.error(`‚ùå "${test.input}" -> Error: ${error.message}`);
        }
    }
    
    // Test Financial Calculation Engine directly
    console.log('\nüí∞ Testing Financial Calculation Engine:');
    const financialTests = [
        'T√¥i c√≥ th·ªÉ chi 4tr ƒë∆∞·ª£c kh√¥ng?',
        'S·ªë d∆∞ c·ªßa t√¥i',
        'N·∫øu t√¥i chi 2 tri·ªáu th√¨ c√≤n bao nhi√™u?'
    ];
    
    // Mock financial data for testing
    const mockFinancialData = {
        summary: {
            totalIncomes: 20000000, // 20 tri·ªáu
            totalExpenses: 15000000, // 15 tri·ªáu
            totalInvestments: 5000000,
            totalLoans: 2000000
        },
        incomes: [
            { amount: 15000000, category: 'L∆∞∆°ng', description: 'L∆∞∆°ng th√°ng', date: new Date() },
            { amount: 5000000, category: 'Ti·ªÅn ti·∫øt ki·ªám', description: 'Ti·∫øt ki·ªám', date: new Date() }
        ],
        expenses: [],
        loans: [],
        investments: []
    };
    
    for (const test of financialTests) {
        try {
            const result = await agent.calculationCoordinator.financialEngine.processFinancialCalculation(test, mockFinancialData);
            console.log(`‚úÖ "${test}" -> ${result.substring(0, 100)}...`);
        } catch (error) {
            console.error(`‚ùå "${test}" -> Error: ${error.message}`);
        }
    }
}

// Ch·∫°y tests
async function runAllTests() {
    try {
        await testEnhancedCalculation();
        await testCalculationTypes();
    } catch (error) {
        console.error('‚ùå Test failed:', error);
    }
}

// Export for use in other files
export { testEnhancedCalculation, testCalculationTypes };

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
    runAllTests().catch(console.error);
}
