/**
 * üéØ Calculation Coordinator - ƒêi·ªÅu ph·ªëi gi·ªØa 2 lo·∫°i t√≠nh to√°n
 * Ph√¢n bi·ªát v√† route ƒë·∫øn ƒë√∫ng engine: General vs Financial Calculation
 */

import GeneralCalculationEngine from './generalCalculationEngine.js';
import FinancialCalculationEngine from './financialCalculationEngine.js';
import logger from '../utils/logger.js';

class CalculationCoordinator {
    constructor() {
        this.generalEngine = new GeneralCalculationEngine();
        this.financialEngine = new FinancialCalculationEngine();
    }

    /**
     * üéØ Main Detection - Ph√¢n bi·ªát lo·∫°i t√≠nh to√°n
     */
    async detectCalculationType(message) {
        const normalizedMessage = message.toLowerCase().trim();
        
        logger.info('Calculation type detection started', { message: normalizedMessage });
        
        // Ki·ªÉm tra General Calculation tr∆∞·ªõc
        const generalResult = this.generalEngine.detectGeneralCalculation(normalizedMessage);
        
        // Ki·ªÉm tra Financial Calculation
        const financialResult = this.financialEngine.detectFinancialCalculation(normalizedMessage);
        
        // Logic quy·∫øt ƒë·ªãnh ∆∞u ti√™n
        const decision = this.makeCalculationDecision(generalResult, financialResult, normalizedMessage);
        
        logger.info('Calculation type detection result', {
            message: normalizedMessage,
            generalConfidence: generalResult.confidence,
            financialConfidence: financialResult.confidence,
            decision: decision.type,
            finalConfidence: decision.confidence,
            intent: decision.intent
        });
        
        return {
            isCalculation: decision.confidence > 0.5,
            type: decision.type,
            confidence: decision.confidence,
            intent: decision.intent
        };
    }

    /**
     * üß† Logic quy·∫øt ƒë·ªãnh lo·∫°i t√≠nh to√°n
     */
    makeCalculationDecision(generalResult, financialResult, message) {
        // N·∫øu c·∫£ 2 ƒë·ªÅu c√≥ confidence th·∫•p
        if (generalResult.confidence < 0.3 && financialResult.confidence < 0.3) {
            return {
                type: 'none',
                confidence: 0,
                intent: 'other'
            };
        }
        
        // N·∫øu ch·ªâ c√≥ 1 lo·∫°i c√≥ confidence cao
        if (generalResult.confidence >= 0.7 && financialResult.confidence < 0.5) {
            return {
                type: 'general',
                confidence: generalResult.confidence,
                intent: 'general_calculation'
            };
        }
        
        if (financialResult.confidence >= 0.7 && generalResult.confidence < 0.5) {
            return {
                type: 'financial',
                confidence: financialResult.confidence,
                intent: 'financial_calculation'
            };
        }
        
        // N·∫øu c·∫£ 2 ƒë·ªÅu c√≥ confidence cao - c·∫ßn ph√¢n bi·ªát b·∫±ng context
        if (generalResult.confidence >= 0.5 && financialResult.confidence >= 0.5) {
            return this.resolveConflict(generalResult, financialResult, message);
        }
        
        // Ch·ªçn lo·∫°i c√≥ confidence cao h∆°n
        if (generalResult.confidence > financialResult.confidence) {
            return {
                type: 'general',
                confidence: generalResult.confidence,
                intent: 'general_calculation'
            };
        } else {
            return {
                type: 'financial',
                confidence: financialResult.confidence,
                intent: 'financial_calculation'
            };
        }
    }

    /**
     * ‚öñÔ∏è Gi·∫£i quy·∫øt xung ƒë·ªôt khi c·∫£ 2 lo·∫°i ƒë·ªÅu c√≥ confidence cao
     */
    resolveConflict(generalResult, financialResult, message) {
        // C√°c t·ª´ kh√≥a ∆∞u ti√™n Financial
        const financialPriorityKeywords = [
            's·ªë d∆∞', 'so du', 'balance',
            'c√≥ th·ªÉ chi', 'co the chi', 'ƒë·ªß ti·ªÅn', 'du tien',
            'sau khi chi', 'n·∫øu chi', 'neu chi',
            'c√≤n bao nhi√™u', 'con bao nhieu',
            'thi·∫øu', 'thieu', 'shortage'
        ];
        
        // C√°c t·ª´ kh√≥a ∆∞u ti√™n General
        const generalPriorityKeywords = [
            'b·∫±ng bao nhi√™u', 'bang bao nhieu', 'equals',
            'k·∫øt qu·∫£', 'ket qua', 'result',
            'c·ªông', 'tr·ª´', 'nh√¢n', 'chia',
            'ph·∫ßn trƒÉm', 'percent', '%',
            'l√£i su·∫•t', 'lai suat', 'interest'
        ];
        
        const hasFinancialPriority = financialPriorityKeywords.some(keyword =>
            message.includes(keyword)
        );
        
        const hasGeneralPriority = generalPriorityKeywords.some(keyword =>
            message.includes(keyword)
        );
        
        // N·∫øu c√≥ t·ª´ kh√≥a ∆∞u ti√™n r√µ r√†ng
        if (hasFinancialPriority && !hasGeneralPriority) {
            return {
                type: 'financial',
                confidence: financialResult.confidence * 1.2, // Boost confidence
                intent: 'financial_calculation'
            };
        }
        
        if (hasGeneralPriority && !hasFinancialPriority) {
            return {
                type: 'general',
                confidence: generalResult.confidence * 1.2, // Boost confidence
                intent: 'general_calculation'
            };
        }
        
        // N·∫øu c√≥ c·∫•u tr√∫c ƒëi·ªÅu ki·ªán v·ªõi context t√†i ch√≠nh -> Financial
        const hasConditionalFinancial = this.hasConditionalFinancialStructure(message);
        if (hasConditionalFinancial) {
            return {
                type: 'financial',
                confidence: financialResult.confidence * 1.1,
                intent: 'financial_calculation'
            };
        }
        
        // N·∫øu c√≥ bi·ªÉu th·ª©c to√°n h·ªçc r√µ r√†ng -> General
        const hasMathExpression = /[\d\s+\-*/()%=?]+/.test(message);
        if (hasMathExpression) {
            return {
                type: 'general',
                confidence: generalResult.confidence * 1.1,
                intent: 'general_calculation'
            };
        }
        
        // Default: ch·ªçn lo·∫°i c√≥ confidence cao h∆°n
        if (financialResult.confidence >= generalResult.confidence) {
            return {
                type: 'financial',
                confidence: financialResult.confidence,
                intent: 'financial_calculation'
            };
        } else {
            return {
                type: 'general',
                confidence: generalResult.confidence,
                intent: 'general_calculation'
            };
        }
    }

    /**
     * üîç Ki·ªÉm tra c·∫•u tr√∫c ƒëi·ªÅu ki·ªán t√†i ch√≠nh
     */
    hasConditionalFinancialStructure(message) {
        const patterns = [
            /(n·∫øu|neu|if).*(chi|spend|mua|buy).*(th√¨|thi|then).*(c√≤n|con|left|remain)/i,
            /(sau khi|after).*(chi|spend|mua|buy).*(th√¨|thi|then)/i,
            /(t√¥i|toi|i).*(c√≥ th·ªÉ|co the|can).*(chi|spend)/i
        ];
        
        return patterns.some(pattern => pattern.test(message));
    }

    /**
     * üöÄ Main Processing - X·ª≠ l√Ω t√≠nh to√°n
     */
    async processCalculation(message, calculationType, financialData = null) {
        try {
            logger.info('Processing calculation', {
                message,
                calculationType,
                hasFinancialData: !!financialData
            });
            
            switch (calculationType) {
                case 'general':
                    return await this.generalEngine.processCalculation(message);
                    
                case 'financial':
                    if (!financialData) {
                        return this.getNoDataError();
                    }
                    return await this.financialEngine.processFinancialCalculation(message, financialData);
                    
                default:
                    return this.getUnknownTypeError();
            }
            
        } catch (error) {
            logger.error('Error in calculation coordinator:', error);
            return this.getProcessingError();
        }
    }

    /**
     * üéØ Convenience method - Detect v√† process trong 1 l·∫ßn g·ªçi
     */
    async detectAndProcess(message, financialData = null) {
        const detection = await this.detectCalculationType(message);
        
        if (!detection.isCalculation) {
            return {
                isCalculation: false,
                response: null
            };
        }
        
        const response = await this.processCalculation(message, detection.type, financialData);
        
        return {
            isCalculation: true,
            type: detection.type,
            confidence: detection.confidence,
            intent: detection.intent,
            response
        };
    }

    /**
     * üìä Get calculation capabilities
     */
    getCapabilities() {
        return {
            general: {
                name: 'T√≠nh to√°n th√¥ng th∆∞·ªùng',
                description: 'Th·ª±c hi·ªán c√°c ph√©p t√≠nh c∆° b·∫£n, bi·ªÉu th·ª©c to√°n h·ªçc, ph·∫ßn trƒÉm, l√£i su·∫•t ƒë∆°n gi·∫£n',
                examples: [
                    '2 + 3 = ?',
                    '15% c·ªßa 1 tri·ªáu',
                    '1000 * 12 th√°ng',
                    'l√£i su·∫•t 5% c·ªßa 10 tri·ªáu trong 12 th√°ng'
                ]
            },
            financial: {
                name: 'T√≠nh to√°n t√†i ch√≠nh hi·ªán t·∫°i',
                description: 'T√≠nh s·ªë d∆∞, ph√¢n t√≠ch kh·∫£ nƒÉng chi ti√™u d·ª±a tr√™n d·ªØ li·ªáu th·ª±c',
                examples: [
                    'T√¥i c√≥ th·ªÉ chi 4tr ƒë∆∞·ª£c kh√¥ng?',
                    'N·∫øu t√¥i chi 2 tri·ªáu th√¨ c√≤n bao nhi√™u?',
                    'T√¥i c√≥ ƒë·ªß ti·ªÅn chi 500k kh√¥ng?',
                    'Sau khi chi 1 tri·ªáu th√¨ thi·∫øu bao nhi√™u?'
                ]
            }
        };
    }

    /**
     * üîß Error responses
     */
    getNoDataError() {
        return `‚ùå **Kh√¥ng th·ªÉ th·ª±c hi·ªán t√≠nh to√°n t√†i ch√≠nh**

‚ö†Ô∏è **L√Ω do:** Kh√¥ng c√≥ d·ªØ li·ªáu t√†i ch√≠nh ƒë·ªÉ t√≠nh to√°n.

üí° **G·ª£i √Ω:**
‚Ä¢ Th√™m m·ªôt s·ªë giao d·ªãch thu nh·∫≠p/chi ti√™u tr∆∞·ªõc
‚Ä¢ Ho·∫∑c th·ª≠ c√°c ph√©p t√≠nh th√¥ng th∆∞·ªùng nh∆∞ "2 + 3" ho·∫∑c "15% c·ªßa 1 tri·ªáu"`;
    }

    getUnknownTypeError() {
        return `‚ùå **Kh√¥ng th·ªÉ x√°c ƒë·ªãnh lo·∫°i t√≠nh to√°n**

üí° **C√°c lo·∫°i t√≠nh to√°n ƒë∆∞·ª£c h·ªó tr·ª£:**

üßÆ **T√≠nh to√°n th√¥ng th∆∞·ªùng:**
‚Ä¢ Ph√©p t√≠nh c∆° b·∫£n: "2 + 3", "100 * 12"
‚Ä¢ Ph·∫ßn trƒÉm: "15% c·ªßa 1 tri·ªáu"
‚Ä¢ L√£i su·∫•t: "l√£i su·∫•t 5% c·ªßa 10 tri·ªáu"

üí∞ **T√≠nh to√°n t√†i ch√≠nh:**
‚Ä¢ S·ªë d∆∞: "S·ªë d∆∞ c·ªßa t√¥i"
‚Ä¢ Kh·∫£ nƒÉng chi ti√™u: "T√¥i c√≥ th·ªÉ chi 4tr kh√¥ng?"
‚Ä¢ D·ª± ƒëo√°n: "N·∫øu chi 2 tri·ªáu th√¨ c√≤n bao nhi√™u?"`;
    }

    getProcessingError() {
        return `‚ùå **L·ªói x·ª≠ l√Ω t√≠nh to√°n**

üîÑ **Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c:**
‚Ä¢ N√≥i r√µ h∆°n v·ªÅ ph√©p t√≠nh c·∫ßn th·ª±c hi·ªán
‚Ä¢ Ki·ªÉm tra c√∫ ph√°p c·ªßa bi·ªÉu th·ª©c to√°n h·ªçc
‚Ä¢ ƒê·∫£m b·∫£o c√≥ ƒë·ªß d·ªØ li·ªáu t√†i ch√≠nh (n·∫øu c·∫ßn)

üí° **V√≠ d·ª•:**
‚Ä¢ "2 c·ªông 3 b·∫±ng bao nhi√™u?"
‚Ä¢ "T√¥i c√≥ ƒë·ªß ti·ªÅn chi 500k kh√¥ng?"`;
    }
}

export default CalculationCoordinator;
