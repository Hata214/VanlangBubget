/**
 * üó£Ô∏è Enhanced Conversation Manager for VanLang Agent
 * Manages multi-turn conversations with context awareness
 */

import logger from '../utils/logger.js';

class ConversationManager {
    constructor() {
        // Conversation contexts by userId
        this.conversations = new Map();
        
        // Conversation templates for different scenarios
        this.conversationTemplates = {
            financial_planning: {
                steps: ['income_assessment', 'expense_analysis', 'goal_setting', 'strategy_recommendation'],
                prompts: {
                    income_assessment: "H√£y cho t√¥i bi·∫øt thu nh·∫≠p h√†ng th√°ng c·ªßa b·∫°n ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n t·ªët h∆°n.",
                    expense_analysis: "B·∫°n c√≥ th·ªÉ chia s·∫ª c√°c kho·∫£n chi ti√™u ch√≠nh h√†ng th√°ng kh√¥ng?",
                    goal_setting: "M·ª•c ti√™u t√†i ch√≠nh c·ªßa b·∫°n trong 1-2 nƒÉm t·ªõi l√† g√¨?",
                    strategy_recommendation: "D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p, t√¥i s·∫Ω ƒë∆∞a ra k·∫ø ho·∫°ch c·ª• th·ªÉ."
                }
            },
            investment_consultation: {
                steps: ['risk_assessment', 'capital_evaluation', 'investment_preference', 'portfolio_recommendation'],
                prompts: {
                    risk_assessment: "B·∫°n c√≥ s·∫µn s√†ng ch·∫•p nh·∫≠n r·ªßi ro ƒë·ªÉ c√≥ l·ª£i nhu·∫≠n cao h∆°n kh√¥ng?",
                    capital_evaluation: "S·ªë ti·ªÅn b·∫°n d·ª± ƒë·ªãnh ƒë·∫ßu t∆∞ l√† bao nhi√™u?",
                    investment_preference: "B·∫°n quan t√¢m ƒë·∫øn lo·∫°i ƒë·∫ßu t∆∞ n√†o: c·ªï phi·∫øu, v√†ng, b·∫•t ƒë·ªông s·∫£n?",
                    portfolio_recommendation: "T√¥i s·∫Ω ƒë·ªÅ xu·∫•t danh m·ª•c ƒë·∫ßu t∆∞ ph√π h·ª£p v·ªõi b·∫°n."
                }
            },
            debt_management: {
                steps: ['debt_assessment', 'income_evaluation', 'repayment_capacity', 'strategy_planning'],
                prompts: {
                    debt_assessment: "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt t·ªïng s·ªë n·ª£ hi·ªán t·∫°i kh√¥ng?",
                    income_evaluation: "Thu nh·∫≠p ·ªïn ƒë·ªãnh h√†ng th√°ng c·ªßa b·∫°n l√† bao nhi√™u?",
                    repayment_capacity: "B·∫°n c√≥ th·ªÉ d√†nh bao nhi√™u ti·ªÅn m·ªói th√°ng ƒë·ªÉ tr·∫£ n·ª£?",
                    strategy_planning: "T√¥i s·∫Ω l·∫≠p k·∫ø ho·∫°ch tr·∫£ n·ª£ t·ªëi ∆∞u cho b·∫°n."
                }
            }
        };

        // Context expiry time (30 minutes)
        this.contextExpiryTime = 30 * 60 * 1000;
    }

    /**
     * üéØ Initialize or get conversation context
     */
    getConversationContext(userId) {
        const context = this.conversations.get(userId);
        
        if (!context || this.isContextExpired(context)) {
            return this.createNewContext(userId);
        }
        
        return context;
    }

    /**
     * üÜï Create new conversation context
     */
    createNewContext(userId) {
        const context = {
            userId,
            sessionId: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            startTime: Date.now(),
            lastActivity: Date.now(),
            messages: [],
            currentFlow: null,
            currentStep: null,
            userData: {},
            preferences: {},
            followUpQuestions: [],
            conversationState: 'active'
        };

        this.conversations.set(userId, context);
        logger.info('New conversation context created', { userId, sessionId: context.sessionId });
        
        return context;
    }

    /**
     * ‚è∞ Check if context is expired
     */
    isContextExpired(context) {
        return (Date.now() - context.lastActivity) > this.contextExpiryTime;
    }

    /**
     * üí¨ Add message to conversation history
     */
    addMessage(userId, message, type = 'user', metadata = {}) {
        const context = this.getConversationContext(userId);
        
        const messageEntry = {
            id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,
            type, // 'user' or 'agent'
            content: message,
            timestamp: Date.now(),
            metadata
        };

        context.messages.push(messageEntry);
        context.lastActivity = Date.now();

        // Keep only last 20 messages to prevent memory bloat
        if (context.messages.length > 20) {
            context.messages = context.messages.slice(-20);
        }

        logger.info('Message added to conversation', {
            userId,
            messageId: messageEntry.id,
            type,
            messageCount: context.messages.length
        });

        return messageEntry;
    }

    /**
     * üîÑ Start conversation flow
     */
    startConversationFlow(userId, flowType) {
        const context = this.getConversationContext(userId);
        const template = this.conversationTemplates[flowType];

        if (!template) {
            logger.warn('Unknown conversation flow type', { userId, flowType });
            return null;
        }

        context.currentFlow = flowType;
        context.currentStep = template.steps[0];
        context.flowProgress = 0;

        logger.info('Conversation flow started', {
            userId,
            flowType,
            firstStep: context.currentStep
        });

        return {
            flowType,
            currentStep: context.currentStep,
            prompt: template.prompts[context.currentStep],
            totalSteps: template.steps.length
        };
    }

    /**
     * ‚û°Ô∏è Advance to next step in conversation flow
     */
    advanceConversationFlow(userId, userResponse) {
        const context = this.getConversationContext(userId);
        
        if (!context.currentFlow) {
            return null;
        }

        const template = this.conversationTemplates[context.currentFlow];
        const currentStepIndex = template.steps.indexOf(context.currentStep);
        
        // Store user response for current step
        context.userData[context.currentStep] = userResponse;

        // Move to next step
        if (currentStepIndex < template.steps.length - 1) {
            context.currentStep = template.steps[currentStepIndex + 1];
            context.flowProgress = currentStepIndex + 1;

            return {
                flowType: context.currentFlow,
                currentStep: context.currentStep,
                prompt: template.prompts[context.currentStep],
                progress: context.flowProgress,
                totalSteps: template.steps.length,
                isComplete: false
            };
        } else {
            // Flow completed
            context.conversationState = 'completed';
            return {
                flowType: context.currentFlow,
                isComplete: true,
                collectedData: context.userData
            };
        }
    }

    /**
     * üß† Analyze conversation intent and suggest flow
     */
    analyzeConversationIntent(message) {
        const normalizedMessage = message.toLowerCase().trim();

        // Financial planning keywords
        if (this.containsKeywords(normalizedMessage, [
            'k·∫ø ho·∫°ch t√†i ch√≠nh', 'l·∫≠p k·∫ø ho·∫°ch', 'qu·∫£n l√Ω ti·ªÅn b·∫°c',
            't∆∞ v·∫•n t√†i ch√≠nh', 'l√†m sao ƒë·ªÉ', 'c√°ch qu·∫£n l√Ω'
        ])) {
            return {
                suggestedFlow: 'financial_planning',
                confidence: 0.8,
                reason: 'Financial planning keywords detected'
            };
        }

        // Investment consultation keywords
        if (this.containsKeywords(normalizedMessage, [
            'ƒë·∫ßu t∆∞', 'investment', 'c·ªï phi·∫øu', 'v√†ng', 'b·∫•t ƒë·ªông s·∫£n',
            'l·ª£i nhu·∫≠n', 'r·ªßi ro', 'portfolio'
        ])) {
            return {
                suggestedFlow: 'investment_consultation',
                confidence: 0.8,
                reason: 'Investment keywords detected'
            };
        }

        // Debt management keywords
        if (this.containsKeywords(normalizedMessage, [
            'tr·∫£ n·ª£', 'kho·∫£n vay', 'debt', 'n·ª£', 'vay',
            'tr·∫£ g√≥p', 'l√£i su·∫•t', 'thanh to√°n'
        ])) {
            return {
                suggestedFlow: 'debt_management',
                confidence: 0.8,
                reason: 'Debt management keywords detected'
            };
        }

        return {
            suggestedFlow: null,
            confidence: 0,
            reason: 'No specific flow pattern detected'
        };
    }

    /**
     * üîç Helper method to check keywords
     */
    containsKeywords(text, keywords) {
        return keywords.some(keyword => text.includes(keyword));
    }

    /**
     * üìù Generate follow-up questions based on context
     */
    generateFollowUpQuestions(userId, lastResponse) {
        const context = this.getConversationContext(userId);
        const recentMessages = context.messages.slice(-3);

        // Analyze recent conversation to suggest relevant follow-ups
        const followUps = [];

        // If user mentioned income, suggest expense tracking
        if (this.containsKeywords(lastResponse.toLowerCase(), ['thu nh·∫≠p', 'l∆∞∆°ng', 'income'])) {
            followUps.push("B·∫°n c√≥ mu·ªën t√¥i gi√∫p ph√¢n t√≠ch chi ti√™u h√†ng th√°ng kh√¥ng?");
            followUps.push("T·ª∑ l·ªá ti·∫øt ki·ªám hi·ªán t·∫°i c·ªßa b·∫°n l√† bao nhi√™u?");
        }

        // If user mentioned expenses, suggest budgeting
        if (this.containsKeywords(lastResponse.toLowerCase(), ['chi ti√™u', 'expense', 'ti√™u d√πng'])) {
            followUps.push("B·∫°n c√≥ mu·ªën thi·∫øt l·∫≠p ng√¢n s√°ch cho t·ª´ng danh m·ª•c kh√¥ng?");
            followUps.push("Kho·∫£n chi ti√™u n√†o b·∫°n mu·ªën c·∫Øt gi·∫£m nh·∫•t?");
        }

        // If user mentioned investment, suggest portfolio analysis
        if (this.containsKeywords(lastResponse.toLowerCase(), ['ƒë·∫ßu t∆∞', 'investment'])) {
            followUps.push("B·∫°n c√≥ mu·ªën t√¥i ph√¢n t√≠ch danh m·ª•c ƒë·∫ßu t∆∞ hi·ªán t·∫°i kh√¥ng?");
            followUps.push("M·ª©c ƒë·ªô r·ªßi ro b·∫°n c√≥ th·ªÉ ch·∫•p nh·∫≠n l√† g√¨?");
        }

        context.followUpQuestions = followUps;
        return followUps;
    }

    /**
     * üóëÔ∏è Clear conversation context
     */
    clearConversationContext(userId) {
        this.conversations.delete(userId);
        logger.info('Conversation context cleared', { userId });
    }

    /**
     * üìä Get conversation statistics
     */
    getConversationStats(userId) {
        const context = this.getConversationContext(userId);
        
        return {
            sessionId: context.sessionId,
            messageCount: context.messages.length,
            duration: Date.now() - context.startTime,
            currentFlow: context.currentFlow,
            currentStep: context.currentStep,
            conversationState: context.conversationState,
            lastActivity: context.lastActivity
        };
    }

    /**
     * üßπ Cleanup expired conversations
     */
    cleanupExpiredConversations() {
        const now = Date.now();
        let cleanedCount = 0;

        for (const [userId, context] of this.conversations.entries()) {
            if (this.isContextExpired(context)) {
                this.conversations.delete(userId);
                cleanedCount++;
            }
        }

        if (cleanedCount > 0) {
            logger.info('Cleaned up expired conversations', { count: cleanedCount });
        }

        return cleanedCount;
    }
}

export default ConversationManager;
