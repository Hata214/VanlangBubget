import nodemailer from 'nodemailer';

/**
 * C·∫•u h√¨nh transporter c·ªßa nodemailer ƒë·ªÉ g·ª≠i email
 * T·ª± ƒë·ªông ph√°t hi·ªán v√† thi·∫øt l·∫≠p c·∫•u h√¨nh SMTP d·ª±a tr√™n domain email
 * @param {String} recipientEmail - Email ng∆∞·ªùi nh·∫≠n ƒë·ªÉ x√°c ƒë·ªãnh d·ªãch v·ª• email
 * @returns {Object} - Nodemailer transporter
 */
const createTransporter = async (recipientEmail = '') => {
    // X√°c ƒë·ªãnh lo·∫°i d·ªãch v·ª• email n√™n d√πng
    const useEthereal = process.env.USE_ETHEREAL === 'true' ||
        (process.env.NODE_ENV === 'development' && process.env.USE_REAL_EMAIL !== 'true');

    // S·ª≠ d·ª•ng Ethereal n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh ho·∫∑c trong m√¥i tr∆∞·ªùng development
    if (useEthereal) {
        console.log('S·ª≠ d·ª•ng Ethereal Email (m√¥i tr∆∞·ªùng test) ƒë·ªÉ g·ª≠i email');
        try {
            // T·∫°o t√†i kho·∫£n test Ethereal m·ªõi
            const testAccount = await nodemailer.createTestAccount();
            console.log('T√†i kho·∫£n Ethereal ƒë∆∞·ª£c t·∫°o:');
            console.log('- Email:', testAccount.user);
            console.log('- Password:', testAccount.pass);

            // Tr·∫£ v·ªÅ transporter Ethereal v·ªõi testAccount ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
            const transporter = nodemailer.createTransport({
                host: 'smtp.ethereal.email',
                port: 587,
                secure: false,
                auth: {
                    user: testAccount.user,
                    pass: testAccount.pass,
                },
                debug: true,
                logger: true
            });

            // L∆∞u tr·ªØ th√¥ng tin t√†i kho·∫£n ƒë·ªÉ s·ª≠ d·ª•ng sau
            transporter.testAccount = testAccount;

            return transporter;
        } catch (error) {
            console.error('L·ªói khi t·∫°o t√†i kho·∫£n Ethereal:', error);
            // N·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c Ethereal, th·ª≠ d√πng c·∫•u h√¨nh Gmail b√™n d∆∞·ªõi
        }
    }

    // X√°c ƒë·ªãnh domain c·ªßa email ng∆∞·ªùi nh·∫≠n
    let recipientDomain = '';
    if (recipientEmail) {
        const parts = recipientEmail.split('@');
        if (parts.length === 2) {
            recipientDomain = parts[1].toLowerCase();
        }
    }

    // S·ª≠ d·ª•ng Gmail n·∫øu ƒë√£ c·∫•u h√¨nh
    if (process.env.EMAIL_HOST === 'smtp.gmail.com' &&
        process.env.EMAIL_USER &&
        process.env.EMAIL_PASSWORD) {
        console.log('S·ª≠ d·ª•ng Gmail ƒë·ªÉ g·ª≠i email:', process.env.EMAIL_USER);

        // T·∫°o transporter Gmail
        return nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASSWORD,
            },
            debug: process.env.NODE_ENV === 'development',
            logger: process.env.NODE_ENV === 'development'
        });
    }

    // S·ª≠ d·ª•ng c·∫•u h√¨nh t∆∞∆°ng ·ª©ng v·ªõi domain ng∆∞·ªùi nh·∫≠n (n·∫øu c√≥)
    const emailServices = {
        'gmail.com': {
            service: 'gmail',
        },
        'outlook.com': {
            host: 'smtp-mail.outlook.com',
            port: 587,
            secure: false
        },
        'hotmail.com': {
            host: 'smtp-mail.outlook.com',
            port: 587,
            secure: false
        },
        'yahoo.com': {
            host: 'smtp.mail.yahoo.com',
            port: 587,
            secure: false
        }
    };

    if (recipientDomain && emailServices[recipientDomain] &&
        process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
        console.log(`S·ª≠ d·ª•ng c·∫•u h√¨nh cho domain ${recipientDomain}`);

        return nodemailer.createTransport({
            ...emailServices[recipientDomain],
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASSWORD
            }
        });
    }

    // S·ª≠ d·ª•ng c·∫•u h√¨nh th·ªß c√¥ng n·∫øu c√≥
    if (process.env.EMAIL_HOST && process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
        console.log(`S·ª≠ d·ª•ng c·∫•u h√¨nh SMTP th·ªß c√¥ng: ${process.env.EMAIL_HOST}`);
        return nodemailer.createTransport({
            host: process.env.EMAIL_HOST,
            port: parseInt(process.env.EMAIL_PORT || '587'),
            secure: process.env.EMAIL_SECURE === 'true',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASSWORD,
            }
        });
    }

    // N·∫øu kh√¥ng c√≥ c·∫•u h√¨nh n√†o ph√π h·ª£p, quay l·∫°i d√πng Ethereal
    console.log('Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh email ph√π h·ª£p, d√πng Ethereal l√†m d·ª± ph√≤ng');
    try {
        const testAccount = await nodemailer.createTestAccount();
        console.log('T√†i kho·∫£n Ethereal d·ª± ph√≤ng:', testAccount.user);
        return nodemailer.createTransport({
            host: 'smtp.ethereal.email',
            port: 587,
            secure: false,
            auth: {
                user: testAccount.user,
                pass: testAccount.pass,
            }
        });
    } catch (error) {
        console.error('Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n Ethereal d·ª± ph√≤ng:', error);
        throw new Error('Kh√¥ng th·ªÉ c·∫•u h√¨nh d·ªãch v·ª• email');
    }
};

/**
 * G·ª≠i email th√¥ng qua Nodemailer
 * @param {Object} options - C√°c t√πy ch·ªçn g·ª≠i email
 * @param {String} options.to - Email ng∆∞·ªùi nh·∫≠n
 * @param {String} options.subject - Ch·ªß ƒë·ªÅ email
 * @param {String} options.text - N·ªôi dung vƒÉn b·∫£n thu·∫ßn
 * @param {String} options.html - N·ªôi dung HTML
 * @returns {Promise} - Th√¥ng tin v·ªÅ email ƒë√£ g·ª≠i
 */
export const sendEmail = async (options) => {
    try {
        // Truy·ªÅn email ng∆∞·ªùi nh·∫≠n cho createTransporter ƒë·ªÉ c·∫•u h√¨nh SMTP ph√π h·ª£p
        const transporter = await createTransporter(options.to);

        // Hi·ªÉn th·ªã n·ªôi dung email trong console khi ·ªü m√¥i tr∆∞·ªùng development
        if (process.env.NODE_ENV === 'development') {
            console.log('\nüìß EMAIL CONTENT PREVIEW:');
            console.log('To:', options.to);
            console.log('Subject:', options.subject);
            console.log('Text:', options.text?.substring(0, 100) + '...');
            console.log('HTML:', 'HTML content available (not displayed in console)');
            console.log('\n');
        }

        // G·ª≠i email
        const info = await transporter.sendMail({
            from: process.env.EMAIL_FROM || '"VanLang Budget" <no-reply@vanlangbudget.com>',
            to: options.to,
            subject: options.subject,
            text: options.text,
            html: options.html,
        });

        // L∆∞u test account (n·∫øu c√≥) v√†o k·∫øt qu·∫£ ƒë·ªÉ s·ª≠ d·ª•ng v·ªõi getTestMessageUrl
        if (transporter.testAccount) {
            info.testAccount = transporter.testAccount;
        }

        // Trong m√¥i tr∆∞·ªùng development, lu√¥n hi·ªÉn th·ªã URL xem email
        if (process.env.NODE_ENV === 'development') {
            try {
                // T·∫°o preview URL n·∫øu s·ª≠ d·ª•ng Ethereal
                if (info.testAccount) {
                    const previewURL = nodemailer.getTestMessageUrl(info);
                    if (previewURL) {
                        console.log('üìß EMAIL SENT SUCCESSFULLY');
                        console.log('üî∂ Email Preview URL:', previewURL);
                        console.log('üëÜ M·ªü link tr√™n ƒë·ªÉ xem email ƒë√£ g·ª≠i');
                    } else {
                        console.log('üìß EMAIL SENT SUCCESSFULLY (kh√¥ng c√≥ preview URL)');
                    }
                } else {
                    console.log('üìß EMAIL SENT SUCCESSFULLY (kh√¥ng ph·∫£i Ethereal, kh√¥ng c√≥ preview URL)');
                }
            } catch (error) {
                console.log('üìß EMAIL SENT SUCCESSFULLY (kh√¥ng th·ªÉ l·∫•y preview URL)');
                console.error('L·ªói hi·ªÉn th·ªã preview:', error);
            }
        }

        return info;
    } catch (error) {
        console.error('Email sending error:', error);

        // Hi·ªÉn th·ªã chi ti·∫øt l·ªói khi ·ªü m√¥i tr∆∞·ªùng development
        if (process.env.NODE_ENV === 'development') {
            console.error('üìß EMAIL PREVIEW (NOT SENT - ERROR):');
            console.log('To:', options.to);
            console.log('Subject:', options.subject);
            console.log('Text:', options.text?.substring(0, 500));
            console.log('Error code:', error.code);
            console.log('Error message:', error.message);
            console.log('\n');
        }

        throw new Error('Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
};

/**
 * T·∫°o m√£ OTP ng·∫´u nhi√™n
 * @param {Number} length - ƒê·ªô d√†i c·ªßa m√£ OTP (m·∫∑c ƒë·ªãnh l√† 6)
 * @returns {String} - M√£ OTP 
 */
export const generateOTP = (length = 6) => {
    let otp = '';
    const digits = '0123456789';

    for (let i = 0; i < length; i++) {
        otp += digits[Math.floor(Math.random() * 10)];
    }

    return otp;
};

/**
 * G·ª≠i email x√°c th·ª±c t√†i kho·∫£n v·ªõi li√™n k·∫øt
 * @param {String} email - Email ng∆∞·ªùi nh·∫≠n
 * @param {String} name - T√™n ng∆∞·ªùi nh·∫≠n 
 * @param {String} verificationURL - URL x√°c th·ª±c
 * @param {String} locale - Ng√¥n ng·ªØ (vi ho·∫∑c en)
 * @returns {Promise} - Th√¥ng tin email ƒë√£ g·ª≠i
 */
export const sendVerificationEmail = async (email, name, verificationURL, locale = 'vi') => {
    // Ki·ªÉm tra n·∫øu bi·∫øn m√¥i tr∆∞·ªùng SKIP_EMAIL_SENDING ƒë∆∞·ª£c b·∫≠t
    if (process.env.SKIP_EMAIL_SENDING === 'true' && process.env.NODE_ENV === 'development') {
        console.log('‚ö†Ô∏è ƒêang m√¥ ph·ªèng g·ª≠i email x√°c th·ª±c (SKIP_EMAIL_SENDING=true)');

        // T·∫°o n·ªôi dung email
        const subject = locale === 'en'
            ? 'Verify your account - VanLang Budget'
            : 'X√°c th·ª±c t√†i kho·∫£n - VanLang Budget';

        const text = locale === 'en'
            ? `Hello ${name},\n\nPlease click on the following link to verify your account: ${verificationURL}\n\nThis link is valid for 24 hours.\n\nIf you did not request this, please ignore this email.\n\nRegards,\nVanLang Budget Team`
            : `Xin ch√†o ${name},\n\nVui l√≤ng truy c·∫≠p link sau ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n: ${verificationURL}\n\nLink n√†y c√≥ hi·ªáu l·ª±c trong 24 gi·ªù.\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëi·ªÅu n√†y, vui l√≤ng b·ªè qua email n√†y.\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© VanLang Budget`;

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ m√¥ ph·ªèng
        return simulateEmailSending({
            to: email,
            subject,
            text
        });
    }

    // N·ªôi dung email d·ª±a theo ng√¥n ng·ªØ
    let subject, text, html;

    if (locale === 'en') {
        subject = 'Verify your account - VanLang Budget';
        text = `Hello ${name},\n\nPlease click on the following link to verify your account: ${verificationURL}\n\nThis link is valid for 24 hours.\n\nIf you did not request this, please ignore this email.\n\nRegards,\nVanLang Budget Team`;

        html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e9e9e9; border-radius: 5px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h1 style="color: #333;">VanLang Budget</h1>
            </div>
            <div style="padding: 20px; background-color: #f9f9f9; border-radius: 5px;">
                <p>Hello <strong>${name}</strong>,</p>
                <p>Thank you for registering with VanLang Budget. Please click the button below to verify your account:</p>
                <div style="text-align: center; margin: 30px 0;">
                    <a href="${verificationURL}" style="background-color: #4a6ee0; color: white; padding: 12px 30px; text-decoration: none; border-radius: 4px; font-weight: bold;">Verify Account</a>
                </div>
                <p>Or copy this link into your browser:</p>
                <p style="background-color: #ffffff; padding: 10px; border-radius: 3px; word-break: break-all;">${verificationURL}</p>
                <p>This verification link will expire in 24 hours.</p>
                <p>If you did not request this verification, please ignore this email or contact us if you have any questions.</p>
            </div>
            <div style="margin-top: 20px; text-align: center; color: #888; font-size: 12px;">
                <p>¬© ${new Date().getFullYear()} VanLang Budget. All Rights Reserved.</p>
            </div>
        </div>
        `;
    } else {
        // Default Vietnamese
        subject = 'X√°c th·ª±c t√†i kho·∫£n - VanLang Budget';
        text = `Xin ch√†o ${name},\n\nVui l√≤ng truy c·∫≠p link sau ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n: ${verificationURL}\n\nLink n√†y c√≥ hi·ªáu l·ª±c trong 24 gi·ªù.\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëi·ªÅu n√†y, vui l√≤ng b·ªè qua email n√†y.\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© VanLang Budget`;

        html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e9e9e9; border-radius: 5px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h1 style="color: #333;">VanLang Budget</h1>
            </div>
            <div style="padding: 20px; background-color: #f9f9f9; border-radius: 5px;">
                <p>Xin ch√†o <strong>${name}</strong>,</p>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n VanLang Budget. Vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
                <div style="text-align: center; margin: 30px 0;">
                    <a href="${verificationURL}" style="background-color: #4a6ee0; color: white; padding: 12px 30px; text-decoration: none; border-radius: 4px; font-weight: bold;">X√°c th·ª±c t√†i kho·∫£n</a>
                </div>
                <p>Ho·∫∑c sao ch√©p ƒë∆∞·ªùng d·∫´n n√†y v√†o tr√¨nh duy·ªát c·ªßa b·∫°n:</p>
                <p style="background-color: #ffffff; padding: 10px; border-radius: 3px; word-break: break-all;">${verificationURL}</p>
                <p>Li√™n k·∫øt x√°c th·ª±c n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
                <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu x√°c th·ª±c n√†y, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.</p>
            </div>
            <div style="margin-top: 20px; text-align: center; color: #888; font-size: 12px;">
                <p>¬© ${new Date().getFullYear()} VanLang Budget. ƒê√£ ƒëƒÉng k√Ω B·∫£n quy·ªÅn.</p>
            </div>
        </div>
        `;
    }

    // G·ª≠i email
    return sendEmail({
        to: email,
        subject,
        text,
        html
    });
};

/**
 * Hi·ªÉn th·ªã th√¥ng tin OTP trong console 
 * @param {String} email - Email ng∆∞·ªùi d√πng
 * @param {String} otp - M√£ OTP
 */
export const renderOTPConsole = (email, otp) => {
    console.log('\n');
    console.log('üîë =====================================================');
    console.log(`üîë M√É OTP ƒê∆Ø·ª¢C T·∫†O CHO EMAIL ${email}:`);
    console.log(`üîë ${otp}`);
    console.log('üîë =====================================================');
    console.log('\n');
};

/**
 * T·∫°o v√† g·ª≠i m√£ OTP qua email ƒë·ªÉ x√°c th·ª±c
 * @param {String} email - Email ng∆∞·ªùi nh·∫≠n 
 * @param {String} name - T√™n ng∆∞·ªùi nh·∫≠n
 * @param {String} locale - Ng√¥n ng·ªØ (vi ho·∫∑c en)
 * @returns {String} - M√£ OTP ƒë√£ t·∫°o
 */
export const sendOTPVerificationEmail = async (email, name, locale = 'vi') => {
    // T·∫°o m√£ OTP
    const otp = generateOTP();

    // Ki·ªÉm tra n·∫øu bi·∫øn m√¥i tr∆∞·ªùng SKIP_EMAIL_SENDING ƒë∆∞·ª£c b·∫≠t
    if (process.env.SKIP_EMAIL_SENDING === 'true' && process.env.NODE_ENV === 'development') {
        console.log(`‚ö†Ô∏è ƒêang b·ªè qua vi·ªác g·ª≠i OTP ƒë·∫øn ${email} (SKIP_EMAIL_SENDING=true)`);
        renderOTPConsole(email, otp);
        return otp;
    }

    // N·ªôi dung email d·ª±a theo ng√¥n ng·ªØ
    let subject, text, html;

    if (locale === 'en') {
        subject = 'Verify your account - VanLang Budget';
        text = `Hello ${name},\n\nYour OTP is: ${otp}\n\nThis code is valid for 10 minutes.\n\nIf you did not request this code, please ignore this email.\n\nRegards,\nVanLang Budget Team`;

        html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e9e9e9; border-radius: 5px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h1 style="color: #333;">VanLang Budget</h1>
            </div>
            <div style="padding: 20px; background-color: #f9f9f9; border-radius: 5px;">
                <p>Hello <strong>${name}</strong>,</p>
                <p>Thank you for registering with VanLang Budget. To complete the registration process, please use the OTP code below to verify your account:</p>
                <div style="background-color: #ffffff; padding: 15px; text-align: center; margin: 20px 0; border-radius: 5px; border: 1px dashed #ccc;">
                    <h2 style="margin: 0; color: #4a6ee0; letter-spacing: 5px;">${otp}</h2>
                </div>
                <p>This verification code will expire in 10 minutes.</p>
                <p>If you did not request this verification code, please ignore this email or contact us if you have any questions.</p>
            </div>
            <div style="margin-top: 20px; text-align: center; color: #888; font-size: 12px;">
                <p>¬© ${new Date().getFullYear()} VanLang Budget. All Rights Reserved.</p>
            </div>
        </div>
        `;
    } else {
        // Default Vietnamese
        subject = 'X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n - VanLang Budget';
        text = `Xin ch√†o ${name},\n\nM√£ OTP c·ªßa b·∫°n l√†: ${otp}\n\nM√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y.\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© VanLang Budget`;

        html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e9e9e9; border-radius: 5px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h1 style="color: #333;">VanLang Budget</h1>
            </div>
            <div style="padding: 20px; background-color: #f9f9f9; border-radius: 5px;">
                <p>Xin ch√†o <strong>${name}</strong>,</p>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n VanLang Budget. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng m√£ OTP d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
                <div style="background-color: #ffffff; padding: 15px; text-align: center; margin: 20px 0; border-radius: 5px; border: 1px dashed #ccc;">
                    <h2 style="margin: 0; color: #4a6ee0; letter-spacing: 5px;">${otp}</h2>
                </div>
                <p>M√£ x√°c th·ª±c n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
                <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ x√°c th·ª±c n√†y, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.</p>
            </div>
            <div style="margin-top: 20px; text-align: center; color: #888; font-size: 12px;">
                <p>¬© ${new Date().getFullYear()} VanLang Budget. ƒê√£ ƒëƒÉng k√Ω B·∫£n quy·ªÅn.</p>
            </div>
        </div>
        `;
    }

    try {
        // G·ª≠i email
        await sendEmail({
            to: email,
            subject,
            text,
            html
        });

        // Trong m√¥i tr∆∞·ªùng development, hi·ªÉn th·ªã OTP
        if (process.env.NODE_ENV === 'development') {
            console.log('\n');
            console.log('üîë =====================================================');
            console.log(`üîë M√É OTP ƒê∆Ø·ª¢C T·∫†O CHO EMAIL ${email}:`);
            console.log(`üîë ${otp}`);
            console.log('üîë =====================================================');
            console.log('\n');
        }

        return otp;
    } catch (error) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i email OTP:', error);
        throw error; // Re-throw ƒë·ªÉ x·ª≠ l√Ω ·ªü controller
    }
};

/**
 * Hi·ªÉn th·ªã th√¥ng tin token v√† URL ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u trong console
 * @param {String} email - Email ng∆∞·ªùi d√πng
 * @param {String} resetToken - Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 * @param {String} resetURL - URL ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 */
export const renderResetPasswordToken = (email, resetToken, resetURL) => {
    if (process.env.NODE_ENV === 'development') {
        console.log('\n');
        console.log('üîë ====================================================');
        console.log(`üîë TH√îNG TIN ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U CHO EMAIL ${email}:`);
        console.log(`üîë Token: ${resetToken}`);
        console.log(`üîë URL: ${resetURL}`);
        console.log('üîë ====================================================');
        console.log('\n');
    }
};

/**
 * M√¥ ph·ªèng vi·ªác g·ª≠i email th√†nh c√¥ng khi kh√¥ng th·ªÉ/kh√¥ng mu·ªën g·ª≠i email th·∫≠t
 * @param {Object} options - C√°c t√πy ch·ªçn g·ª≠i email
 * @returns {Object} - Th√¥ng tin m√¥ ph·ªèng v·ªÅ email ƒë√£ g·ª≠i
 */
export const simulateEmailSending = (options) => {
    console.log('\nüì® SIMULATED EMAIL (NOT ACTUALLY SENT):');
    console.log('To:', options.to);
    console.log('Subject:', options.subject);
    console.log('Text:', options.text?.substring(0, 150) + '...');
    console.log('\n');

    return {
        messageId: `simulated-${Date.now()}@localhost`,
        envelope: {
            from: process.env.EMAIL_FROM || 'no-reply@vanlangbudget.com',
            to: options.to
        },
        accepted: [options.to],
        rejected: [],
        pending: [],
        response: 'Simulated email sent successfully'
    };
};

/**
 * G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 * @param {String} email - Email ng∆∞·ªùi nh·∫≠n
 * @param {String} name - T√™n ng∆∞·ªùi nh·∫≠n
 * @param {String} resetURL - URL ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 * @param {String} locale - Ng√¥n ng·ªØ (vi ho·∫∑c en)
 * @returns {Promise} - Th√¥ng tin v·ªÅ email ƒë√£ g·ª≠i
 */
export const sendPasswordResetEmail = async (email, name, resetURL, locale = 'vi') => {
    // Lu√¥n hi·ªÉn th·ªã th√¥ng tin token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u trong console
    const resetToken = resetURL.split('/').pop();
    renderResetPasswordToken(email, resetToken, resetURL);

    // Ki·ªÉm tra n·∫øu bi·∫øn m√¥i tr∆∞·ªùng SKIP_EMAIL_SENDING ƒë∆∞·ª£c b·∫≠t
    if (process.env.SKIP_EMAIL_SENDING === 'true' && process.env.NODE_ENV === 'development') {
        console.log(`‚ö†Ô∏è ƒêang b·ªè qua vi·ªác g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn ${email} (SKIP_EMAIL_SENDING=true)`);
        console.log('‚ö†Ô∏è S·ª≠ d·ª•ng token v√† URL trong console ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u');
        return simulateEmailSending({
            to: email,
            subject: locale === 'en' ? 'Password Reset' : 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
            text: `Token: ${resetToken}, URL: ${resetURL}`
        });
    }

    // N·ªôi dung email d·ª±a theo ng√¥n ng·ªØ
    let subject, text, html;

    if (locale === 'en') {
        subject = 'Password Reset Request - VanLang Budget';
        text = `Hello ${name},\n\nYou requested to reset your password. Please click on the following link to reset your password: ${resetURL}\n\nThis link is valid for 10 minutes.\n\nIf you did not request this, please ignore this email.\n\nRegards,\nVanLang Budget Team`;

        html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e9e9e9; border-radius: 5px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h1 style="color: #333;">VanLang Budget</h1>
            </div>
            <div style="padding: 20px; background-color: #f9f9f9; border-radius: 5px;">
                <p>Hello <strong>${name}</strong>,</p>
                <p>You requested to reset your password for your VanLang Budget account. Please click the button below to proceed with the password reset:</p>
                <div style="text-align: center; margin: 30px 0;">
                    <a href="${resetURL}" style="background-color: #4a6ee0; color: white; padding: 12px 30px; text-decoration: none; border-radius: 4px; font-weight: bold;">Reset Password</a>
                </div>
                <p>Or copy this link into your browser:</p>
                <p style="background-color: #ffffff; padding: 10px; border-radius: 3px; word-break: break-all;">${resetURL}</p>
                <p>This link will expire in 10 minutes.</p>
                <p>If you did not request a password reset, please ignore this email or contact us if you have any questions.</p>
            </div>
            <div style="margin-top: 20px; text-align: center; color: #888; font-size: 12px;">
                <p>¬© ${new Date().getFullYear()} VanLang Budget. All Rights Reserved.</p>
            </div>
        </div>
        `;
    } else {
        // Default Vietnamese
        subject = 'Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - VanLang Budget';
        text = `Xin ch√†o ${name},\n\nB·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng truy c·∫≠p link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: ${resetURL}\n\nLink n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© VanLang Budget`;

        html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e9e9e9; border-radius: 5px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h1 style="color: #333;">VanLang Budget</h1>
            </div>
            <div style="padding: 20px; background-color: #f9f9f9; border-radius: 5px;">
                <p>Xin ch√†o <strong>${name}</strong>,</p>
                <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n VanLang Budget. Vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øn h√†nh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
                <div style="text-align: center; margin: 30px 0;">
                    <a href="${resetURL}" style="background-color: #4a6ee0; color: white; padding: 12px 30px; text-decoration: none; border-radius: 4px; font-weight: bold;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
                </div>
                <p>Ho·∫∑c sao ch√©p ƒë∆∞·ªùng d·∫´n n√†y v√†o tr√¨nh duy·ªát c·ªßa b·∫°n:</p>
                <p style="background-color: #ffffff; padding: 10px; border-radius: 3px; word-break: break-all;">${resetURL}</p>
                <p>Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
                <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.</p>
            </div>
            <div style="margin-top: 20px; text-align: center; color: #888; font-size: 12px;">
                <p>¬© ${new Date().getFullYear()} VanLang Budget. ƒê√£ ƒëƒÉng k√Ω B·∫£n quy·ªÅn.</p>
            </div>
        </div>
        `;
    }

    // G·ª≠i email
    return sendEmail({
        to: email,
        subject,
        text,
        html
    });
}; 