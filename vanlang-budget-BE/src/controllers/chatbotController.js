// Simplified imports to avoid circular dependencies
// import { GoogleGenerativeAI } from '@google/generative-ai'; // Kh√¥ng c·∫ßn ·ªü ƒë√¢y n·ªØa n·∫øu GeminiService ƒë∆∞·ª£c d√πng
// import getCacheService from '../services/cacheService.js'; // S·∫Ω ƒë∆∞·ª£c inject
// import NLPService from '../services/nlpService.js'; // S·∫Ω ƒë∆∞·ª£c inject
// import Income from '../models/incomeModel.js'; // Kh√¥ng d√πng tr·ª±c ti·∫øp ·ªü ƒë√¢y n·ªØa
// import Expense from '../models/expenseModel.js'; // Kh√¥ng d√πng tr·ª±c ti·∫øp ·ªü ƒë√¢y n·ªØa
// import Investment from '../models/investmentModel.js'; // Kh√¥ng d√πng tr·ª±c ti·∫øp ·ªü ƒë√¢y n·ªØa
// import Budget from '../models/budgetModel.js'; // Kh√¥ng d√πng tr·ª±c ti·∫øp ·ªü ƒë√¢y n·ªØa
// import Loan from '../models/loanModel.js'; // Kh√¥ng d√πng tr·ª±c ti·∫øp ·ªü ƒë√¢y n·ªØa

/**
 * Chatbot Controller - Handles HTTP requests for chatbot functionality
 */
class ChatbotController {
    constructor(chatbotService, nlpService, geminiService, cacheService) {
        this.chatbotService = chatbotService;
        this.nlpService = nlpService;
        this.geminiService = geminiService;
        this.cacheService = cacheService;

        // Analytics c√≥ th·ªÉ gi·ªØ l·∫°i ho·∫∑c chuy·ªÉn v√†o ChatbotService n·∫øu mu·ªën t·∫≠p trung h∆°n
        this.analytics = {
            requests: 0,
            errors: 0,
            ruleBasedResponses: 0,
            geminiResponses: 0,
            cacheHitsIntent: 0,
            cacheHitsGemini: 0,

            track: (event, data = {}) => {
                this[event] = (this[event] || 0) + 1;
                // console.log(`üìä Controller Analytics: ${event}`, data);
            },

            getStats: () => ({
                requests: this.requests || 0,
                errors: this.errors || 0,
                ruleBasedResponses: this.ruleBasedResponses || 0,
                geminiResponses: this.geminiResponses || 0,
                cacheHitsIntent: this.cacheHitsIntent || 0,
                cacheHitsGemini: this.cacheHitsGemini || 0,
                uptime: process.uptime()
            })
        };

        console.log('‚úÖ ChatbotController initialized with injected services');
    }

    /**
     * Enhanced chatbot endpoint - Refactored
     */
    async enhanced(req, res) {
        const startTime = Date.now();
        this.analytics.track('requests');

        try {
            const { message, language = 'vi' } = req.body;
            const userId = req.user?.id || req.user?._id;

            const validation = this.chatbotService.validateInput(message, language);
            if (!validation.isValid) {
                this.analytics.track('errors', { error: 'invalid_input' });
                return res.status(400).json({ success: false, error: validation.error });
            }
            if (!userId) {
                this.analytics.track('errors', { error: 'auth_failed' });
                return res.status(401).json({
                    success: false,
                    error: language === 'vi' ? 'X√°c th·ª±c th·∫•t b·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.' : 'Authentication failed. Please log in again.'
                });
            }
            console.log(`ü§ñ Enhanced Chat Request: "${message}" (${language}) from user ${userId}`);

            // 2. Analyze Intent (via new NLPService with node-nlp)
            // Cache key v·∫´n l√† message. N·∫øu b·∫°n thay ƒë·ªïi c√°ch NLP x·ª≠ l√Ω message (v√≠ d·ª• toLowerCase), cache key c≈©ng n√™n ph·∫£n √°nh ƒëi·ªÅu ƒë√≥.
            let intentAnalysis = await this.cacheService.getIntentAnalysis(message.toLowerCase().trim());
            if (intentAnalysis && intentAnalysis.source === 'nlp_cache') {
                this.analytics.track('cacheHitsIntent');
                console.log('üß† Intent (from cache):', JSON.stringify(intentAnalysis, null, 2));
            } else {
                intentAnalysis = await this.nlpService.analyzeIntent(message); // NLPService m·ªõi s·∫Ω t·ª± x·ª≠ l√Ω toLowerCase
                // Cache k·∫øt qu·∫£ m·ªõi n√†y.
                await this.cacheService.cacheIntentAnalysis(message.toLowerCase().trim(), { ...intentAnalysis, source: 'nlp_cache' });
                console.log('üß† Intent (from NLPService - node-nlp):', JSON.stringify(intentAnalysis, null, 2));
            }

            const intent = intentAnalysis.intent;
            const entities = intentAnalysis.entities || [];

            console.log(`üí° Node-NLP Intent: ${intent}, Confidence: ${intentAnalysis.confidence}`);
            if (entities.length > 0) {
                console.log('üí° Node-NLP Entities:', JSON.stringify(entities, null, 2));
            }

            // 3. Handle simple intents directly (B·∫†N C·∫¶N C·∫¨P NH·∫¨T T√äN INTENT CHO KH·ªöP V·ªöI training-data.json)
            let simpleResponseText = null;
            switch (intent) {
                case 'greeting.hello': // V√≠ d·ª•, n·∫øu intent trong training-data.json l√† 'greeting.hello'
                    simpleResponseText = this.chatbotService.getGreetingResponse(language);
                    break;
                case 'farewell.bye': // V√≠ d·ª•
                    simpleResponseText = this.chatbotService.getFarewellResponse(language);
                    break;
                case 'bot.introduction': // V√≠ d·ª•
                    simpleResponseText = this.chatbotService.getBotIntroductionResponse(language);
                    break;
                case 'bot.capabilities': // V√≠ d·ª•
                    simpleResponseText = this.chatbotService.getCapabilityResponse(language);
                    break;
                case 'common.time_date': // V√≠ d·ª•
                    simpleResponseText = this.chatbotService.getTimeDateResponse(language);
                    break;
                case 'nlu.fallback': // Ho·∫∑c intent b·∫°n ƒë·∫∑t cho tr∆∞·ªùng h·ª£p kh√¥ng hi·ªÉu r√µ
                case 'None': // Th∆∞·ªùng node-nlp tr·∫£ v·ªÅ 'None' n·∫øu kh√¥ng kh·ªõp intent n√†o
                    // simpleResponseText = language === 'vi' ? 'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n.' : 'Sorry, I didn\'t understand your request.';
                    // ƒê·ªÉ Gemini th·ª≠ x·ª≠ l√Ω n·∫øu NLP kh√¥ng ch·∫Øc ch·∫Øn
                    break;
            }

            if (simpleResponseText) {
                this.analytics.track('ruleBasedResponses');
                const responseTime = Date.now() - startTime;
                return res.json({
                    success: true,
                    response: simpleResponseText,
                    metadata: { intent, processedBy: 'rule', language, responseTime, nlp_analysis: intentAnalysis }
                });
            }

            // 4. For complex intents, proceed to get financial data and call Gemini
            const originalMessage = message;
            let financialContext = '';
            // S·ª≠ d·ª•ng intent t·ª´ node-nlp ƒë·ªÉ ki·ªÉm tra needsFinancialData
            const needsData = await this.chatbotService.needsFinancialData(originalMessage, intentAnalysis);

            if (needsData) {
                console.log('Financial data needed for intent:', intent, 'Fetching...');
                const finData = await this.chatbotService.getUserFinancialData(userId);
                if (finData && finData.error && !finData.totalBalance) {
                    console.warn('ChatbotController: Error fetching financial data from ChatbotService -', finData.error);
                    financialContext = language === 'vi' ? ' (L∆∞u √Ω: c√≥ l·ªói khi truy xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh c·ªßa b·∫°n) ' : ' (Note: error retrieving your financial data) ';
                } else if (finData) {
                    financialContext = this.chatbotService.formatFinancialContext(finData, language);
                }
            }

            // 5. Create user-side prompt for Gemini and call GeminiService
            let userSidePrompt = originalMessage;

            // X√¢y d·ª±ng userSidePrompt (B·∫†N C·∫¶N C·∫¨P NH·∫¨T T√äN INTENT CHO KH·ªöP V·ªöI training-data.json)
            if (intent === 'expense.query' || intent === 'expense.summary') {
                userSidePrompt = `Ng∆∞·ªùi d√πng mu·ªën bi·∫øt v·ªÅ chi ti√™u c·ªßa h·ªç. C√¢u h·ªèi g·ªëc: "${originalMessage}". H√£y t·∫≠p trung v√†o vi·ªác cung c·∫•p th√¥ng tin t·ªïng quan v·ªÅ c√°c kho·∫£n chi ti√™u t·ª´ d·ªØ li·ªáu t√†i ch√≠nh d∆∞·ªõi ƒë√¢y.`;
            } else if (intent === 'expense.detail') {
                userSidePrompt = `Ng∆∞·ªùi d√πng mu·ªën bi·∫øt chi ti·∫øt c√°c kho·∫£n chi ti√™u. C√¢u h·ªèi g·ªëc: "${originalMessage}". H√£y li·ªát k√™ c√°c kho·∫£n chi ti√™u c·ª• th·ªÉ t·ª´ d·ªØ li·ªáu t√†i ch√≠nh d∆∞·ªõi ƒë√¢y.`;
            } else if (intent === 'income.query' || intent === 'income.summary') {
                userSidePrompt = `Ng∆∞·ªùi d√πng mu·ªën bi·∫øt v·ªÅ thu nh·∫≠p c·ªßa h·ªç. C√¢u h·ªèi g·ªëc: "${originalMessage}". H√£y t·∫≠p trung v√†o vi·ªác cung c·∫•p th√¥ng tin t·ªïng quan v·ªÅ c√°c kho·∫£n thu nh·∫≠p t·ª´ d·ªØ li·ªáu t√†i ch√≠nh d∆∞·ªõi ƒë√¢y.`;
            } // ... (Th√™m c√°c else if kh√°c cho c√°c intent nh∆∞ income.detail, loan.query, balance.query, budget.check, etc.) ...
            else if (intent === 'balance.query') {
                userSidePrompt = `Ng∆∞·ªùi d√πng mu·ªën bi·∫øt s·ªë d∆∞ hi·ªán t·∫°i. C√¢u h·ªèi g·ªëc: "${originalMessage}". H√£y cung c·∫•p th√¥ng tin v·ªÅ s·ªë d∆∞ d·ª±a tr√™n d·ªØ li·ªáu t√†i ch√≠nh.`;
            }
            // (Consider a fallback for other financial intents not explicitly handled to guide Gemini generally)
            else if (intent && (intent.startsWith('financial.') || intent.startsWith('calculate.') || needsData) && userSidePrompt === originalMessage) {
                userSidePrompt = `Ng∆∞·ªùi d√πng c√≥ c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i ch√≠nh: "${originalMessage}". H√£y c·ªë g·∫Øng tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p (n·∫øu c√≥).`;
            }


            if (financialContext && needsData) { // Ch·ªâ th√™m context n·∫øu th·ª±c s·ª± c·∫ßn v√† c√≥ d·ªØ li·ªáu
                userSidePrompt += `\n\nD·ªØ li·ªáu t√†i ch√≠nh tham kh·∫£o:\n${financialContext}`;
            }

            userSidePrompt = userSidePrompt.trim();
            console.log(`üí¨ User-side prompt for Gemini (length ${userSidePrompt.length}): ${userSidePrompt.substring(0, 500)}...`);

            let cachedGeminiResponse = await this.cacheService.getGeminiResponse(userSidePrompt);
            if (cachedGeminiResponse) {
                this.analytics.track('cacheHitsGemini');
                this.analytics.track('geminiResponses');
                const responseTime = Date.now() - startTime;
                return res.json({
                    success: true,
                    response: cachedGeminiResponse,
                    metadata: { intent, cached: true, processedBy: 'gemini', language, responseTime, nlp_analysis: intentAnalysis }
                });
            }

            const geminiResult = await this.geminiService.generateResponse(
                userSidePrompt,
                { language, mode: 'enhanced' }
            );
            this.analytics.track('geminiResponses');

            if (geminiResult.success) {
                await this.cacheService.cacheGeminiResponse(userSidePrompt, geminiResult.response);
                const responseTime = Date.now() - startTime;
                return res.json({
                    success: true,
                    response: geminiResult.response,
                    metadata: {
                        intent,
                        processedBy: 'gemini',
                        language,
                        model: geminiResult.model,
                        usage: geminiResult.usage,
                        responseTime,
                        nlp_analysis: intentAnalysis
                    }
                });
            } else {
                this.analytics.track('errors', { error: 'gemini_failed', details: geminiResult.error });
                const responseTime = Date.now() - startTime;
                return res.status(500).json({
                    success: false,
                    error: geminiResult.error,
                    blocked: geminiResult.blocked,
                    metadata: { intent, processedBy: 'gemini', language, responseTime, nlp_analysis: intentAnalysis }
                });
            }

        } catch (error) {
            console.error('‚ùå ChatbotController Enhanced Error:', error);
            this.analytics.track('errors', { error: 'internal_controller_error' });
            const responseTime = Date.now() - startTime;
            return res.status(500).json({
                success: false,
                error: req.body.language === 'vi' ? 'ƒê√£ c√≥ l·ªói m√°y ch·ªß x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.' : 'A server error occurred. Please try again later.',
                metadata: {
                    responseTime,
                    ...(process.env.NODE_ENV === 'development' && { detail: error.message, stack: error.stack })
                }
            });
        }
    }

    /**
     * Legacy chatbot endpoint - Can be refactored similarly if still in use
     * For now, focusing on 'enhanced' as it's the primary target.
     */
    async legacy(req, res) {
        // TODO: Refactor legacy endpoint to use the new service-oriented architecture if needed.
        // For now, it might still use its old logic or call a simplified path in ChatbotService.
        // Consider if ChatbotService needs a specific legacyHandleMessage method.
        console.warn('Legacy chatbot endpoint called. Consider refactoring or deprecating.');
        // Fallback to a simple error or a very basic response
        return res.status(501).json({
            success: false,
            error: 'Legacy chatbot endpoint is not fully refactored. Please use the enhanced endpoint.'
        });
    }

    /**
     * Analytics endpoint
     */
    async getAnalytics(req, res) {
        try {
            if (req.user?.role !== 'admin') {
                return res.status(403).json({ error: 'Unauthorized' });
            }
            const cacheStats = this.cacheService.getStats(); // Use injected service
            // const nlpStats = this.nlpService.getStats(); // If NLPService has getStats()
            // const geminiStats = await this.geminiService.healthCheck(); // For some Gemini stats

            res.json({
                controllerAnalytics: this.analytics.getStats(),
                cache: cacheStats,
                // nlp: nlpStats,
                // gemini: geminiStats,
                uptime: process.uptime(),
                memory: process.memoryUsage()
            });
        } catch (error) {
            console.error('Error getting controller analytics:', error);
            res.status(500).json({ error: 'Internal server error' });
        }
    }

    /**
     * Health check endpoint
     */
    async healthCheck(req, res) {
        try {
            const geminiHealth = await this.geminiService.healthCheck(); // Use injected service
            const nlpHealth = typeof this.nlpService.getStats === 'function' ? this.nlpService.getStats() : { status: 'unknown' }; // Basic check
            const cacheHealth = typeof this.cacheService.getStats === 'function' ? { status: 'healthy', ...this.cacheService.getStats() } : { status: 'unknown' };
            const chatbotServiceHealth = typeof this.chatbotService.validateInput === 'function' ? { status: 'healthy' } : { status: 'unhealthy' }; // Basic check

            res.json({
                status: geminiHealth.status === 'healthy' ? 'healthy' : 'degraded',
                timestamp: new Date().toISOString(),
                services: {
                    nlp: nlpHealth,
                    cache: cacheHealth,
                    gemini: geminiHealth,
                    chatbot: chatbotServiceHealth
                }
            });
        } catch (error) {
            res.status(500).json({
                status: 'unhealthy',
                error: error.message,
                timestamp: new Date().toISOString()
            });
        }
    }

    /**
     * Clear cache endpoint
     */
    async clearCache(req, res) { // Renamed from clearCache to avoid conflict if ChatbotService has it
        try {
            // Assuming admin role check is done via middleware or here
            if (req.user?.role !== 'admin') {
                return res.status(403).json({ error: 'Unauthorized' });
            }
            await this.cacheService.clearAll(); // Use injected service's method for clearing all caches
            console.log('üßπ CONTROLLER: All caches cleared via CacheService');
            res.json({
                success: true,
                message: 'All caches cleared successfully.'
            });
        } catch (error) {
            console.error('Error clearing all caches from controller:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to clear all caches'
            });
        }
    }

    async getSystemStatus(req, res) {
        try {
            // Role check (ƒë√£ c√≥ protect middleware, nh∆∞ng check l·∫°i trong controller l√† t·ªët)
            if (req.user?.role !== 'admin') {
                return res.status(403).json({ success: false, error: 'Unauthorized' });
            }

            // L·∫•y th√¥ng tin t·ª´ c√°c service n·∫øu c√≥ th·ªÉ (v√≠ d·ª•, healthCheck c·ªßa t·ª´ng service)
            const geminiHealth = await this.geminiService.healthCheck();
            const nlpStatus = typeof this.nlpService.getStats === 'function' ? 'active' : 'unknown'; // Ho·∫∑c g·ªçi getStats()
            const cacheStatus = typeof this.cacheService.getStats === 'function' ? 'active' : 'unknown'; // Ho·∫∑c g·ªçi getStats()
            const chatbotServiceStatus = typeof this.chatbotService.validateInput === 'function' ? 'active' : 'unknown';

            const status = {
                server: {
                    uptime: process.uptime(),
                    memoryUsed: process.memoryUsage(),
                    cpuUsage: process.cpuUsage(),
                    nodeVersion: process.version,
                    platform: process.platform
                },
                environment: {
                    nodeEnv: process.env.NODE_ENV,
                    geminiModelUsed: this.geminiService.defaultModel, // L·∫•y t·ª´ geminiService
                    hasGeminiApiKey: !!process.env.GEMINI_API_KEY,
                    isMongoDbConnected: process.env.MONGO_URI ? 'configured' : 'missing' // C·∫ßn c√°ch ki·ªÉm tra k·∫øt n·ªëi th·ª±c t·∫ø
                },
                services: {
                    chatbotService: chatbotServiceStatus,
                    nlpService: nlpStatus,
                    cacheService: cacheStatus,
                    geminiService: geminiHealth.status || 'unknown'
                },
                timestamp: new Date().toISOString()
            };
            res.json({ success: true, status });
        } catch (error) {
            console.error('Error getting system status from controller:', error);
            res.status(500).json({ success: false, error: 'Internal server error while fetching status' });
        }
    }

    // Helper methods like getUserFinancialData, formatFinancialContext, generateGeminiResponse
    // are NOW REMOVED from ChatbotController as they are handled by respective services.
}

export default ChatbotController;
