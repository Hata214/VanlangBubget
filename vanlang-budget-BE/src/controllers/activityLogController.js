import AdminActivityLogger from '../utils/adminActivityLogger.js';
import { AppError } from '../middlewares/errorMiddleware.js';
import catchAsync from '../utils/catchAsync.js';
import logger from '../utils/logger.js';

/**
 * @desc    L·∫•y danh s√°ch activity logs
 * @route   GET /api/admin/activity-logs
 * @access  Private (Admin, Superadmin)
 */
export const getActivityLogs = catchAsync(async (req, res, next) => {
    const {
        page = 1,
        limit = 20,
        adminId,
        actionType,
        targetType,
        startDate,
        endDate
    } = req.query;

    // Admin ch·ªâ c√≥ th·ªÉ xem logs c·ªßa ch√≠nh m√¨nh
    // SuperAdmin c√≥ th·ªÉ xem t·∫•t c·∫£ logs
    const filterAdminId = req.user.role === 'admin' ? req.user.id : adminId;

    try {

        const result = await AdminActivityLogger.getLogs({
            adminId: filterAdminId,
            actionType,
            targetType,
            startDate,
            endDate,
            page: parseInt(page),
            limit: parseInt(limit)
        });

        console.log('üîç Activity logs result:', {
            totalLogs: result.logs?.length || 0,
            sampleLog: result.logs?.[0] || null,
            pagination: result.pagination || result
        });

        // N·∫øu kh√¥ng c√≥ logs n√†o, t·∫°o m·ªôt s·ªë logs m·∫´u
        if (result.total === 0 && !actionType && !startDate && !endDate) {
            console.log('üìù T·∫°o sample logs...');
            const sampleLogs = [
                {
                    adminId: req.user.id,
                    actionType: 'LOGIN',
                    targetType: 'System',
                    result: 'SUCCESS',
                    ipAddress: req.ip || '127.0.0.1',
                    userAgent: req.get('User-Agent') || 'Unknown',
                    timestamp: new Date(Date.now() - 1000 * 60 * 5)
                },
                {
                    adminId: req.user.id,
                    actionType: 'DASHBOARD_VIEW',
                    targetType: 'System',
                    inputData: { section: 'main-dashboard' },
                    result: 'SUCCESS',
                    ipAddress: req.ip || '127.0.0.1',
                    timestamp: new Date(Date.now() - 1000 * 60 * 3)
                },
                {
                    adminId: req.user.id,
                    actionType: 'ADMIN_LIST_VIEW',
                    targetType: 'Admin',
                    inputData: { page: 1, limit: 20 },
                    result: 'SUCCESS',
                    ipAddress: req.ip || '127.0.0.1',
                    timestamp: new Date(Date.now() - 1000 * 60 * 2)
                }
            ];

            try {
                for (const logData of sampleLogs) {
                    await AdminActivityLogger.logActivity(logData);
                }
                console.log('‚úÖ ƒê√£ t·∫°o sample logs');

                // L·∫•y l·∫°i logs sau khi t·∫°o
                const newResult = await AdminActivityLogger.getLogs({
                    adminId: filterAdminId,
                    actionType,
                    targetType,
                    startDate,
                    endDate,
                    page: parseInt(page),
                    limit: parseInt(limit)
                });

                result.logs = newResult.logs;
                result.total = newResult.total;
                result.totalPages = newResult.totalPages;
            } catch (sampleError) {
                console.error('‚ùå L·ªói t·∫°o sample logs:', sampleError);
            }
        }

        // Log vi·ªác xem activity logs
        await AdminActivityLogger.logSystemAction(
            req.user.id,
            'DASHBOARD_VIEW',
            { section: 'activity-logs', filters: req.query },
            'SUCCESS',
            req
        );

        res.status(200).json({
            status: 'success',
            data: result.logs,
            pagination: {
                page: result.page,
                totalPages: result.totalPages,
                total: result.total,
                hasNext: result.hasNext,
                hasPrev: result.hasPrev
            }
        });
    } catch (error) {
        logger.error('Error fetching activity logs:', error);
        return next(new AppError('Kh√¥ng th·ªÉ l·∫•y danh s√°ch ho·∫°t ƒë·ªông', 500));
    }
});

/**
 * @desc    L·∫•y activity logs c·ªßa m·ªôt admin c·ª• th·ªÉ
 * @route   GET /api/admin/activity-logs/:adminId
 * @access  Private (SuperAdmin only)
 */
export const getAdminActivityLogs = catchAsync(async (req, res, next) => {
    const { adminId } = req.params;
    const {
        page = 1,
        limit = 20,
        actionType,
        startDate,
        endDate
    } = req.query;

    // Ch·ªâ SuperAdmin m·ªõi c√≥ th·ªÉ xem logs c·ªßa admin kh√°c
    if (req.user.role !== 'superadmin' && adminId !== req.user.id) {
        return next(new AppError('B·∫°n ch·ªâ c√≥ th·ªÉ xem l·ªãch s·ª≠ ho·∫°t ƒë·ªông c·ªßa ch√≠nh m√¨nh', 403));
    }

    try {
        const result = await AdminActivityLogger.getAdminLogs(adminId, {
            actionType,
            startDate,
            endDate,
            page: parseInt(page),
            limit: parseInt(limit)
        });

        res.status(200).json({
            status: 'success',
            data: result.logs,
            pagination: {
                page: result.page,
                totalPages: result.totalPages,
                total: result.total,
                hasNext: result.hasNext,
                hasPrev: result.hasPrev
            }
        });
    } catch (error) {
        logger.error('Error fetching admin activity logs:', error);
        return next(new AppError('Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ ho·∫°t ƒë·ªông', 500));
    }
});

/**
 * @desc    L·∫•y th·ªëng k√™ ho·∫°t ƒë·ªông admin
 * @route   GET /api/admin/activity-logs/stats
 * @access  Private (Admin, Superadmin)
 */
export const getActivityStats = catchAsync(async (req, res, next) => {
    const { days = 30 } = req.query;

    // Admin ch·ªâ c√≥ th·ªÉ xem stats c·ªßa ch√≠nh m√¨nh
    const adminId = req.user.role === 'admin' ? req.user.id : null;

    try {
        const stats = await AdminActivityLogger.getActivityStats(adminId, parseInt(days));

        res.status(200).json({
            status: 'success',
            data: {
                stats,
                period: `${days} ng√†y qua`,
                adminId: adminId || 'all'
            }
        });
    } catch (error) {
        logger.error('Error fetching activity stats:', error);
        return next(new AppError('Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ ho·∫°t ƒë·ªông', 500));
    }
});

/**
 * @desc    L·∫•y logs theo action type
 * @route   GET /api/admin/activity-logs/by-action/:actionType
 * @access  Private (SuperAdmin only)
 */
export const getLogsByAction = catchAsync(async (req, res, next) => {
    const { actionType } = req.params;
    const {
        page = 1,
        limit = 20,
        startDate,
        endDate
    } = req.query;

    try {
        const result = await AdminActivityLogger.getLogsByAction(actionType, {
            startDate,
            endDate,
            page: parseInt(page),
            limit: parseInt(limit)
        });

        res.status(200).json({
            status: 'success',
            data: result.logs,
            pagination: {
                page: result.page,
                totalPages: result.totalPages,
                total: result.total,
                hasNext: result.hasNext,
                hasPrev: result.hasPrev
            }
        });
    } catch (error) {
        logger.error('Error fetching logs by action:', error);
        return next(new AppError('Kh√¥ng th·ªÉ l·∫•y logs theo h√†nh ƒë·ªông', 500));
    }
});

/**
 * @desc    L·∫•y logs trong kho·∫£ng th·ªùi gian
 * @route   GET /api/admin/activity-logs/by-date
 * @access  Private (Admin, Superadmin)
 */
export const getLogsByDateRange = catchAsync(async (req, res, next) => {
    const {
        startDate,
        endDate,
        page = 1,
        limit = 20
    } = req.query;

    if (!startDate || !endDate) {
        return next(new AppError('Vui l√≤ng cung c·∫•p ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c', 400));
    }

    // Admin ch·ªâ c√≥ th·ªÉ xem logs c·ªßa ch√≠nh m√¨nh
    const adminId = req.user.role === 'admin' ? req.user.id : null;

    try {
        const result = await AdminActivityLogger.getLogsByDateRange(startDate, endDate, {
            adminId,
            page: parseInt(page),
            limit: parseInt(limit)
        });

        res.status(200).json({
            status: 'success',
            data: result.logs,
            pagination: {
                page: result.page,
                totalPages: result.totalPages,
                total: result.total,
                hasNext: result.hasNext,
                hasPrev: result.hasPrev
            }
        });
    } catch (error) {
        logger.error('Error fetching logs by date range:', error);
        return next(new AppError('Kh√¥ng th·ªÉ l·∫•y logs theo kho·∫£ng th·ªùi gian', 500));
    }
});

/**
 * @desc    X√≥a t·∫•t c·∫£ activity logs
 * @route   DELETE /api/admin/activity-logs/delete-all
 * @access  Private (SuperAdmin only)
 */
export const deleteAllActivityLogs = catchAsync(async (req, res, next) => {
    // Ch·ªâ SuperAdmin m·ªõi c√≥ th·ªÉ x√≥a t·∫•t c·∫£ logs
    if (req.user.role !== 'superadmin') {
        return next(new AppError('Ch·ªâ SuperAdmin m·ªõi c√≥ th·ªÉ x√≥a t·∫•t c·∫£ l·ªãch s·ª≠ ho·∫°t ƒë·ªông', 403));
    }

    try {
        // ƒê·∫øm s·ªë logs tr∆∞·ªõc khi x√≥a
        const countResult = await AdminActivityLogger.countAllLogs();
        const totalLogs = countResult.total || 0;

        // X√≥a t·∫•t c·∫£ logs
        const result = await AdminActivityLogger.deleteAllLogs();

        // Log h√†nh ƒë·ªông x√≥a
        await AdminActivityLogger.logSystemAction(
            req.user.id,
            'SYSTEM_MAINTENANCE',
            {
                action: 'DELETE_ALL_ACTIVITY_LOGS',
                deletedCount: totalLogs,
                timestamp: new Date()
            },
            'SUCCESS',
            req
        );

        logger.info(`SuperAdmin ${req.user.id} deleted all activity logs (${totalLogs} records)`);

        res.status(200).json({
            status: 'success',
            message: `ƒê√£ x√≥a th√†nh c√¥ng ${totalLogs} b·∫£n ghi l·ªãch s·ª≠ ho·∫°t ƒë·ªông`,
            data: {
                deletedCount: totalLogs,
                deletedAt: new Date()
            }
        });
    } catch (error) {
        logger.error('Error deleting all activity logs:', error);

        // Log l·ªói
        await AdminActivityLogger.logSystemAction(
            req.user.id,
            'SYSTEM_MAINTENANCE',
            {
                action: 'DELETE_ALL_ACTIVITY_LOGS',
                error: error.message
            },
            'FAILED',
            req
        );

        return next(new AppError('Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠ ho·∫°t ƒë·ªông', 500));
    }
});
