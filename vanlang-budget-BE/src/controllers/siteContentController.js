import SiteContent from '../models/siteContentModel.js';
import AppError from '../utils/appError.js';
import logger from '../utils/logger.js';
import defaultHomepageContent from '../data/defaultHomepageContent.js';
import { createHomepageContent, updateHomepageContent } from '../scripts/initHomepageContent.js';

/**
 * @desc    L·∫•y n·ªôi dung footer
 * @route   GET /api/site-content/footer
 * @access  Public
 */
export const getFooterContent = async (req, res, next) => {
    try {
        const footerContent = await SiteContent.findOne({ type: 'footer' });

        res.status(200).json({
            status: 'success',
            data: footerContent ? footerContent.content : null
        });
    } catch (error) {
        logger.error('L·ªói khi l·∫•y n·ªôi dung footer:', error);
        next(new AppError('Kh√¥ng th·ªÉ l·∫•y n·ªôi dung footer', 500));
    }
};

/**
 * @desc    C·∫≠p nh·∫≠t n·ªôi dung footer
 * @route   PUT /api/site-content/footer
 * @access  Private (Admin/Superadmin)
 */
export const updateFooterContent = async (req, res, next) => {
    try {
        const { content } = req.body;

        if (!content) {
            return next(new AppError('Vui l√≤ng cung c·∫•p n·ªôi dung footer', 400));
        }

        const updatedFooter = await SiteContent.findOneAndUpdate(
            { type: 'footer' },
            { content },
            { new: true, upsert: true }
        );

        res.status(200).json({
            status: 'success',
            data: updatedFooter.content
        });
    } catch (error) {
        logger.error('L·ªói khi c·∫≠p nh·∫≠t n·ªôi dung footer:', error);
        next(new AppError('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t n·ªôi dung footer', 500));
    }
};

/**
 * @desc    L·∫•y n·ªôi dung trang web theo lo·∫°i
 * @route   GET /api/site-content/:type
 * @access  Public
 */
export const getSiteContentByType = async (req, res, next) => {
    try {
        const { type } = req.params;
        const { language } = req.query;

        console.log(`getSiteContentByType ƒë∆∞·ª£c g·ªçi v·ªõi type=${type}, language=${language}`);

        const validTypes = ['footer', 'about', 'terms', 'privacy', 'faq', 'contact', 'homepage', 'roadmap', 'pricing', 'features'];

        if (!type || !validTypes.includes(type)) {
            return next(new AppError('Lo·∫°i n·ªôi dung kh√¥ng h·ª£p l·ªá', 400));
        }

        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho homepage
        if (type === 'homepage') {
            const homepageContent = await SiteContent.getHomepageContent(language);

            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
            if (!homepageContent) {
                logger.info('Kh√¥ng t√¨m th·∫•y n·ªôi dung trang ch·ªß, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh');
                return res.status(200).json({
                    status: 'success',
                    data: {
                        content: defaultHomepageContent,
                        version: 1,
                        status: 'published',
                        sections: Object.keys(defaultHomepageContent)
                    }
                });
            }

            return res.status(200).json({
                status: 'success',
                data: homepageContent
            });
        }

        const siteContent = await SiteContent.findOne({ type });

        res.status(200).json({
            status: 'success',
            data: siteContent ? siteContent.content : null
        });
    } catch (error) {
        logger.error(`L·ªói khi l·∫•y n·ªôi dung lo·∫°i ${req.params.type}:`, error);
        next(new AppError(`Kh√¥ng th·ªÉ l·∫•y n·ªôi dung lo·∫°i ${req.params.type}`, 500));
    }
};

/**
 * @desc    C·∫≠p nh·∫≠t n·ªôi dung trang web theo lo·∫°i
 * @route   PUT /api/site-content/:type
 * @access  Private (Admin/Superadmin)
 */
export const updateSiteContentByType = async (req, res, next) => {
    try {
        const { type } = req.params;
        const { content, status } = req.body;

        console.log(`üîÑ updateSiteContentByType ƒë∆∞·ª£c g·ªçi v·ªõi type=${type}`);
        console.log(`üìù Content ƒë∆∞·ª£c g·ª≠i:`, JSON.stringify(content, null, 2));

        const validTypes = ['footer', 'about', 'terms', 'privacy', 'faq', 'contact', 'homepage', 'roadmap', 'pricing', 'features'];

        if (!type || !validTypes.includes(type)) {
            return next(new AppError('Lo·∫°i n·ªôi dung kh√¥ng h·ª£p l·ªá', 400));
        }

        if (!content) {
            return next(new AppError('Vui l√≤ng cung c·∫•p n·ªôi dung', 400));
        }

        // Ghi log thao t√°c ch·ªânh s·ª≠a
        logger.info(`Admin ${req.user.email} ƒëang c·∫≠p nh·∫≠t n·ªôi dung lo·∫°i: ${type}`);

        let updatedContent;

        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho homepage
        if (type === 'homepage') {
            // Ki·ªÉm tra n·∫øu Admin th√¥ng th∆∞·ªùng th√¨ ƒë·∫∑t tr·∫°ng th√°i pending_review
            const userRole = req.user.role;
            const contentStatus = userRole === 'superadmin' ? (status || 'published') : 'pending_review';

            updatedContent = await SiteContent.updateHomepageContent(content, req.user._id, {
                status: contentStatus
            });

            // Ghi log c·∫ßn superadmin ph√™ duy·ªát n·∫øu l√† admin th√¥ng th∆∞·ªùng
            if (userRole !== 'superadmin') {
                logger.info(`N·ªôi dung trang ch·ªß c·∫ßn ƒë∆∞·ª£c SuperAdmin ph√™ duy·ªát, c·∫≠p nh·∫≠t b·ªüi: ${req.user.email}`);
            }
        } else {
            updatedContent = await SiteContent.findOneAndUpdate(
                { type },
                {
                    content,
                    lastUpdatedBy: req.user._id
                },
                { new: true, upsert: true }
            );
        }

        // Ghi log k·∫øt qu·∫£
        logger.info(`C·∫≠p nh·∫≠t n·ªôi dung ${type} th√†nh c√¥ng, ID: ${updatedContent._id}`);
        console.log(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng, tr·∫£ v·ªÅ data:`, JSON.stringify(updatedContent.content, null, 2));

        res.status(200).json({
            status: 'success',
            data: updatedContent.content,
            meta: {
                version: updatedContent.version,
                status: updatedContent.status,
                updatedAt: updatedContent.updatedAt,
                sections: updatedContent.sections
            }
        });
    } catch (error) {
        logger.error(`L·ªói khi c·∫≠p nh·∫≠t n·ªôi dung lo·∫°i ${req.params.type}:`, error);
        next(new AppError(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t n·ªôi dung lo·∫°i ${req.params.type}`, 500));
    }
};

/**
 * @desc    L·∫•y n·ªôi dung trang ch·ªß theo section
 * @route   GET /api/site-content/homepage/:section
 * @access  Public
 */
export const getHomepageSection = async (req, res, next) => {
    try {
        const { section } = req.params;
        const { language } = req.query;

        console.log(`getHomepageSection ƒë∆∞·ª£c g·ªçi v·ªõi section=${section}, language=${language}`);

        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa section
        const validSections = ['hero', 'features', 'testimonials', 'pricing', 'cta', 'stats', 'footer', 'header'];
        if (!section || !validSections.includes(section)) {
            console.log(`Section kh√¥ng h·ª£p l·ªá: ${section}`);
            return next(new AppError(`Section kh√¥ng h·ª£p l·ªá: ${section}`, 400));
        }

        const homepage = await SiteContent.findOne({ type: 'homepage' });

        // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu trong DB, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
        if (!homepage) {
            // Ki·ªÉm tra xem section c√≥ t·ªìn t·∫°i trong d·ªØ li·ªáu m·∫∑c ƒë·ªãnh kh√¥ng
            if (defaultHomepageContent[section]) {
                logger.info(`Kh√¥ng t√¨m th·∫•y n·ªôi dung trang ch·ªß, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho section: ${section}`);
                return res.status(200).json({
                    status: 'success',
                    data: defaultHomepageContent[section]
                });
            } else {
                logger.info(`Section ${section} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu m·∫∑c ƒë·ªãnh`);
                return res.status(200).json({
                    status: 'success',
                    data: null
                });
            }
        }

        // Ki·ªÉm tra n·∫øu c√≥ h·ªó tr·ª£ ng√¥n ng·ªØ ƒë∆∞·ª£c y√™u c·∫ßu
        let content = homepage.content;

        // Log n·ªôi dung hi·ªán t·∫°i ƒë·ªÉ debug
        console.log(`N·ªôi dung trang ch·ªß hi·ªán t·∫°i c√≥ sections: ${Object.keys(content).join(', ')}`);

        if (language && language !== 'vi' && content[language] && content[language][section]) {
            console.log(`Tr·∫£ v·ªÅ n·ªôi dung section ${section} cho ng√¥n ng·ªØ ${language}`);
            return res.status(200).json({
                status: 'success',
                data: content[language][section]
            });
        }

        // Ki·ªÉm tra xem section c√≥ t·ªìn t·∫°i kh√¥ng
        if (!content[section]) {
            console.log(`Section ${section} kh√¥ng t·ªìn t·∫°i trong n·ªôi dung trang ch·ªß, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh`);
            // N·∫øu kh√¥ng c√≥ trong DB, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
            if (defaultHomepageContent[section]) {
                return res.status(200).json({
                    status: 'success',
                    data: defaultHomepageContent[section],
                    meta: {
                        source: 'fallback'
                    }
                });
            } else {
                return res.status(200).json({
                    status: 'success',
                    data: null
                });
            }
        }

        // Tr·∫£ v·ªÅ n·ªôi dung section ch·ªâ ƒë·ªãnh
        console.log(`Tr·∫£ v·ªÅ n·ªôi dung section ${section} t·ª´ database`);
        res.status(200).json({
            status: 'success',
            data: content[section]
        });
    } catch (error) {
        logger.error(`L·ªói khi l·∫•y section ${req.params.section} c·ªßa trang ch·ªß:`, error);
        next(new AppError(`Kh√¥ng th·ªÉ l·∫•y section ${req.params.section} c·ªßa trang ch·ªß`, 500));
    }
};

/**
 * @desc    C·∫≠p nh·∫≠t n·ªôi dung trang ch·ªß theo section
 * @route   PUT /api/site-content/homepage/:section
 * @access  Private (Admin/Superadmin)
 */
export const updateHomepageSection = async (req, res, next) => {
    try {
        const { section } = req.params;
        const { content, language } = req.body;

        if (!content) {
            return next(new AppError('Vui l√≤ng cung c·∫•p n·ªôi dung cho section', 400));
        }

        // L·∫•y n·ªôi dung trang ch·ªß hi·ªán t·∫°i
        let homepage = await SiteContent.findOne({ type: 'homepage' });
        let homepageContent = homepage ? { ...homepage.content } : {};

        // X·ª≠ l√Ω ng√¥n ng·ªØ
        if (language && language !== 'vi') {
            if (!homepageContent[language]) {
                homepageContent[language] = {};
            }
            homepageContent[language][section] = content;
        } else {
            homepageContent[section] = content;
        }

        // Ki·ªÉm tra n·∫øu Admin th√¥ng th∆∞·ªùng th√¨ ƒë·∫∑t tr·∫°ng th√°i pending_review
        const userRole = req.user.role;
        const contentStatus = userRole === 'superadmin' ? 'published' : 'pending_review';

        // C·∫≠p nh·∫≠t n·ªôi dung
        const updatedContent = await SiteContent.updateHomepageContent(
            homepageContent,
            req.user._id,
            {
                status: contentStatus,
                language: language
            }
        );

        // Ghi log
        logger.info(`Admin ${req.user.email} ƒë√£ c·∫≠p nh·∫≠t section ${section} c·ªßa trang ch·ªß`);

        if (userRole !== 'superadmin') {
            logger.info(`Section ${section} c·ªßa trang ch·ªß c·∫ßn ƒë∆∞·ª£c SuperAdmin ph√™ duy·ªát, c·∫≠p nh·∫≠t b·ªüi: ${req.user.email}`);
        }

        res.status(200).json({
            status: 'success',
            data: content,
            meta: {
                version: updatedContent.version,
                status: updatedContent.status,
                updatedAt: updatedContent.updatedAt
            }
        });
    } catch (error) {
        logger.error(`L·ªói khi c·∫≠p nh·∫≠t section ${req.params.section} c·ªßa trang ch·ªß:`, error);
        next(new AppError(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t section ${req.params.section} c·ªßa trang ch·ªß`, 500));
    }
};

/**
 * @desc    L·∫•y l·ªãch s·ª≠ ch·ªânh s·ª≠a n·ªôi dung
 * @route   GET /api/site-content/:type/history
 * @access  Private (Admin/Superadmin)
 */
export const getContentHistory = async (req, res, next) => {
    try {
        const { type } = req.params;

        const validTypes = ['footer', 'about', 'terms', 'privacy', 'faq', 'contact', 'homepage', 'roadmap', 'pricing'];

        if (!type || !validTypes.includes(type)) {
            return next(new AppError('Lo·∫°i n·ªôi dung kh√¥ng h·ª£p l·ªá', 400));
        }

        const history = await SiteContent.getContentHistory(type);

        res.status(200).json({
            status: 'success',
            data: history
        });
    } catch (error) {
        logger.error(`L·ªói khi l·∫•y l·ªãch s·ª≠ n·ªôi dung ${req.params.type}:`, error);
        next(new AppError(`Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ n·ªôi dung ${req.params.type}`, 500));
    }
};

/**
 * @desc    Kh√¥i ph·ª•c n·ªôi dung t·ª´ phi√™n b·∫£n tr∆∞·ªõc
 * @route   POST /api/site-content/:type/restore/:version
 * @access  Private (SuperAdmin only)
 */
export const restoreContentVersion = async (req, res, next) => {
    try {
        const { type, version } = req.params;

        const validTypes = ['footer', 'about', 'terms', 'privacy', 'faq', 'contact', 'homepage', 'roadmap', 'pricing'];

        if (!type || !validTypes.includes(type)) {
            return next(new AppError('Lo·∫°i n·ªôi dung kh√¥ng h·ª£p l·ªá', 400));
        }

        const restoredContent = await SiteContent.restoreVersion(type, parseInt(version), req.user._id);

        if (!restoredContent) {
            return next(new AppError('Kh√¥ng t√¨m th·∫•y phi√™n b·∫£n c·∫ßn kh√¥i ph·ª•c', 404));
        }

        // Ghi log
        logger.info(`SuperAdmin ${req.user.email} ƒë√£ kh√¥i ph·ª•c n·ªôi dung ${type} v·ªÅ phi√™n b·∫£n ${version}`);

        res.status(200).json({
            status: 'success',
            data: restoredContent.content,
            meta: {
                version: restoredContent.version,
                status: restoredContent.status,
                updatedAt: restoredContent.updatedAt
            }
        });
    } catch (error) {
        logger.error(`L·ªói khi kh√¥i ph·ª•c n·ªôi dung ${req.params.type} phi√™n b·∫£n ${req.params.version}:`, error);
        next(new AppError(`Kh√¥ng th·ªÉ kh√¥i ph·ª•c n·ªôi dung ${req.params.type}`, 500));
    }
};

/**
 * @desc    Ph√™ duy·ªát n·ªôi dung trang ch·ªß
 * @route   POST /api/site-content/homepage/approve
 * @access  Private (SuperAdmin only)
 */
export const approveHomepageContent = async (req, res, next) => {
    try {
        const homepage = await SiteContent.findOne({ type: 'homepage' });

        if (!homepage) {
            return next(new AppError('Kh√¥ng t√¨m th·∫•y n·ªôi dung trang ch·ªß', 404));
        }

        if (homepage.status !== 'pending_review') {
            return next(new AppError('N·ªôi dung trang ch·ªß kh√¥ng c·∫ßn ph√™ duy·ªát', 400));
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh published
        const updatedContent = await SiteContent.findOneAndUpdate(
            { type: 'homepage' },
            { status: 'published' },
            { new: true }
        );

        // Ghi log
        logger.info(`SuperAdmin ${req.user.email} ƒë√£ ph√™ duy·ªát n·ªôi dung trang ch·ªß phi√™n b·∫£n ${homepage.version}`);

        res.status(200).json({
            status: 'success',
            data: updatedContent.content,
            meta: {
                version: updatedContent.version,
                status: updatedContent.status,
                updatedAt: updatedContent.updatedAt
            }
        });
    } catch (error) {
        logger.error('L·ªói khi ph√™ duy·ªát n·ªôi dung trang ch·ªß:', error);
        next(new AppError('Kh√¥ng th·ªÉ ph√™ duy·ªát n·ªôi dung trang ch·ªß', 500));
    }
};

/**
 * @desc    T·ª´ ch·ªëi n·ªôi dung trang ch·ªß
 * @route   POST /api/site-content/homepage/reject
 * @access  Private (SuperAdmin only)
 */
export const rejectHomepageContent = async (req, res, next) => {
    try {
        const { reason } = req.body;

        const homepage = await SiteContent.findOne({ type: 'homepage' });

        if (!homepage) {
            return next(new AppError('Kh√¥ng t√¨m th·∫•y n·ªôi dung trang ch·ªß', 404));
        }

        if (homepage.status !== 'pending_review') {
            return next(new AppError('N·ªôi dung trang ch·ªß kh√¥ng c·∫ßn ph√™ duy·ªát', 400));
        }

        // Kh√¥i ph·ª•c phi√™n b·∫£n tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
        let previousContent = null;
        let previousVersion = null;

        if (homepage.history && homepage.history.length > 0) {
            const lastPublishedVersion = homepage.history.find(h => h.status === 'published');
            if (lastPublishedVersion) {
                previousContent = lastPublishedVersion.content;
                previousVersion = lastPublishedVersion.version;
            }
        }

        // N·∫øu c√≥ phi√™n b·∫£n ƒë√£ xu·∫•t b·∫£n tr∆∞·ªõc ƒë√≥, kh√¥i ph·ª•c l·∫°i
        if (previousContent) {
            await SiteContent.findOneAndUpdate(
                { type: 'homepage' },
                {
                    content: previousContent,
                    status: 'published',
                    $push: {
                        history: {
                            content: homepage.content,
                            updatedBy: homepage.lastUpdatedBy,
                            updatedAt: homepage.updatedAt,
                            version: homepage.version,
                            status: 'rejected',
                            reason: reason || 'B·ªã t·ª´ ch·ªëi b·ªüi SuperAdmin'
                        }
                    }
                },
                { new: false }
            );

            // Ghi log
            logger.info(`SuperAdmin ${req.user.email} ƒë√£ t·ª´ ch·ªëi n·ªôi dung trang ch·ªß phi√™n b·∫£n ${homepage.version} v√† kh√¥i ph·ª•c phi√™n b·∫£n ${previousVersion}`);
        } else {
            // N·∫øu kh√¥ng c√≥ phi√™n b·∫£n tr∆∞·ªõc, ch·ªâ ƒë√°nh d·∫•u t·ª´ ch·ªëi
            await SiteContent.findOneAndUpdate(
                { type: 'homepage' },
                {
                    status: 'draft',
                    $push: {
                        history: {
                            content: homepage.content,
                            updatedBy: homepage.lastUpdatedBy,
                            updatedAt: homepage.updatedAt,
                            version: homepage.version,
                            status: 'rejected',
                            reason: reason || 'B·ªã t·ª´ ch·ªëi b·ªüi SuperAdmin'
                        }
                    }
                },
                { new: false }
            );

            // Ghi log
            logger.info(`SuperAdmin ${req.user.email} ƒë√£ t·ª´ ch·ªëi n·ªôi dung trang ch·ªß phi√™n b·∫£n ${homepage.version}`);
        }

        const updatedContent = await SiteContent.findOne({ type: 'homepage' });

        res.status(200).json({
            status: 'success',
            data: updatedContent.content,
            meta: {
                version: updatedContent.version,
                status: updatedContent.status,
                updatedAt: updatedContent.updatedAt,
                message: 'N·ªôi dung ƒë√£ b·ªã t·ª´ ch·ªëi'
            }
        });
    } catch (error) {
        logger.error('L·ªói khi t·ª´ ch·ªëi n·ªôi dung trang ch·ªß:', error);
        next(new AppError('Kh√¥ng th·ªÉ t·ª´ ch·ªëi n·ªôi dung trang ch·ªß', 500));
    }
};

/**
 * @desc    Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho trang ch·ªß
 * @route   POST /api/site-content/homepage/initialize
 * @access  Private (SuperAdmin only)
 */
export const initializeHomepageContent = async (req, res, next) => {
    try {
        // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu trang ch·ªß ch∆∞a
        const existingHomepage = await SiteContent.findOne({ type: 'homepage' });

        let result;
        if (existingHomepage) {
            // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu, c·∫≠p nh·∫≠t
            logger.info(`SuperAdmin ${req.user.email} ƒëang c·∫≠p nh·∫≠t d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho trang ch·ªß`);
            result = await updateHomepageContent();
            logger.info(`D·ªØ li·ªáu trang ch·ªß ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng b·ªüi ${req.user.email}`);
        } else {
            // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, t·∫°o m·ªõi
            logger.info(`SuperAdmin ${req.user.email} ƒëang t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho trang ch·ªß`);
            result = await createHomepageContent();
            logger.info(`D·ªØ li·ªáu trang ch·ªß ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng b·ªüi ${req.user.email}`);
        }

        res.status(200).json({
            status: 'success',
            message: existingHomepage ? 'D·ªØ li·ªáu trang ch·ªß ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' : 'D·ªØ li·ªáu trang ch·ªß ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
            data: {
                content: result.content,
                version: result.version,
                status: result.status,
                sections: result.sections
            }
        });
    } catch (error) {
        logger.error('L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu trang ch·ªß:', error);
        next(new AppError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu trang ch·ªß', 500));
    }
};

/**
 * @desc    Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho trang Features
 * @route   POST /api/site-content/features/initialize
 * @access  Private (Admin/Superadmin)
 */
export const initializeFeaturesContent = async (req, res, next) => {
    try {
        const defaultFeaturesContent = {
            vi: {
                title: "T√≠nh nƒÉng n·ªïi b·∫≠t",
                subtitle: "C√¥ng c·ª• qu·∫£n l√Ω t√†i ch√≠nh m·∫°nh m·∫Ω",
                description: "Nh·ªØng c√¥ng c·ª• gi√∫p b·∫°n qu·∫£n l√Ω t√†i ch√≠nh hi·ªáu qu·∫£",
                features: [
                    {
                        icon: "üìä",
                        title: "Theo d√µi thu chi",
                        description: "Ghi l·∫°i v√† ph√¢n lo·∫°i t·∫•t c·∫£ c√°c kho·∫£n thu nh·∫≠p, chi ph√≠ h√†ng ng√†y, h√†ng tu·∫ßn v√† h√†ng th√°ng v·ªõi giao di·ªán th√¢n thi·ªán v√† d·ªÖ s·ª≠ d·ª•ng."
                    },
                    {
                        icon: "üéØ",
                        title: "Qu·∫£n l√Ω ng√¢n s√°ch",
                        description: "Thi·∫øt l·∫≠p v√† theo d√µi ng√¢n s√°ch theo danh m·ª•c, gi√∫p b·∫°n ki·ªÉm so√°t chi ti√™u v√† h√¨nh th√†nh th√≥i quen t√†i ch√≠nh t·ªët."
                    },
                    {
                        icon: "üí∞",
                        title: "Qu·∫£n l√Ω kho·∫£n vay",
                        description: "Theo d√µi c√°c kho·∫£n vay, l·ªãch tr·∫£ n·ª£ v√† t√≠nh to√°n l√£i su·∫•t m·ªôt c√°ch ch√≠nh x√°c v√† chi ti·∫øt."
                    },
                    {
                        icon: "üìà",
                        title: "Qu·∫£n l√Ω ƒë·∫ßu t∆∞",
                        description: "Theo d√µi danh m·ª•c ƒë·∫ßu t∆∞ b·∫•t ƒë·ªông s·∫£n, ti·∫øt ki·ªám ng√¢n h√†ng v·ªõi t√≠nh nƒÉng t√≠nh l√£i su·∫•t t·ª± ƒë·ªông."
                    },
                    {
                        icon: "ü§ñ",
                        title: "VanLang Agent AI",
                        description: "Tr·ª£ l√Ω AI th√¥ng minh h·ªó tr·ª£ tr·∫£ l·ªùi c√¢u h·ªèi t√†i ch√≠nh, t√≠nh to√°n v√† ph√¢n t√≠ch d·ªØ li·ªáu b·∫±ng ti·∫øng Vi·ªát."
                    },
                    {
                        icon: "üì±",
                        title: "Giao di·ªán th√¢n thi·ªán",
                        description: "Thi·∫øt k·∫ø responsive, h·ªó tr·ª£ dark mode v√† ƒëa ng√¥n ng·ªØ (Ti·∫øng Vi·ªát/English) cho tr·∫£i nghi·ªám t·ªët nh·∫•t."
                    }
                ]
            },
            en: {
                title: "Outstanding Features",
                subtitle: "Powerful financial management tools",
                description: "Tools that help you manage your finances effectively",
                features: [
                    {
                        icon: "üìä",
                        title: "Income & Expense Tracking",
                        description: "Record and categorize all income and expenses daily, weekly, and monthly with a user-friendly interface."
                    },
                    {
                        icon: "üéØ",
                        title: "Budget Management",
                        description: "Set up and track budgets by category, helping you control spending and develop good financial habits."
                    },
                    {
                        icon: "üí∞",
                        title: "Loan Management",
                        description: "Track loans, repayment schedules, and calculate interest rates accurately and in detail."
                    },
                    {
                        icon: "üìà",
                        title: "Investment Management",
                        description: "Track real estate investment portfolios, bank savings with automatic interest calculation features."
                    },
                    {
                        icon: "ü§ñ",
                        title: "VanLang Agent AI",
                        description: "Smart AI assistant that helps answer financial questions, calculations, and data analysis in Vietnamese."
                    },
                    {
                        icon: "üì±",
                        title: "User-friendly Interface",
                        description: "Responsive design, dark mode support, and multilingual (Vietnamese/English) for the best experience."
                    }
                ]
            }
        };

        // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu features ch∆∞a
        const existingFeatures = await SiteContent.findOne({ type: 'features' });

        let result;
        if (existingFeatures) {
            // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu, c·∫≠p nh·∫≠t
            logger.info(`Admin ${req.user.email} ƒëang c·∫≠p nh·∫≠t d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho trang Features`);
            result = await SiteContent.findOneAndUpdate(
                { type: 'features' },
                {
                    content: defaultFeaturesContent,
                    lastUpdatedBy: req.user._id,
                    status: 'published'
                },
                { new: true, upsert: true }
            );
            logger.info(`D·ªØ li·ªáu trang Features ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng b·ªüi ${req.user.email}`);
        } else {
            // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, t·∫°o m·ªõi
            logger.info(`Admin ${req.user.email} ƒëang t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho trang Features`);
            result = await SiteContent.create({
                type: 'features',
                content: defaultFeaturesContent,
                lastUpdatedBy: req.user._id,
                status: 'published',
                version: 1
            });
            logger.info(`D·ªØ li·ªáu trang Features ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng b·ªüi ${req.user.email}`);
        }

        res.status(200).json({
            status: 'success',
            message: existingFeatures ? 'D·ªØ li·ªáu trang Features ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' : 'D·ªØ li·ªáu trang Features ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
            data: {
                content: result.content,
                version: result.version,
                status: result.status,
                type: result.type
            }
        });
    } catch (error) {
        logger.error('L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu trang Features:', error);
        next(new AppError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu trang Features', 500));
    }
};

/**
 * @desc    Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho trang Roadmap
 * @route   POST /api/site-content/roadmap/initialize
 * @access  Private (Admin/Superadmin)
 */
export const initializeRoadmapContent = async (req, res, next) => {
    try {
        const defaultRoadmapContent = {
            vi: {
                title: "L·ªô tr√¨nh ph√°t tri·ªÉn",
                subtitle: "K·∫ø ho·∫°ch ph√°t tri·ªÉn s·∫£n ph·∫©m",
                description: "Nh·ªØng t√≠nh nƒÉng v√† c·∫£i ti·∫øn s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong t∆∞∆°ng lai",
                roadmap: []
            },
            en: {
                title: "Development Roadmap",
                subtitle: "Product development plan",
                description: "Features and improvements to be developed in the future",
                roadmap: []
            }
        };

        const existingRoadmap = await SiteContent.findOne({ type: 'roadmap' });

        let result;
        if (existingRoadmap) {
            result = await SiteContent.findOneAndUpdate(
                { type: 'roadmap' },
                {
                    content: defaultRoadmapContent,
                    lastUpdatedBy: req.user._id,
                    status: 'published'
                },
                { new: true, upsert: true }
            );
        } else {
            result = await SiteContent.create({
                type: 'roadmap',
                content: defaultRoadmapContent,
                lastUpdatedBy: req.user._id,
                status: 'published',
                version: 1
            });
        }

        res.status(200).json({
            status: 'success',
            message: existingRoadmap ? 'D·ªØ li·ªáu trang Roadmap ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' : 'D·ªØ li·ªáu trang Roadmap ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
            data: {
                content: result.content,
                version: result.version,
                status: result.status,
                type: result.type
            }
        });
    } catch (error) {
        logger.error('L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu trang Roadmap:', error);
        next(new AppError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu trang Roadmap', 500));
    }
};

/**
 * @desc    Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho trang Pricing
 * @route   POST /api/site-content/pricing/initialize
 * @access  Private (Admin/Superadmin)
 */
export const initializePricingContent = async (req, res, next) => {
    try {
        const defaultPricingContent = {
            vi: {
                title: "B·∫£ng gi√°",
                subtitle: "L·ª±a ch·ªçn g√≥i ph√π h·ª£p v·ªõi b·∫°n",
                description: "C√°c g√≥i d·ªãch v·ª• v·ªõi m·ª©c gi√° h·ª£p l√Ω",
                plans: []
            },
            en: {
                title: "Pricing",
                subtitle: "Choose the plan that suits you",
                description: "Service packages with reasonable prices",
                plans: []
            }
        };

        const existingPricing = await SiteContent.findOne({ type: 'pricing' });

        let result;
        if (existingPricing) {
            result = await SiteContent.findOneAndUpdate(
                { type: 'pricing' },
                {
                    content: defaultPricingContent,
                    lastUpdatedBy: req.user._id,
                    status: 'published'
                },
                { new: true, upsert: true }
            );
        } else {
            result = await SiteContent.create({
                type: 'pricing',
                content: defaultPricingContent,
                lastUpdatedBy: req.user._id,
                status: 'published',
                version: 1
            });
        }

        res.status(200).json({
            status: 'success',
            message: existingPricing ? 'D·ªØ li·ªáu trang Pricing ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' : 'D·ªØ li·ªáu trang Pricing ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
            data: {
                content: result.content,
                version: result.version,
                status: result.status,
                type: result.type
            }
        });
    } catch (error) {
        logger.error('L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu trang Pricing:', error);
        next(new AppError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu trang Pricing', 500));
    }
};
