import axios from 'axios';
import logger from '../utils/logger.js';

/**
 * Stock Service - T√≠ch h·ª£p v·ªõi Stock API Service
 * X·ª≠ l√Ω d·ªØ li·ªáu c·ªï phi·∫øu real-time t·ª´ https://my-app-flashapi.onrender.com
 */
class StockService {
    constructor() {
        this.baseUrl = process.env.STOCK_API_URL || 'https://my-app-flashapi.onrender.com';
        this.timeout = process.env.NODE_ENV === 'production' ? 15000 : 30000; // Production: 15s, Dev: 30s
        this.cache = new Map(); // Cache cho d·ªØ li·ªáu c·ªï phi·∫øu
        this.cacheExpiry = process.env.NODE_ENV === 'production' ? 3 * 60 * 1000 : 5 * 60 * 1000; // Production: 3min, Dev: 5min
        this.maxRetries = 2; // S·ªë l·∫ßn retry cho production
        this.retryDelay = 1000; // 1 gi√¢y delay gi·ªØa c√°c retry

        // Production logging with environment variable check
        logger.info('üöÄ StockService initialized', {
            environment: process.env.NODE_ENV,
            baseUrl: this.baseUrl,
            timeout: this.timeout,
            cacheExpiry: this.cacheExpiry,
            stockApiUrlFromEnv: process.env.STOCK_API_URL,
            hasStockApiUrl: !!process.env.STOCK_API_URL
        });
    }

    /**
     * L·∫•y gi√° c·ªï phi·∫øu hi·ªán t·∫°i theo m√£ v·ªõi retry logic cho production
     * @param {string} symbol - M√£ c·ªï phi·∫øu (VD: VNM, FPT, VIC)
     * @returns {Promise<Object>} Th√¥ng tin gi√° c·ªï phi·∫øu
     */
    async getStockPrice(symbol) {
        const cacheKey = `price_${symbol.toUpperCase()}`;
        const cached = this.getFromCache(cacheKey);
        if (cached) {
            if (process.env.NODE_ENV !== 'production') {
                logger.info(`üìä Cache hit for stock price: ${symbol}`);
            }
            return cached;
        }

        return await this.executeWithRetry(async () => {
            if (process.env.NODE_ENV !== 'production') {
                logger.info(`üìä Fetching stock price for: ${symbol}`);
            }

            const response = await axios.get(`${this.baseUrl}/api/price`, {
                params: { symbol: symbol.toUpperCase(), source: 'TCBS' },
                timeout: this.timeout,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'User-Agent': 'VanLang-Budget-Agent/1.0'
                }
            });

            const data = response.data;

            // Validate response data
            if (!data || typeof data !== 'object') {
                throw new Error('Invalid response format from Stock API');
            }

            // X·ª≠ l√Ω d·ªØ li·ªáu v√† format
            const result = {
                symbol: data.symbol || symbol.toUpperCase(),
                price: this.validateNumber(data.price),
                change: this.validateNumber(data.change),
                pct_change: this.validateNumber(data.pct_change),
                volume: this.validateNumber(data.volume),
                source: data.source || 'TCBS',
                timestamp: data.timestamp || new Date().toISOString(),
                error: data.error || null
            };

            // Cache k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ l·ªói v√† c√≥ d·ªØ li·ªáu h·ª£p l·ªá
            if (!result.error && result.price > 0) {
                this.setCache(cacheKey, result);
            }

            return result;
        }, `stock price for ${symbol}`);
    }

    /**
     * Execute function with retry logic for production stability
     */
    async executeWithRetry(fn, operation) {
        let lastError;

        for (let attempt = 1; attempt <= this.maxRetries + 1; attempt++) {
            try {
                return await fn();
            } catch (error) {
                lastError = error;

                if (attempt <= this.maxRetries) {
                    if (process.env.NODE_ENV === 'production') {
                        logger.warn(`üîÑ Retry ${attempt}/${this.maxRetries} for ${operation}:`, error.message);
                    }
                    await this.delay(this.retryDelay * attempt); // Exponential backoff
                } else {
                    logger.error(`‚ùå Final attempt failed for ${operation}:`, error.message);
                }
            }
        }

        // Return error response instead of throwing
        return {
            symbol: operation.includes('stock price for') ? operation.split('stock price for ')[1]?.toUpperCase() : 'UNKNOWN',
            price: null,
            error: this.getProductionErrorMessage(lastError),
            timestamp: new Date().toISOString()
        };
    }

    /**
     * Validate and sanitize numeric values
     */
    validateNumber(value) {
        if (value === null || value === undefined || isNaN(value)) {
            return 0;
        }
        return Number(value);
    }

    /**
     * Get user-friendly error message for production
     */
    getProductionErrorMessage(error) {
        // Log error details for debugging (only in production logs)
        if (process.env.NODE_ENV === 'production') {
            logger.error('üìä Stock API Error Details', {
                code: error.code,
                status: error.response?.status,
                message: error.message,
                url: error.config?.url
            });
        }

        if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
            return 'D·ªãch v·ª• d·ªØ li·ªáu c·ªï phi·∫øu ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau';
        }
        if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
            return 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• d·ªØ li·ªáu c·ªï phi·∫øu';
        }
        if (error.response?.status === 404) {
            return 'M√£ c·ªï phi·∫øu kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£';
        }
        if (error.response?.status === 429) {
            return 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t';
        }
        if (error.response?.status >= 500) {
            return 'D·ªãch v·ª• d·ªØ li·ªáu c·ªï phi·∫øu t·∫°m th·ªùi g·∫∑p s·ª± c·ªë';
        }

        // Generic error for production
        return process.env.NODE_ENV === 'production'
            ? 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu c·ªï phi·∫øu, vui l√≤ng th·ª≠ l·∫°i sau'
            : `L·ªói: ${error.message}`;
    }

    /**
     * Delay utility for retry logic
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * L·∫•y danh s√°ch c·ªï phi·∫øu theo ng√†nh v·ªõi retry logic
     * @param {string} industry - T√™n ng√†nh (banking, real_estate, technology, etc.)
     * @param {number} limit - S·ªë l∆∞·ª£ng c·ªï phi·∫øu c·∫ßn l·∫•y
     * @returns {Promise<Object>} Danh s√°ch c·ªï phi·∫øu theo ng√†nh
     */
    async getStocksByIndustry(industry = 'all', limit = 20) {
        const cacheKey = `industry_${industry}_${limit}`;
        const cached = this.getFromCache(cacheKey);
        if (cached) {
            if (process.env.NODE_ENV !== 'production') {
                logger.info(`üìä Cache hit for industry stocks: ${industry}`);
            }
            return cached;
        }

        return await this.executeWithRetry(async () => {
            if (process.env.NODE_ENV !== 'production') {
                logger.info(`üìä Fetching stocks by industry: ${industry}`);
            }

            const response = await axios.get(`${this.baseUrl}/api/stocks/by-industry`, {
                params: { industry, limit, source: 'TCBS' },
                timeout: this.timeout,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'User-Agent': 'VanLang-Budget-Agent/1.0'
                }
            });

            const result = response.data;

            // Validate response
            if (!result || typeof result !== 'object') {
                throw new Error('Invalid response format from Stock API');
            }

            // Cache k·∫øt qu·∫£ n·∫øu th√†nh c√¥ng
            if (result && !result.error && result.stocks && Array.isArray(result.stocks)) {
                this.setCache(cacheKey, result);
            }

            return result;
        }, `stocks by industry ${industry}`).catch(() => {
            // Fallback response for production
            return {
                industry,
                stocks: [],
                count: 0,
                error: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ng√†nh, vui l√≤ng th·ª≠ l·∫°i sau',
                timestamp: new Date().toISOString()
            };
        });
    }

    /**
     * L·∫•y d·ªØ li·ªáu real-time cho nhi·ªÅu m√£ c·ªï phi·∫øu
     * @param {string[]} symbols - M·∫£ng c√°c m√£ c·ªï phi·∫øu
     * @returns {Promise<Object>} D·ªØ li·ªáu real-time
     */
    async getRealtimeStocks(symbols) {
        try {
            const symbolsStr = symbols.map(s => s.toUpperCase()).join(',');
            const cacheKey = `realtime_${symbolsStr}`;
            const cached = this.getFromCache(cacheKey);
            if (cached) {
                logger.info(`üìä Cache hit for realtime stocks: ${symbolsStr}`);
                return cached;
            }

            logger.info(`üìä Fetching realtime data for: ${symbolsStr}`);
            const response = await axios.get(`${this.baseUrl}/api/stock/realtime`, {
                params: { symbols: symbolsStr, source: 'TCBS' },
                timeout: this.timeout,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            const result = response.data;

            // Cache k·∫øt qu·∫£ n·∫øu th√†nh c√¥ng
            if (result && !result.error) {
                this.setCache(cacheKey, result);
            }

            return result;
        } catch (error) {
            logger.error(`‚ùå Error fetching realtime stocks:`, error.message);
            return {
                symbols: symbols,
                data: [],
                count: 0,
                error: `Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu real-time: ${error.message}`,
                timestamp: new Date().toISOString()
            };
        }
    }

    /**
     * Ph√¢n t√≠ch xu h∆∞·ªõng c·ªï phi·∫øu d·ª±a tr√™n d·ªØ li·ªáu gi√°
     * @param {Object} stockData - D·ªØ li·ªáu c·ªï phi·∫øu
     * @returns {Object} Ph√¢n t√≠ch xu h∆∞·ªõng
     */
    analyzeStockTrend(stockData) {
        try {
            const { price, change, pct_change, volume, symbol } = stockData;

            if (!price || price === 0) {
                return {
                    trend: 'unknown',
                    analysis: 'Kh√¥ng c√≥ d·ªØ li·ªáu gi√° ƒë·ªÉ ph√¢n t√≠ch',
                    recommendation: 'Vui l√≤ng ki·ªÉm tra l·∫°i m√£ c·ªï phi·∫øu'
                };
            }

            let trend = 'neutral';
            let analysis = '';
            let recommendation = '';

            // Ph√¢n t√≠ch xu h∆∞·ªõng d·ª±a tr√™n % thay ƒë·ªïi
            if (pct_change > 3) {
                trend = 'strong_bullish';
                analysis = `${symbol} ƒëang c√≥ xu h∆∞·ªõng tƒÉng m·∫°nh v·ªõi m·ª©c tƒÉng ${pct_change.toFixed(2)}%`;
                recommendation = 'C·ªï phi·∫øu ƒëang c√≥ momentum t√≠ch c·ª±c, c√≥ th·ªÉ c√¢n nh·∫Øc mua v√†o';
            } else if (pct_change > 1) {
                trend = 'bullish';
                analysis = `${symbol} ƒëang tƒÉng nh·∫π v·ªõi m·ª©c tƒÉng ${pct_change.toFixed(2)}%`;
                recommendation = 'Xu h∆∞·ªõng t√≠ch c·ª±c, theo d√µi th√™m ƒë·ªÉ quy·∫øt ƒë·ªãnh';
            } else if (pct_change < -3) {
                trend = 'strong_bearish';
                analysis = `${symbol} ƒëang gi·∫£m m·∫°nh v·ªõi m·ª©c gi·∫£m ${Math.abs(pct_change).toFixed(2)}%`;
                recommendation = 'C·∫ßn th·∫≠n tr·ªçng, c√≥ th·ªÉ ch·ªù ƒë·ª£i t√≠n hi·ªáu ph·ª•c h·ªìi';
            } else if (pct_change < -1) {
                trend = 'bearish';
                analysis = `${symbol} ƒëang gi·∫£m nh·∫π v·ªõi m·ª©c gi·∫£m ${Math.abs(pct_change).toFixed(2)}%`;
                recommendation = 'Theo d√µi s√°t sao, c√≥ th·ªÉ l√† c∆° h·ªôi mua v√†o n·∫øu c√≥ t√≠n hi·ªáu ph·ª•c h·ªìi';
            } else {
                trend = 'neutral';
                analysis = `${symbol} ƒëang giao d·ªãch ·ªïn ƒë·ªãnh v·ªõi bi·∫øn ƒë·ªông nh·ªè ${pct_change.toFixed(2)}%`;
                recommendation = 'Th·ªã tr∆∞·ªùng ƒëang consolidate, ch·ªù ƒë·ª£i t√≠n hi·ªáu r√µ r√†ng h∆°n';
            }

            // Ph√¢n t√≠ch kh·ªëi l∆∞·ª£ng giao d·ªãch
            let volumeAnalysis = '';
            if (volume > 1000000) {
                volumeAnalysis = 'Kh·ªëi l∆∞·ª£ng giao d·ªãch cao, cho th·∫•y s·ª± quan t√¢m l·ªõn t·ª´ nh√† ƒë·∫ßu t∆∞';
            } else if (volume > 100000) {
                volumeAnalysis = 'Kh·ªëi l∆∞·ª£ng giao d·ªãch trung b√¨nh';
            } else {
                volumeAnalysis = 'Kh·ªëi l∆∞·ª£ng giao d·ªãch th·∫•p, thanh kho·∫£n h·∫°n ch·∫ø';
            }

            return {
                trend,
                analysis: `${analysis}. ${volumeAnalysis}`,
                recommendation,
                technical_indicators: {
                    price_change: change,
                    pct_change: pct_change,
                    volume: volume,
                    volume_level: volume > 1000000 ? 'high' : volume > 100000 ? 'medium' : 'low'
                }
            };
        } catch (error) {
            logger.error('‚ùå Error analyzing stock trend:', error.message);
            return {
                trend: 'unknown',
                analysis: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng do l·ªói d·ªØ li·ªáu',
                recommendation: 'Vui l√≤ng th·ª≠ l·∫°i sau'
            };
        }
    }

    /**
     * Format gi√° c·ªï phi·∫øu theo ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá Vi·ªát Nam
     * @param {number} price - Gi√° c·ªï phi·∫øu
     * @returns {string} Gi√° ƒë√£ format
     */
    formatPrice(price) {
        if (!price || price === 0) return 'N/A';
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(price);
    }

    /**
     * Format ph·∫ßn trƒÉm thay ƒë·ªïi
     * @param {number} pctChange - Ph·∫ßn trƒÉm thay ƒë·ªïi
     * @returns {string} Ph·∫ßn trƒÉm ƒë√£ format v·ªõi m√†u s·∫Øc
     */
    formatPctChange(pctChange) {
        if (pctChange === null || pctChange === undefined) return 'N/A';
        const sign = pctChange >= 0 ? '+' : '';
        const emoji = pctChange >= 0 ? 'üìà' : 'üìâ';
        return `${emoji} ${sign}${pctChange.toFixed(2)}%`;
    }

    /**
     * Format kh·ªëi l∆∞·ª£ng giao d·ªãch
     * @param {number} volume - Kh·ªëi l∆∞·ª£ng
     * @returns {string} Kh·ªëi l∆∞·ª£ng ƒë√£ format
     */
    formatVolume(volume) {
        if (!volume || volume === 0) return 'N/A';
        if (volume >= 1000000) {
            return `${(volume / 1000000).toFixed(1)}M`;
        } else if (volume >= 1000) {
            return `${(volume / 1000).toFixed(1)}K`;
        }
        return volume.toLocaleString('vi-VN');
    }

    /**
     * T·∫°o response ƒë·∫ßy ƒë·ªß cho c·ªï phi·∫øu v·ªõi ph√¢n t√≠ch
     * @param {string} symbol - M√£ c·ªï phi·∫øu
     * @returns {Promise<Object>} Response ƒë·∫ßy ƒë·ªß
     */
    async getStockAnalysis(symbol) {
        try {
            const stockData = await this.getStockPrice(symbol);

            if (stockData.error) {
                return {
                    success: false,
                    symbol: symbol.toUpperCase(),
                    error: stockData.error,
                    message: `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin cho m√£ c·ªï phi·∫øu ${symbol.toUpperCase()}`
                };
            }

            const trendAnalysis = this.analyzeStockTrend(stockData);

            return {
                success: true,
                symbol: stockData.symbol,
                price: {
                    current: stockData.price,
                    formatted: this.formatPrice(stockData.price),
                    change: stockData.change,
                    pct_change: stockData.pct_change,
                    pct_change_formatted: this.formatPctChange(stockData.pct_change)
                },
                volume: {
                    raw: stockData.volume,
                    formatted: this.formatVolume(stockData.volume)
                },
                analysis: trendAnalysis,
                source: stockData.source,
                timestamp: stockData.timestamp
            };
        } catch (error) {
            logger.error(`‚ùå Error getting stock analysis for ${symbol}:`, error.message);
            return {
                success: false,
                symbol: symbol.toUpperCase(),
                error: error.message,
                message: `ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch c·ªï phi·∫øu ${symbol.toUpperCase()}`
            };
        }
    }

    /**
     * So s√°nh c·ªï phi·∫øu v·ªõi c√°c c·ªï phi·∫øu c√πng ng√†nh
     * @param {string} symbol - M√£ c·ªï phi·∫øu
     * @param {string} industry - Ng√†nh
     * @returns {Promise<Object>} K·∫øt qu·∫£ so s√°nh
     */
    async compareWithIndustry(symbol, industry) {
        try {
            const [stockData, industryData] = await Promise.all([
                this.getStockPrice(symbol),
                this.getStocksByIndustry(industry, 10)
            ]);

            if (stockData.error || industryData.error) {
                return {
                    success: false,
                    error: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ƒë·ªÉ so s√°nh'
                };
            }

            const industryStocks = industryData.stocks || [];
            const avgPctChange = industryStocks.reduce((sum, stock) => sum + (stock.pct_change || 0), 0) / industryStocks.length;

            let comparison = '';
            if (stockData.pct_change > avgPctChange + 1) {
                comparison = 'outperforming';
            } else if (stockData.pct_change < avgPctChange - 1) {
                comparison = 'underperforming';
            } else {
                comparison = 'inline';
            }

            return {
                success: true,
                symbol: stockData.symbol,
                industry,
                stock_performance: stockData.pct_change,
                industry_avg: avgPctChange,
                comparison,
                comparison_text: this.getComparisonText(comparison, stockData.pct_change, avgPctChange),
                industry_stocks: industryStocks.slice(0, 5) // Top 5 c·ªï phi·∫øu c√πng ng√†nh
            };
        } catch (error) {
            logger.error(`‚ùå Error comparing ${symbol} with industry ${industry}:`, error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * T·∫°o text so s√°nh v·ªõi ng√†nh
     * @param {string} comparison - Lo·∫°i so s√°nh
     * @param {number} stockPct - % thay ƒë·ªïi c·ªßa c·ªï phi·∫øu
     * @param {number} industryAvg - % thay ƒë·ªïi trung b√¨nh ng√†nh
     * @returns {string} Text m√¥ t·∫£ so s√°nh
     */
    getComparisonText(comparison, stockPct, industryAvg) {
        const diff = Math.abs(stockPct - industryAvg).toFixed(2);

        switch (comparison) {
            case 'outperforming':
                return `C·ªï phi·∫øu ƒëang v∆∞·ª£t tr·ªôi so v·ªõi ng√†nh, cao h∆°n ${diff}% so v·ªõi m·ª©c trung b√¨nh`;
            case 'underperforming':
                return `C·ªï phi·∫øu ƒëang k√©m hi·ªáu qu·∫£ so v·ªõi ng√†nh, th·∫•p h∆°n ${diff}% so v·ªõi m·ª©c trung b√¨nh`;
            default:
                return `C·ªï phi·∫øu ƒëang giao d·ªãch ph√π h·ª£p v·ªõi xu h∆∞·ªõng chung c·ªßa ng√†nh`;
        }
    }

    /**
     * Cache management methods
     */
    setCache(key, data) {
        this.cache.set(key, {
            data,
            timestamp: Date.now()
        });
    }

    getFromCache(key) {
        const cached = this.cache.get(key);
        if (!cached) return null;

        if (Date.now() - cached.timestamp > this.cacheExpiry) {
            this.cache.delete(key);
            return null;
        }

        return cached.data;
    }

    /**
     * Clear cache
     */
    clearCache() {
        this.cache.clear();
        logger.info('üìä Stock cache cleared');
    }

    /**
     * Get cache statistics
     */
    getCacheStats() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys())
        };
    }
}

export default StockService;
