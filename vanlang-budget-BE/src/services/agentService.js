import VanLangAgent from '../agent/vanlangAgent.js';
import logger from '../utils/logger.js';

class AgentService {
    constructor(geminiApiKey, cacheService = null) {
        this.agent = new VanLangAgent(geminiApiKey);
        this.cacheService = cacheService;
        this.sessionStore = new Map(); // Store user sessions
    }

    /**
     * Validate input message
     */
    validateInput(message, language = 'vi') {
        if (!message || typeof message !== 'string' || message.trim().length === 0) {
            return {
                isValid: false,
                error: language === 'vi' ?
                    'Tin nh·∫Øn kh√¥ng h·ª£p l·ªá.' :
                    'Invalid message.'
            };
        }

        if (message.length > 1000) {
            return {
                isValid: false,
                error: language === 'vi' ?
                    'Tin nh·∫Øn qu√° d√†i. Vui l√≤ng r√∫t g·ªçn.' :
                    'Message too long. Please shorten it.'
            };
        }

        return { isValid: true };
    }

    /**
     * Generate session ID for user
     */
    generateSessionId(userId) {
        const timestamp = Date.now();
        const random = Math.random().toString(36).substring(2);
        return `${userId}_${timestamp}_${random}`;
    }

    /**
     * Get or create user session
     */
    getUserSession(userId) {
        if (!this.sessionStore.has(userId)) {
            const sessionId = this.generateSessionId(userId);
            this.sessionStore.set(userId, {
                sessionId,
                createdAt: new Date(),
                messageCount: 0,
                lastActivity: new Date()
            });
        }

        const session = this.sessionStore.get(userId);
        session.lastActivity = new Date();
        session.messageCount += 1;

        return session;
    }

    /**
     * Clean up old sessions
     */
    cleanupSessions() {
        const now = new Date();
        const maxAge = 24 * 60 * 60 * 1000; // 24 hours

        for (const [userId, session] of this.sessionStore.entries()) {
            if (now - session.lastActivity > maxAge) {
                this.sessionStore.delete(userId);
                logger.info('Session cleaned up', { userId, sessionId: session.sessionId });
            }
        }
    }

    /**
     * Check cache for response
     */
    async getCachedResponse(cacheKey) {
        if (!this.cacheService) return null;

        try {
            return await this.cacheService.getGeminiResponse(cacheKey);
        } catch (error) {
            logger.warn('Cache retrieval error:', error);
            return null;
        }
    }

    /**
     * Store response in cache
     */
    async setCachedResponse(cacheKey, response) {
        if (!this.cacheService) return;

        try {
            await this.cacheService.cacheGeminiResponse(cacheKey, response);
        } catch (error) {
            logger.warn('Cache storage error:', error);
        }
    }

    /**
     * Generate cache key for message
     */
    generateCacheKey(userId, message) {
        const normalizedMessage = message.toLowerCase().trim();
        return `agent_${userId}_${Buffer.from(normalizedMessage).toString('base64')}`;
    }

    /**
     * Process user message with caching
     */
    async processMessage(userId, message, options = {}) {
        const startTime = Date.now();

        try {
            // Validate input
            const validation = this.validateInput(message, options.language);
            if (!validation.isValid) {
                return {
                    success: false,
                    error: validation.error,
                    responseTime: Date.now() - startTime
                };
            }

            // Get user session
            const session = this.getUserSession(userId);

            // Check cache first
            const cacheKey = this.generateCacheKey(userId, message);
            let cachedResponse = await this.getCachedResponse(cacheKey);

            if (cachedResponse) {
                logger.info('Agent response from cache', { userId, sessionId: session.sessionId });
                return {
                    success: true,
                    response: cachedResponse,
                    metadata: {
                        cached: true,
                        sessionId: session.sessionId,
                        messageCount: session.messageCount,
                        responseTime: Date.now() - startTime
                    }
                };
            }

            // Process with agent
            const response = await this.agent.handleUserMessage(
                userId,
                message,
                session.sessionId
            );

            // Cache the response
            await this.setCachedResponse(cacheKey, response);

            logger.info('Agent response generated', {
                userId,
                sessionId: session.sessionId,
                responseTime: Date.now() - startTime
            });

            return {
                success: true,
                response,
                metadata: {
                    cached: false,
                    sessionId: session.sessionId,
                    messageCount: session.messageCount,
                    responseTime: Date.now() - startTime
                }
            };

        } catch (error) {
            logger.error('Agent service error:', error);

            const errorMessage = options.language === 'vi' ?
                'Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.' :
                'Sorry, I encountered an error processing your request. Please try again later.';

            return {
                success: false,
                error: errorMessage,
                responseTime: Date.now() - startTime
            };
        }
    }

    /**
     * Get agent capabilities
     */
    getCapabilities(language = 'vi') {
        const capabilities = {
            vi: {
                title: 'VanLang Agent - Tr·ª£ l√Ω t√†i ch√≠nh AI',
                features: [
                    'üí∞ Th√™m giao d·ªãch thu nh·∫≠p/chi ti√™u b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n',
                    'üìä Ph√¢n t√≠ch t√¨nh h√¨nh t√†i ch√≠nh c√° nh√¢n',
                    'üîç Truy v·∫•n th√¥ng tin v·ªÅ s·ªë d∆∞, giao d·ªãch',
                    'üí° ƒê∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh th√¥ng minh',
                    'üìà Theo d√µi m·ª•c ti√™u ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞',
                    '‚è∞ Nh·∫Øc nh·ªü thanh to√°n v√† k·∫ø ho·∫°ch t√†i ch√≠nh'
                ],
                examples: [
                    'T√¥i v·ª´a mua c√† ph√™ 50000',
                    'Nh·∫≠n l∆∞∆°ng 15 tri·ªáu h√¥m nay',
                    'Ph√¢n t√≠ch chi ti√™u th√°ng n√†y',
                    'T√¥i c√≥ n√™n ƒë·∫ßu t∆∞ v√†o c·ªï phi·∫øu kh√¥ng?',
                    'S·ªë d∆∞ hi·ªán t·∫°i c·ªßa t√¥i l√† bao nhi√™u?'
                ]
            },
            en: {
                title: 'VanLang Agent - AI Financial Assistant',
                features: [
                    'üí∞ Add income/expense transactions using natural language',
                    'üìä Analyze personal financial situation',
                    'üîç Query information about balance and transactions',
                    'üí° Provide smart financial advice',
                    'üìà Track savings and investment goals',
                    '‚è∞ Remind about payments and financial plans'
                ],
                examples: [
                    'I just bought coffee for 50000',
                    'Received salary 15 million today',
                    'Analyze this month\'s expenses',
                    'Should I invest in stocks?',
                    'What is my current balance?'
                ]
            }
        };

        return capabilities[language] || capabilities.vi;
    }

    /**
     * Get session statistics
     */
    getSessionStats(userId) {
        const session = this.sessionStore.get(userId);
        if (!session) {
            return null;
        }

        return {
            sessionId: session.sessionId,
            createdAt: session.createdAt,
            lastActivity: session.lastActivity,
            messageCount: session.messageCount,
            duration: new Date() - session.createdAt
        };
    }

    /**
     * Reset user session
     */
    resetSession(userId) {
        this.sessionStore.delete(userId);
        logger.info('User session reset', { userId });
    }

    /**
     * Get all active sessions count
     */
    getActiveSessionsCount() {
        return this.sessionStore.size;
    }
}

export default AgentService;
