import Income from '../models/incomeModel.js';
import Expense from '../models/expenseModel.js';
import Investment from '../models/investmentModel.js';
import Budget from '../models/budgetModel.js';
import Loan from '../models/loanModel.js';

/**
 * Chatbot Service - Centralized business logic for chatbot operations
 */
class ChatbotService {
    constructor(cacheService, calculationService) {
        this.cacheService = cacheService;
        this.calculationService = calculationService;
    }

    /**
     * L·∫•y d·ªØ li·ªáu t√†i ch√≠nh th·∫≠t t·ª´ database v·ªõi caching
     */
    async getUserFinancialData(userId) {
        try {
            console.log('üîç ChatbotService.getUserFinancialData - Starting for userId:', userId);

            // Th·ª≠ l·∫•y t·ª´ cache tr∆∞·ªõc
            let financialData = await this.cacheService.getUserFinancialData(userId);

            if (!financialData) {
                console.log('Cache miss - Fetching fresh financial data from database');

                // L·∫•y d·ªØ li·ªáu t·ª´ database
                const [incomes, expenses, investments, budgets, loans] = await Promise.all([
                    Income.find({ userId: userId }),
                    Expense.find({ userId: userId }),
                    Investment.find({ userId: userId }),
                    Budget.find({ userId: userId }),
                    Loan.find({ userId: userId })
                ]);

                // T√≠nh to√°n c√°c metrics t·ªïng quan
                const totalIncomeAllTime = incomes.reduce((total, income) => total + (income.amount || 0), 0);
                const totalExpenseAllTime = expenses.reduce((total, expense) => total + (expense.amount || 0), 0);
                const totalSavings = Math.max(0, totalIncomeAllTime - totalExpenseAllTime);

                // T√≠nh t·ªïng kho·∫£n vay
                const totalLoanAmount = loans.reduce((total, loan) => {
                    const principal = loan.amount || 0;
                    const interestAmount = this.calculationService.calculateLoanInterest(
                        principal,
                        loan.interestRate || 0,
                        loan.term || 1
                    );
                    return total + principal + interestAmount;
                }, 0);

                // T√≠nh d·ªØ li·ªáu th√°ng hi·ªán t·∫°i
                const now = new Date();
                const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
                const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);

                const incomesThisMonth = incomes.filter(income => {
                    const incomeDate = new Date(income.date);
                    return incomeDate >= startOfMonth && incomeDate <= endOfMonth;
                });

                const expensesThisMonth = expenses.filter(expense => {
                    const expenseDate = new Date(expense.date);
                    return expenseDate >= startOfMonth && expenseDate <= endOfMonth;
                });

                const incomeThisMonth = incomesThisMonth.reduce((total, income) => total + (income.amount || 0), 0);
                const totalExpenses = expensesThisMonth.reduce((total, expense) => total + (expense.amount || 0), 0);

                // Nh√≥m chi ti√™u theo category
                const expensesThisMonthByCategory = expensesThisMonth.reduce((acc, expense) => {
                    const category = expense.category || 'Other';
                    acc[category] = (acc[category] || 0) + expense.amount;
                    return acc;
                }, {});

                // X·ª≠ l√Ω ƒë·∫ßu t∆∞
                const investmentData = investments.map(inv => ({
                    type: inv.type || 'Unknown',
                    name: inv.name || inv.symbol || 'Unnamed',
                    value: inv.currentValue || inv.amount || 0,
                    invested: inv.amount || 0,
                    profit: (inv.currentValue || inv.amount || 0) - (inv.amount || 0)
                }));

                const totalInvestmentValue = investmentData.reduce((total, inv) => total + inv.value, 0);

                // X·ª≠ l√Ω ng√¢n s√°ch
                const activeBudgets = budgets.map(budget => {
                    const spent = expensesThisMonth
                        .filter(expense => expense.category === budget.category)
                        .reduce((total, expense) => total + expense.amount, 0);

                    return {
                        category: budget.category,
                        limit: budget.amount,
                        spent: spent,
                        remaining: Math.max(0, budget.amount - spent),
                        percentUsed: budget.amount ? Math.round((spent / budget.amount) * 100) : 0
                    };
                });

                // T·∫°o financial data object
                financialData = {
                    // D·ªØ li·ªáu t·ªïng quan (nh∆∞ dashboard)
                    totalBalance: totalSavings,
                    totalIncomeAllTime,
                    totalExpenseAllTime,
                    totalLoanAmount,
                    totalSavings,

                    // D·ªØ li·ªáu th√°ng hi·ªán t·∫°i
                    incomeThisMonth,
                    totalExpensesThisMonth: totalExpenses,
                    expensesThisMonth: expensesThisMonthByCategory,
                    savingsThisMonth: incomeThisMonth - totalExpenses,

                    // ƒê·∫ßu t∆∞
                    investments: investmentData,
                    totalInvestmentValue,

                    // Ng√¢n s√°ch
                    activeBudgets,

                    // Metadata
                    lastUpdated: new Date().toISOString(),
                    dataSource: 'database',
                    period: {
                        month: now.getMonth() + 1,
                        year: now.getFullYear()
                    }
                };

                console.log('üìä ChatbotService - Financial data calculated:', {
                    totalBalance: totalSavings,
                    totalIncomeAllTime,
                    totalExpenseAllTime,
                    totalLoanAmount,
                    incomeThisMonth,
                    totalExpensesThisMonth: totalExpenses
                });

                // Cache data for 30 minutes
                await this.cacheService.cacheUserFinancialData(userId, financialData);
            } else {
                console.log(`Using cached financial data for user: ${userId}`);
            }

            return financialData;

        } catch (error) {
            console.error('ChatbotService.getUserFinancialData error:', error);

            // Return basic structure ƒë·ªÉ tr√°nh crash
            return {
                totalBalance: 0,
                totalIncomeAllTime: 0,
                totalExpenseAllTime: 0,
                totalLoanAmount: 0,
                incomeThisMonth: 0,
                totalExpensesThisMonth: 0,
                expensesThisMonth: {},
                totalSavings: 0,
                investments: [],
                activeBudgets: [],
                error: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t√†i ch√≠nh',
                lastUpdated: new Date().toISOString(),
                dataSource: 'error-fallback'
            };
        }
    }

    /**
     * Format financial context cho Gemini
     */
    formatFinancialContext(financialData, language = 'vi') {
        if (!financialData) return '';

        const templates = {
            vi: {
                totalBalance: `üíé S·ªë d∆∞ hi·ªán t·∫°i: ${financialData.totalBalance?.toLocaleString('vi-VN')} VND`,
                totalIncome: `üí∞ T·ªïng thu nh·∫≠p t√≠ch l≈©y: ${financialData.totalIncomeAllTime?.toLocaleString('vi-VN')} VND`,
                totalExpense: `üí∏ T·ªïng chi ti√™u t√≠ch l≈©y: ${financialData.totalExpenseAllTime?.toLocaleString('vi-VN')} VND`,
                totalLoan: `üè¶ T·ªïng kho·∫£n vay: ${financialData.totalLoanAmount?.toLocaleString('vi-VN')} VND`,
                incomeThisMonth: `üìà Thu nh·∫≠p th√°ng ${financialData.period?.month}: ${financialData.incomeThisMonth?.toLocaleString('vi-VN')} VND`,
                expenseThisMonth: `üìâ Chi ti√™u th√°ng ${financialData.period?.month}: ${financialData.totalExpensesThisMonth?.toLocaleString('vi-VN')} VND`,
                investments: `üéØ T·ªïng gi√° tr·ªã ƒë·∫ßu t∆∞: ${financialData.totalInvestmentValue?.toLocaleString('vi-VN')} VND`,
                budgets: `üìã Ng√¢n s√°ch ƒëang ho·∫°t ƒë·ªông: ${financialData.activeBudgets?.length || 0} ng√¢n s√°ch`
            },
            en: {
                totalBalance: `üíé Current balance: ${financialData.totalBalance?.toLocaleString('en-US')} VND`,
                totalIncome: `üí∞ Total accumulated income: ${financialData.totalIncomeAllTime?.toLocaleString('en-US')} VND`,
                totalExpense: `üí∏ Total accumulated expenses: ${financialData.totalExpenseAllTime?.toLocaleString('en-US')} VND`,
                totalLoan: `üè¶ Total loans: ${financialData.totalLoanAmount?.toLocaleString('en-US')} VND`,
                incomeThisMonth: `üìà Income this month: ${financialData.incomeThisMonth?.toLocaleString('en-US')} VND`,
                expenseThisMonth: `üìâ Expenses this month: ${financialData.totalExpensesThisMonth?.toLocaleString('en-US')} VND`,
                investments: `üéØ Total investment value: ${financialData.totalInvestmentValue?.toLocaleString('en-US')} VND`,
                budgets: `üìã Active budgets: ${financialData.activeBudgets?.length || 0} budgets`
            }
        };

        const t = templates[language] || templates.vi;
        let context = `\nüìä TH√îNG TIN T√ÄI CH√çNH HI·ªÜN T·∫†I:\n`;

        // D·ªØ li·ªáu t·ªïng quan
        if (financialData.totalBalance !== undefined) {
            context += `${t.totalBalance}\n`;
        }

        if (financialData.totalIncomeAllTime !== undefined) {
            context += `${t.totalIncome}\n`;
        }

        if (financialData.totalExpenseAllTime !== undefined) {
            context += `${t.totalExpense}\n`;
        }

        if (financialData.totalLoanAmount !== undefined && financialData.totalLoanAmount > 0) {
            context += `${t.totalLoan}\n`;
        }

        // D·ªØ li·ªáu th√°ng hi·ªán t·∫°i
        context += `\nüìÖ D·ªÆ LI·ªÜU TH√ÅNG ${financialData.period?.month}/${financialData.period?.year}:\n`;

        if (financialData.incomeThisMonth !== undefined) {
            context += `${t.incomeThisMonth}\n`;
        }

        if (financialData.totalExpensesThisMonth !== undefined) {
            context += `${t.expenseThisMonth}\n`;
        }

        // ƒê·∫ßu t∆∞
        if (financialData.investments?.length > 0) {
            context += `${t.investments}\n`;
        }

        // Ng√¢n s√°ch
        if (financialData.activeBudgets?.length > 0) {
            context += `${t.budgets}\n`;
        }

        return context;
    }

    /**
     * Validate user input
     */
    validateInput(message, language = 'vi') {
        if (!message || typeof message !== 'string' || message.trim().length === 0) {
            return {
                isValid: false,
                error: language === 'vi' ? 'Tin nh·∫Øn kh√¥ng h·ª£p l·ªá.' : 'Invalid message.'
            };
        }

        if (message.length > 1000) {
            return {
                isValid: false,
                error: language === 'vi' ? 'Tin nh·∫Øn qu√° d√†i.' : 'Message too long.'
            };
        }

        return { isValid: true };
    }

    /**
     * Check if financial data is needed for the query
     */
    needsFinancialData(message, intentAnalysis) {
        const financialKeywords = [
            'thu nh·∫≠p', 'chi ti√™u', 'ti·∫øt ki·ªám', 'ƒë·∫ßu t∆∞', 'ng√¢n s√°ch', 's·ªë d∆∞', 'balance',
            'income', 'expense', 'saving', 'investment', 'budget', 'money', 'ti·ªÅn',
            'c·ªßa t√¥i', 'my', 'hi·ªán t·∫°i', 'current', 't·ªïng', 'total'
        ];

        const messageContainsFinancialKeywords = financialKeywords.some(keyword =>
            message.toLowerCase().includes(keyword.toLowerCase())
        );

        const intentRequiresFinancialData = [
            'expense.query', 'expense.summary', 'expense.detail',
            'income.query', 'income.summary', 'income.detail',
            'loan.query', 'loan.summary', 'loan.detail',
            'balance.query',
            'budget.check', 'budget.calculate',
            'investment.query', 'investment.analyze',
            'saving.goal',
            'financial.analyze',
        ].includes(intentAnalysis?.intent);

        return intentRequiresFinancialData || messageContainsFinancialKeywords;
    }

    // Method to generate simple responses based on intent
    getGreetingResponse(language = 'vi') {
        const responses = {
            vi: 'Ch√†o b·∫°n! T√¥i l√† VanLangBot, tr·ª£ l√Ω t√†i ch√≠nh AI c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? üí∞',
            en: 'Hello! I am VanLangBot, your AI financial assistant. How can I help you today? üí∞'
        };
        return responses[language] || responses.vi;
    }

    getFarewellResponse(language = 'vi') {
        const responses = {
            vi: 'T·∫°m bi·ªát! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh. H·∫πn g·∫∑p l·∫°i! üëã',
            en: 'Goodbye! Have a great day. See you later! üëã'
        };
        return responses[language] || responses.vi;
    }

    getBotIntroductionResponse(language = 'vi') {
        const responses = {
            vi: 'T√¥i l√† VanLangBot, tr·ª£ l√Ω t√†i ch√≠nh AI ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n, theo d√µi thu chi, ph√¢n t√≠ch ƒë·∫ßu t∆∞ v√† l·∫≠p k·∫ø ho·∫°ch cho t∆∞∆°ng lai. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ li√™n quan ƒë·∫øn t√†i ch√≠nh c·ªßa b·∫°n!',
            en: 'I am VanLangBot, an AI financial assistant designed to help you manage your personal finances, track income and expenses, analyze investments, and plan for the future. Feel free to ask me anything about your finances!'
        };
        return responses[language] || responses.vi;
    }

    getTimeDateResponse(language = 'vi') {
        const now = new Date();
        const timeString = now.toLocaleTimeString(language === 'vi' ? 'vi-VN' : 'en-US');
        const dateString = now.toLocaleDateString(language === 'vi' ? 'vi-VN' : 'en-US');
        const responses = {
            vi: `B√¢y gi·ªù l√† ${timeString} ng√†y ${dateString}.`,
            en: `The current time is ${timeString} on ${dateString}.`
        };
        return responses[language] || responses.vi;
    }

    getCapabilityResponse(language = 'vi') {
        const responses = {
            vi: 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n: theo d√µi thu nh·∫≠p v√† chi ti√™u, ph√¢n t√≠ch c√°c kho·∫£n ƒë·∫ßu t∆∞, xem x√©t c√°c kho·∫£n vay, ƒë·∫∑t m·ª•c ti√™u ti·∫øt ki·ªám, v√† ƒë∆∞a ra c√°c g·ª£i √Ω t√†i ch√≠nh th√¥ng minh. B·∫°n mu·ªën t√¥i gi√∫p g√¨ c·ª• th·ªÉ?',
            en: 'I can help you with: tracking income and expenses, analyzing investments, reviewing loans, setting savings goals, and providing smart financial suggestions. What can I help you with specifically?'
        };
        return responses[language] || responses.vi;
    }

    getBlockedTopicResponse(language = 'vi') {
        const responses = {
            vi: 'Xin l·ªói, t√¥i ch·ªâ ƒë∆∞·ª£c l·∫≠p tr√¨nh ƒë·ªÉ h·ªó tr·ª£ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn t√†i ch√≠nh c√° nh√¢n trong ·ª©ng d·ª•ng VanLang Budget. B·∫°n c√≥ c√¢u h·ªèi n√†o kh√°c v·ªÅ t√†i ch√≠nh kh√¥ng?',
            en: 'Sorry, I am only programmed to assist with personal finance matters within the VanLang Budget application. Do you have any other finance-related questions?'
        };
        return responses[language] || responses.vi;
    }
}

export default ChatbotService;
