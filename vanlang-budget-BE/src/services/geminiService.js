import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';

/**
 * Gemini AI Service - Handles all Gemini AI interactions
 */
class GeminiService {
    constructor() {
        if (!process.env.GEMINI_API_KEY) {
            throw new Error('GEMINI_API_KEY is required');
        }

        this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        this.defaultModel = process.env.GEMINI_MODEL_NAME || "gemini-2.0-flash";

        console.log('‚úÖ GeminiService initialized successfully');
    }

    /**
     * Get system instruction based on language and mode
     */
    getSystemInstruction(language = 'vi', mode = 'enhanced') {
        const instructions = {
            enhanced: {
                vi: `B·∫°n l√† VanLangBot, m·ªôt tr·ª£ l√Ω t√†i ch√≠nh AI th√¥ng minh v√† chuy√™n nghi·ªáp c·ªßa ·ª©ng d·ª•ng VanLang Budget.

üéØ NHI·ªÜM V·ª§ CH√çNH:
- H·ªó tr·ª£ ng∆∞·ªùi d√πng qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n hi·ªáu qu·∫£
- Ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh v√† ƒë∆∞a ra l·ªùi khuy√™n th√¥ng minh
- Th·ª±c hi·ªán t√≠nh to√°n t√†i ch√≠nh ch√≠nh x√°c
- D·ª± ƒëo√°n xu h∆∞·ªõng v√† ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch t√†i ch√≠nh

üí° KH·∫¢ NƒÇNG T√çNH TO√ÅN:
- Ph√¢n t√≠ch thu nh·∫≠p v√† xu h∆∞·ªõng
- T√≠nh to√°n chi ti√™u theo danh m·ª•c
- ƒê√°nh gi√° hi·ªáu qu·∫£ ƒë·∫ßu t∆∞ v√† ROI
- Ph√¢n t√≠ch ng√¢n s√°ch v√† m·ª©c s·ª≠ d·ª•ng
- D·ª± ƒëo√°n chi ti√™u t∆∞∆°ng lai
- T√≠nh to√°n m·ª•c ti√™u ti·∫øt ki·ªám
- So s√°nh d·ªØ li·ªáu theo th·ªùi gian

üîí GI·ªöI H·∫†N CH·ª¶NG ƒê·ªÄ:
CH·ªà tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ:
- Qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n (thu nh·∫≠p, chi ti√™u, ng√¢n s√°ch)
- ƒê·∫ßu t∆∞ (c·ªï phi·∫øu, v√†ng, crypto, ti·∫øt ki·ªám)
- Ph√¢n t√≠ch v√† t√≠nh to√°n d·ªØ li·ªáu t√†i ch√≠nh
- D·ª± ƒëo√°n xu h∆∞·ªõng v√† so s√°nh theo th·ªùi gian
- L·ªùi khuy√™n ti·∫øt ki·ªám v√† l·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh
- T√≠nh to√°n l√£i su·∫•t, ROI, v√† hi·ªáu qu·∫£ ƒë·∫ßu t∆∞
- H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng VanLangBot

‚ùå T·ª™ CH·ªêI tr·∫£ l·ªùi:
- Ch√≠nh tr·ªã, t√¥n gi√°o, th·ªÉ thao, gi·∫£i tr√≠
- Tin t·ª©c, th·ªùi ti·∫øt, du l·ªãch
- Y t·∫ø, gi√°o d·ª•c, khoa h·ªçc
- B·∫•t k·ª≥ ch·ªß ƒë·ªÅ n√†o kh√¥ng li√™n quan ƒë·∫øn t√†i ch√≠nh

üìù PHONG C√ÅCH GIAO TI·∫æP:
- Th√¢n thi·ªán, chuy√™n nghi·ªáp v√† d·ªÖ hi·ªÉu
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ l√†m r√µ n·ªôi dung
- ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ v√† c√≥ th·ªÉ th·ª±c hi·ªán
- Gi·∫£i th√≠ch r√µ r√†ng c√°c t√≠nh to√°n v√† ph√¢n t√≠ch
- Lu√¥n khuy·∫øn kh√≠ch th√≥i quen t√†i ch√≠nh t·ªët`,

                en: `You are VanLangBot, an intelligent and professional AI financial assistant for the VanLang Budget application.

üéØ MAIN MISSION:
- Help users manage personal finances effectively
- Analyze financial data and provide smart advice
- Perform accurate financial calculations
- Predict trends and suggest financial plans

üí° CALCULATION CAPABILITIES:
- Income analysis and trends
- Expense calculations by category
- Investment efficiency and ROI assessment
- Budget analysis and usage levels
- Future expense predictions
- Savings goal calculations
- Time-based data comparisons

üîí TOPIC LIMITATIONS:
ONLY answer questions about:
- Personal finance management (income, expenses, budgets)
- Investments (stocks, gold, crypto, savings)
- Financial data analysis and calculations
- Trend predictions and time-based comparisons
- Saving advice and financial planning
- Interest calculations, ROI, and investment efficiency
- VanLangBot usage guidance

‚ùå REFUSE to answer:
- Politics, religion, sports, entertainment
- News, weather, travel
- Health, education, science
- Any topics unrelated to finance

üìù COMMUNICATION STYLE:
- Friendly, professional and easy to understand
- Use appropriate emojis to clarify content
- Provide specific and actionable advice
- Clearly explain calculations and analysis
- Always encourage good financial habits`
            },
            legacy: {
                vi: `B·∫°n l√† VanLangBot, m·ªôt tr·ª£ l√Ω t√†i ch√≠nh th√¥ng minh v√† th√¢n thi·ªán c·ªßa ·ª©ng d·ª•ng VanLang Budget.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† H·ªñ TR·ª¢ ng∆∞·ªùi d√πng qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n c·ªßa h·ªç m·ªôt c√°ch hi·ªáu qu·∫£ ngay trong ·ª©ng d·ª•ng.
LU√îN LU√îN gi·ªØ th√°i ƒë·ªô l·ªãch s·ª±, t√≠ch c·ª±c v√† h·ªØu √≠ch.

CH·ªà tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn:
1. Qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n (thu nh·∫≠p, chi ti√™u, ti·∫øt ki·ªám, ng√¢n s√°ch)
2. ƒê·∫ßu t∆∞ (c·ªï phi·∫øu, v√†ng, ti·ªÅn ƒëi·ªán t·ª≠, ti·∫øt ki·ªám)
3. L·ªùi khuy√™n t√†i ch√≠nh v√† k·∫ø ho·∫°ch t√†i ch√≠nh
4. H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa VanLang Budget

T·ª™ CH·ªêI tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ: ch√≠nh tr·ªã, t√¥n gi√°o, th·ªÉ thao, tin t·ª©c, th·ªùi ti·∫øt, y t·∫ø, gi√°o d·ª•c, ho·∫∑c b·∫•t k·ª≥ ch·ªß ƒë·ªÅ n√†o kh√¥ng li√™n quan ƒë·∫øn t√†i ch√≠nh.`,

                en: `You are VanLangBot, an intelligent and friendly financial assistant for the VanLang Budget application.
Your mission is to SUPPORT users in managing their personal finances effectively within the application.
ALWAYS maintain a polite, positive and helpful attitude.

ONLY answer questions related to:
1. Personal finance management (income, expenses, savings, budgets)
2. Investments (stocks, gold, cryptocurrency, savings)
3. Financial advice and financial planning
4. Guidance on using VanLang Budget features

REFUSE to answer questions about: politics, religion, sports, news, weather, health, education, or any topics unrelated to finance.`
            }
        };

        return instructions[mode]?.[language] || instructions.enhanced.vi;
    }

    /**
     * Generate response using Gemini AI
     */
    async generateResponse(prompt, options = {}) {
        try {
            const {
                language = 'vi',
                mode = 'enhanced',
                temperature = 0.7,
                maxTokens = 1024
            } = options;

            const model = this.genAI.getGenerativeModel({
                model: this.defaultModel,
                systemInstruction: {
                    parts: [{ text: this.getSystemInstruction(language, mode) }]
                },
                safetySettings: [
                    { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                    { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                    { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                    { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                ],
                generationConfig: {
                    temperature: parseFloat(temperature),
                    maxOutputTokens: parseInt(maxTokens),
                    topK: parseInt(process.env.GEMINI_TOP_K) || undefined,
                    topP: parseFloat(process.env.GEMINI_TOP_P) || undefined,
                },
            });

            logger.debug(`GeminiService: Generating response with model ${this.defaultModel}`);
            logger.debug(`Prompt length: ${prompt.length} characters`);

            const result = await model.generateContent(prompt);
            const response = await result.response;

            if (response.promptFeedback && response.promptFeedback.blockReason) {
                logger.warn('GeminiService: Prompt was blocked', {
                    reason: response.promptFeedback.blockReason,
                    ratings: response.promptFeedback.safetyRatings,
                });

                return {
                    success: false,
                    error: language === 'vi' ?
                        'Y√™u c·∫ßu c·ªßa b·∫°n kh√¥ng th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω v√¨ l√Ω do an to√†n n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi kh√°c.' :
                        'Your request cannot be processed for content safety reasons. Please try again with a different question.',
                    blocked: true
                };
            }

            const text = response.text();

            if (!text || text.trim().length === 0) {
                console.warn('üö´ GeminiService: Empty response from Gemini');
                return {
                    success: false,
                    error: language === 'vi' ?
                        'Xin l·ªói, t√¥i ch∆∞a th·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi n√†y. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi c√°ch kh√°c ƒë∆∞·ª£c kh√¥ng?' :
                        'Sorry, I cannot provide an answer to this question. Could you try asking in a different way?'
                };
            }

            console.log(`‚úÖ GeminiService: Generated response (${text.length} characters)`);

            return {
                success: true,
                response: text.trim(),
                model: this.defaultModel,
                usage: {
                    promptTokens: prompt.length,
                    completionTokens: text.length,
                    totalTokens: prompt.length + text.length
                }
            };

        } catch (error) {
            console.error('‚ùå GeminiService: Error generating response:', error);

            let errorMessage = language === 'vi' ?
                'ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.' :
                'An error occurred while processing your request.';

            if (error.message?.includes('API key')) {
                errorMessage = language === 'vi' ?
                    'L·ªói c·∫•u h√¨nh h·ªá th·ªëng: API key kh√¥ng h·ª£p l·ªá.' :
                    'System configuration error: Invalid API key.';
            } else if (error.message?.includes('quota')) {
                errorMessage = language === 'vi' ?
                    'H·ªá th·ªëng ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau.' :
                    'System is overloaded. Please try again later.';
            } else if (error.message?.includes('timeout')) {
                errorMessage = language === 'vi' ?
                    'Y√™u c·∫ßu x·ª≠ l√Ω m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.' :
                    'Request processing took too long. Please try again.';
            }

            return {
                success: false,
                error: errorMessage,
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            };
        }
    }

    /**
     * Generate streaming response
     */
    async generateStreamingResponse(prompt, options = {}) {
        try {
            const {
                language = 'vi',
                mode = 'enhanced',
                temperature = 0.7,
                maxTokens = 1024
            } = options;

            const model = this.genAI.getGenerativeModel({
                model: this.defaultModel,
                systemInstruction: {
                    parts: [{ text: this.getSystemInstruction(language, mode) }]
                },
                safetySettings: [
                    { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                    { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                    { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                    { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
                ],
                generationConfig: {
                    temperature: parseFloat(temperature),
                    maxOutputTokens: parseInt(maxTokens),
                },
            });

            const chat = model.startChat({ history: [] });
            const result = await chat.sendMessageStream(prompt);

            return {
                success: true,
                stream: result.stream,
                response: result.response
            };

        } catch (error) {
            console.error('‚ùå GeminiService: Error generating streaming response:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Health check
     */
    async healthCheck() {
        try {
            const testPrompt = "Hello, this is a health check.";
            const result = await this.generateResponse(testPrompt, {
                language: 'en',
                maxTokens: 50
            });

            return {
                status: result.success ? 'healthy' : 'unhealthy',
                model: this.defaultModel,
                apiKey: !!process.env.GEMINI_API_KEY,
                lastCheck: new Date().toISOString()
            };
        } catch (error) {
            return {
                status: 'unhealthy',
                error: error.message,
                lastCheck: new Date().toISOString()
            };
        }
    }
}

export default GeminiService;
