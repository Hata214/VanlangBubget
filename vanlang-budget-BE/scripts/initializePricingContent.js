import mongoose from 'mongoose';
import SiteContent from '../src/models/siteContentModel.js';
import { config } from 'dotenv';

// Load environment variables
config();

const defaultPricingContent = {
    vi: {
        title: "B·∫£ng Gi√°",
        subtitle: "C√°c g√≥i d·ªãch v·ª• VanLang Budget",
        description: "Ch·ªçn g√≥i d·ªãch v·ª• ph√π h·ª£p v·ªõi nhu c·∫ßu t√†i ch√≠nh c·ªßa b·∫°n",
        comingSoonTitle: "S·∫Øp Ra M·∫Øt",
        comingSoonDescription: "Ch√∫ng t√¥i ƒëang n·ªó l·ª±c ƒë·ªÉ cung c·∫•p cho b·∫°n nh·ªØng g√≥i d·ªãch v·ª• t·ªët nh·∫•t. Vui l√≤ng quay l·∫°i sau ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v·ªÅ gi√°."
    },
    en: {
        title: "Pricing",
        subtitle: "VanLang Budget service packages",
        description: "Choose the service package that fits your financial needs",
        comingSoonTitle: "Coming Soon",
        comingSoonDescription: "We are working to provide you with the best service packages. Please check back later for pricing details."
    }
};

async function initializePricingContent() {
    try {
        // Connect to MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/vanlang-budget');
        console.log('‚úÖ Connected to MongoDB');

        // Check if pricing content already exists
        const existingPricing = await SiteContent.findOne({ type: 'pricing' });

        if (existingPricing) {
            console.log('‚ö†Ô∏è Pricing content already exists. Updating...');

            // Update existing content
            existingPricing.content = defaultPricingContent;
            existingPricing.version = (existingPricing.version || 0) + 1;
            existingPricing.updatedAt = new Date();

            await existingPricing.save();
            console.log('‚úÖ Pricing content updated successfully');
        } else {
            console.log('üìù Creating new pricing content...');

            // Create new pricing content
            const newPricing = new SiteContent({
                type: 'pricing',
                content: defaultPricingContent,
                status: 'published',
                version: 1,
                createdAt: new Date(),
                updatedAt: new Date()
            });

            await newPricing.save();
            console.log('‚úÖ Pricing content created successfully');
        }

        console.log('üéâ Pricing content initialization completed!');

    } catch (error) {
        console.error('‚ùå Error initializing pricing content:', error);
    } finally {
        // Close MongoDB connection
        await mongoose.connection.close();
        console.log('üîå MongoDB connection closed');
        process.exit(0);
    }
}

// Run the script
initializePricingContent();
