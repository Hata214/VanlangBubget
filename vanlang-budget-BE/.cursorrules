# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. When you receive a new task, first review the Scratchpad content, clear old tasks if necessary, explain the new task, and plan your steps. Use todo markers like:
[X] Task 1
[ ] Task 2

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
For visual testing and verification, use:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

## LLM
For code assistance and reviews:
```bash
venv/bin/python ./tools/llm_api.py --prompt "Your question" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)

# Lessons

## User Specified Lessons
- **Project Name: VanLangBudget Backend:** This is the name of the backend project. Remember to use this name consistently.
- **Tech Stack: Node.js, Express.js, MongoDB, Swagger**: Using Node.js with Express for the backend framework, MongoDB for database, and Swagger for API documentation and testing.
- **Features: Budget management, transaction tracking, user authentication, API documentation with Swagger**: The application will manage budgets, track transactions, handle user authentication, and provide API documentation with Swagger.
- **Framework: Express.js**: Express.js is the chosen framework for building the RESTful API.
- **Database: MongoDB**: MongoDB will be used as the database system for storing budget and transaction data.
- **Deployment: Render**: The application is configured for deployment on Render with appropriate environment variables.
- **IDE Choice: Cursor IDE:** Remember that the IDE is Cursor. Leverage its features.
- **Real-time Features**: WebSocket implementation for real-time notifications and updates using Socket.io.
- **Email Configuration**: Email setup can be postponed to later phases of the project.
- **Validation**: Using Joi for schema validation with detailed error messages.
- **Security**: Implementing rate limiting, JWT authentication, and global error handling.
- **MongoDB Connection**: Using enhanced connection options for better stability.
- **Swagger UI Issues**: Gặp vấn đề với việc triển khai Swagger UI - cần xử lý CORS, CSP và định dạng MIME type cho các file static.
- **Static Files on Render**: Cần phù hợp cho static file serving trên Render.
- **Error Handling**: Cần cải thiện hệ thống xử lý lỗi để hiển thị thông tin chi tiết hơn cho developer.
- **Swagger UI CDN Strategy**: 
  - Sử dụng CDN (jsdelivr.net) thay vì serve local files
  - Version ổn định: swagger-ui-dist@5.11.0
  - Cấu hình CSP headers cho phép CDN resources
  - Tách biệt API spec (api-docs.json) và UI (swagger.html)
- **Render Deployment Best Practices**:
  - Cấu hình build và start scripts phù hợp
  - Thiết lập environment variables trên Render dashboard
  - Cấu hình CORS và CSP headers phù hợp
  - Cấu hình persistent storage khi cần thiết
  - Xử lý graceful shutdown cho Node.js app

## Cursor learned
- **Cursor IDE Awareness:** Leverage Cursor IDE's specific features for code completion, refactoring, and debugging.
- **Version Control Integration:** Effectively use Cursor IDE's Git integration for version control management.
- **Collaboration Tools:** Explore Cursor IDE's collaboration tools for sharing code and working with others.
- **Customizable Settings:** Adjust Cursor IDE's settings for optimal performance and coding preferences.



